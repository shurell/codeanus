Перем СоответствиеИменДляКопирования;
Перем КлючСессии;	//Точно строка, но длина неизвестна
Перем фЮГ_ТаблицаОписанийКнопокПередатьЗаявку;
Перем фСтруктураНедоступныхПолейДляТолькоПросмотр;
Перем ОтложенныеЗадания;
Перем ОтложенныеЗаданияИзменяемыеРеквизиты;

Функция ТекДата()
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТекДата", Истина);
	
	//Получаем времяя сервера 1С +
	Если Лев(СтрокаСоединенияИнформационнойБазы(),4) = "Srvr" ИЛИ ИмяКомпьютера() = "1C_KORONOVSKIY" Тогда 
		Возврат АО_ПСМ.ПолучитьДатуСервера();
	КонецЕсли;
	//Получаем времяя сервера 1С -
	
	Ф = Новый ТекстовыйДокумент;
	Попыток = 0;
	~а:
	Попытка
		Если ИмяКомпьютера() = "1C_NOUT" Или ИмяКомпьютера() = "1C_PC" Тогда
			Ф.Записать("C:\Общая\1_"+ИмяКомпьютера()+".TXT");
		Иначе
			Ф.Записать("q:\1_"+ИмяКомпьютера()+".TXT");
		КонецЕсли;
	Исключение
		Попыток = Попыток + 1;
		Если Попыток > 3 Тогда
			Предупреждение("У Вас нет диска Q, обращайтесь к системному администратору");
			Если ИмяКомпьютера() = "C:\Общая\_PC" Тогда
				КомандаСистемы("net use C: \\1c_srv\TimeSinc /persistent:yes");
			Иначе
				КомандаСистемы("net use q: \\1c_srv\TimeSinc /persistent:yes");
			КонецЕсли;
			Перейти ~а;
		Иначе	
			Перейти ~а;
		КонецЕсли;
	КонецПопытки;
	Если ИмяКомпьютера() = "1C_NOUT" Или ИмяКомпьютера() = "1C_PC" Тогда
		Ф2 = Новый Файл("C:\Общая\1_"+ИмяКомпьютера()+".TXT");
	Иначе
		Ф2 = Новый Файл("q:\1_"+ИмяКомпьютера()+".TXT");
	КонецЕсли;
	Дат = Ф2.ПолучитьВремяИзменения();
	
	УстановитьЧасовойПоясСеанса("GMT+04");
	Если Не Час(ТекущаяДатаСеанса()) = Час(ТекущаяДата()) Тогда
		Дат = Дат +  60 * 60;
	КонецЕсли;
	
	Возврат Дат;
	
КонецФункции

Функция ТекущийСтатус_ЗаявкиУстановить(СтруктураНовыхРеквизитов)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТекущийСтатус_ЗаявкиУстановить", Истина);
	
	СтруктураПрежнихРеквизитов = Новый Структура("АО_СтатусыЗаявки,ДатаУстановкиПоследнегоСтатуса,Комментарий");
	ЗаполнитьЗначенияСвойств(СтруктураПрежнихРеквизитов, ЭтотОбъект);
	ТекущийСтатусЗаявки 	= СтруктураНовыхРеквизитов.Статус_На;
	ВремяТекущийСтатусЗаявки = СтруктураНовыхРеквизитов.Период;
	Если АО_СтатусыЗаявки <> ТекущийСтатусЗаявки или ДатаУстановкиПоследнегоСтатуса <> ВремяТекущийСтатусЗаявки Тогда
		АО_СтатусыЗаявки = ТекущийСтатусЗаявки;
		ДатаУстановкиПоследнегоСтатуса = ВремяТекущийСтатусЗаявки;
		ЭтотОбъект.Комментарий = "";
	ИначеЕсли АО_СтатусыЗаявки <> НовыйСтатусЗаявки	и НовыйСтатусЗаявки <> Неопределено и НовыйСтатусЗаявки <> Перечисления.АО_СтатусыЗаявки.ПустаяСсылка() Тогда
		АО_СтатусыЗаявки = НовыйСтатусЗаявки;
		ДатаУстановкиПоследнегоСтатуса = ТекДата();
		ЭтотОбъект.Комментарий = "";
	КонецЕсли;
	Возврат СтруктураПрежнихРеквизитов;
КонецФункции

Процедура ОбновитьХвостовоеКрепление()
	
	ХвостовоеКреплениеТип1 = Ложь;
	ХвостовоеКреплениеТип2 = Ложь;
	ХвостовоеКреплениеТип3 = Ложь;
	ХвостовоеКреплениеТип4 = Ложь;
	ХвостовоеКреплениеТип5 = Ложь;
	ХвостовоеКреплениеТип6 = Ложь;
	ХвостовоеКреплениеТип7 = Ложь;
	ХвостовоеКреплениеДвухстороннийСкотч = Ложь;
	ХвостовоеКреплениеЛюверсы = Ложь;
	ХвостовоеКреплениеЛюверс8 = Ложь;
	ХвостовоеКреплениеЛюверс12 = Ложь;
	Если Г_ОбразнаяПланка <> Ложь Тогда
		Г_ОбразнаяПланка = Ложь;
	КонецЕсли;
	Если ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Тип1 Тогда
		ХвостовоеКреплениеТип1 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Тип2 Тогда
		ХвостовоеКреплениеТип2 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Тип3 Тогда
		ХвостовоеКреплениеТип3 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Тип4 Тогда
		ХвостовоеКреплениеТип4 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Тип5 Тогда
		ХвостовоеКреплениеТип5 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Тип6 Тогда
		ХвостовоеКреплениеТип6 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Тип7 Тогда
		ХвостовоеКреплениеТип7 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.ДвухстороннийСкотч Тогда
		ХвостовоеКреплениеДвухстороннийСкотч = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Люверсы Тогда
		ХвостовоеКреплениеЛюверсы = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Люверс8 Тогда
		ХвостовоеКреплениеЛюверсы = Истина;
		ХвостовоеКреплениеЛюверс8 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Люверс12 Тогда
		ХвостовоеКреплениеЛюверсы = Истина;
		ХвостовоеКреплениеЛюверс12 = Истина;
	ИначеЕсли ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.Г_ОбразнаяПланка Тогда
		Г_ОбразнаяПланка = Истина; 
	КонецЕсли;
КонецПроцедуры	

Функция ПравильноЗаполненыДатаОтгрузкиИДатаИзготовления(НовыйСтатус = Неопределено);
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПравильноЗаполненыДатаОтгрузкиИДатаИзготовления", Истина);
	
	Если НовыйСтатус = Неопределено Тогда
		ТекущийСтатусЗаявки = АО_ОбщийМодуль.ПолучитьТекущийСтатусЗаявки(ЭтотОбъект.Ссылка, ТекущаяДата());
	Иначе	
		ТекущийСтатусЗаявки = НовыйСтатус;
	КонецЕсли;	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.АО_СтатусыЗаявки.ОмНаВывод);
	СписокСтатусов.Добавить(Перечисления.АО_СтатусыЗаявки.ОмНаПроверке);
	СписокСтатусов.Добавить(Перечисления.АО_СтатусыЗаявки.ОС_Утвержден);
	Если СписокСтатусов.НайтиПоЗначению(ТекущийСтатусЗаявки) = Неопределено Тогда
		Возврат Истина;
	Иначе	
		Возврат НЕ ( Дата >= Дата(2013,12,19) И ( ДатаИзготовления = Дата("00000000000000") ИЛИ ДатаОтгрузки = Дата("00000000000000")) )
	КонецЕсли;
КонецФункции

Процедура ПересчетКолонок(ТекущаяСтрока)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПересчетКолонок", Истина);
	
	ТекущаяСтрока = ЭлементыФормы.СодержаниеЗаказа.ТекущаяСтрока;
	ТекущаяСтрока.Площадь = ТекущаяСтрока.Длина*ТекущаяСтрока.Ширина*ТекущаяСтрока.Количество;
	ОбщееКоличество = СодержаниеЗаказа.Итог("Количество");
	ОбщаяПлощадь = СодержаниеЗаказа.Итог("Площадь");
	
КонецПроцедуры

//пересчет площади для ТЧ СодержаниеМонтажа
Процедура ПересчетКолонокМонтажа(ТекущаяСтрока)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПересчетКолонокМонтажа", Истина);
	
	ТекущаяСтрока = ЭлементыФормы.СодержаниеМонтажа.ТекущаяСтрока;
	ТекущаяСтрока.Количество = ?(ТекущаяСтрока.Длина > 0, 1, 0);
	ТекущаяСтрока.Площадь = ТекущаяСтрока.Длина*ТекущаяСтрока.Ширина*ТекущаяСтрока.Количество;
	ОбщееКоличествоМонтажа = СодержаниеМонтажа.Итог("Количество");
	ОбщаяПлощадьМонтажа = СодержаниеМонтажа.Итог("Площадь");	
	ЮГ_ОбщееКоличествоАстралонов = СодержаниеМонтажа.Количество();
КонецПроцедуры

Процедура ОсновныеДействияФормыПечать(Кнопка)
	Если
		ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.Печать, "Тип") = Неопределено
	Тогда
		Сеансы       = ПолучитьСеансыИнформационнойБазы();
		НомерСеанса  = НомерСеансаИнформационнойБазы();
		ТекущийСеанс = Неопределено;
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				ТекущийСеанс = Сеанс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
		Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
		НовоеЗадание = ОтложенныеЗадания.Добавить();
		НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
		НовоеЗадание.ВыполнятьПосле 	= "";
		НовоеЗадание.ВыполнятьНаСервере = Ложь;
		НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
		НовоеЗадание.НомерСеанса		= Идентификатор;
		НовоеЗадание.Ключ               = "";
		НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.Печать;
		НовоеЗадание.СтрокаПараметров 	= "";
		Сообщить("Печать отложена до момента записи Заявки");
		
		//ДубликатНапечатал = ПараметрыСеанса.ТекущийПользователь;
		НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
		НовоеИзменениеРеквизита.Реквизит      = "ДубликатНапечатал";
		НовоеИзменениеРеквизита.НовоеЗначение = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КонтрагентПриИзменении", Истина);
	Если 
		ЗначениеЗаполнено(КонтрагентДоИзменения)
		И КонтрагентДоИзменения <> Контрагент
	Тогда
	    СвязанныеЗаявки = ПолучитьСвязанныеЗаявки();
		НовСтр = СвязанныеЗаявки.Добавить();
		НовСтр.Ссылка = Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.ЗаявкаПокупателя В(&ЗаявкаПокупателя)
		|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
		|	И РеализацияТоваровУслугТовары.Ссылка.Контрагент <> &Контрагент";
		
		Запрос.УстановитьПараметр("ЗаявкаПокупателя", СвязанныеЗаявки);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
	    ТаблицаПодчиненныхДокументов = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаПодчиненныхДокументов.Количество() > 0 Тогда
			Для Каждого Документ Из ТаблицаПодчиненныхДокументов Цикл
				Сообщить("В подчиненном документе " + Документ.Ссылка + " контрагент не соответствует выбранному.");
			КонецЦикла;
			Контрагент = КонтрагентДоИзменения;
			Сообщить("Изменение контрагента не возможно.");
			ОтложенныеЗаданияОтправитьПисьмоОбИзмененииКонтрагента();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если НЕ рфЮГ_РазрешитьРедактированиеТекущийСтатус Тогда
	    КонтрагентОчистка(Элемент, Ложь);
	КонецЕсли; 
    Если ЗначениеЗаполнено(Контрагент) И НЕ Контрагент.ПринадлежитЭлементу(Справочники.Контрагенты.НайтиПоКоду("000001056")) Тогда
		Предупреждение("Выбор контрагента некорректен! Данные изменения не будут сохранены! Контрагент должен быть в папке ""Действующие""!");
		ОтложенныеЗаданияОтправитьПисьмоОбИзмененииКонтрагента();
		Возврат;
	КонецЕсли;
	ЭлементыФормы.VIP_РАССТЕРЛ3.Заголовок = "";
    Если ЗначениеЗаполнено(Контрагент) Тогда
		КодКлиента = Лев(Контрагент.Наименование, 3);
		Если ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента) Тогда
			Если Контрагент.ОсновнойДоговорКонтрагента.Предоплата Тогда
				ЭлементыФормы.VIP_РАССТЕРЛ3.Заголовок = "Предоплата";
			КонецЕсли;
		КонецЕсли; 
	Иначе
		КодКлиента = "";
	КонецЕсли;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаПроверитьЗаказ.Доступность = ЮГ_ИспользуетсяЧекЛист();
	Если НЕ ЭтоНовый() И РедактрованиеЗаявкиСВыписаннымиДокументами() Тогда
		ОтложенныеЗаданияОтправитьПисьмоОбИзмененииКонтрагента();
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа" Тогда //Отдел обработки заказа
		Если НЕ Контрагент.Пустая() И НЕ Контрагент.ЮГ_НеПроставлятьВЗаявкеДоработкуПоУмолчанию Тогда
			//Если Доработка.Пустая() Тогда
				Доработка = Справочники.РепроВидыДоработок.БезДоработки;
			//КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;	
	Если НЕ Контрагент.Пустая() И Контрагент.ЮГ_ДисторсияИз1С Тогда
		ЭтотОбъект.ЮГ_ДисторсияИз1С = Истина;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КтоДляКого.Контрагент,
	|	КтоДляКого.Организация
	|ИЗ
	|	РегистрСведений.КтоДляКого КАК КтоДляКого";
	Результат = Запрос.Выполнить();
	ВДЗ = Результат.Выбрать();
	Пока ВДЗ.Следующий() Цикл
		Если
            ЗначениеЗаполнено(Контрагент)
            И
            (
                Контрагент.ПринадлежитЭлементу(ВДЗ.Контрагент)
                ИЛИ
                Контрагент = ВДЗ.Контрагент
            )
        Тогда
            Организация = ВДЗ.Организация;
            Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Контрагент.ОС_ПапкаКонтрагента) Тогда
		ЭтаФорма.ЭлементыФормы.ПутьКФайламКонтрагента.Значение = Контрагент.ОС_ПапкаКонтрагента;
	КонецЕсли;
    Если Контрагент.ДоступныеПроизводства.Количество() = 1 Тогда
		Об_Производство = Контрагент.ДоступныеПроизводства[0].Производство;
	Иначе
		Об_Производство = Справочники.Оборудование.ПустаяСсылка();
    КонецЕсли;
	ЭтотОбъект.ОС_Производство = Контрагент.ОС_Производство;
    ОбновитьДанныеИзПроцесса(1);
	Запрос = Новый Запрос;
	Запрос.Текст = 
    "ВЫБРАТЬ
    |	Контрагенты.ВремяОтгрузки
    |ИЗ
    |	Справочник.Контрагенты КАК Контрагенты
    |ГДЕ
    |	Контрагенты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	Если ВыборкаДетальныеЗаписи.ВремяОтгрузки <> '00010101' Тогда
		Время = ВыборкаДетальныеЗаписи.ВремяОтгрузки;
	КонецЕсли; 
	ПодставитьПараметрыООЗ();
    Если ЗначениеЗаполнено(Контрагент) Тогда
        Если
            ОС_ИспользоватьСепарации_РеквизитФормы <> Контрагент.НовыеСепарации
        Тогда
            ОС_ИспользоватьСепарации_РеквизитФормы = Контрагент.НовыеСепарации;
    	КонецЕсли;
        ЗапросНаАдресДоставки = Новый Запрос;
        ЗапросНаАдресДоставки.Текст =
        "ВЫБРАТЬ
        |	АдресаДоставки.АдресДоставки
        |ИЗ
        |	РегистрСведений.АдресаДоставки КАК АдресаДоставки
        |ГДЕ
        |	АдресаДоставки.Контрагент = &Контрагент";
        ЗапросНаАдресДоставки.УстановитьПараметр("Контрагент", Контрагент);
        РезультатАдресДоставки = ЗапросНаАдресДоставки.Выполнить().Выгрузить();
        Если РезультатАдресДоставки.Количество() = 1 Тогда
            АдресДоставки = РезультатАдресДоставки[0].АдресДоставки;
        КонецЕсли;
        КомментарийПоОтгрузке = Контрагент.КомментарийПоОтгрузке;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЭтотОбъект.Контрагент, "ПодрезатьПоКомпозиту,CaT_Поворот,Инверсия,Зеркальность," + 
		"CaT_Уголки,ТекстоваяИнформация,CaT_ПолеСверху,CaT_ПолеСлева,CaT_ПолеСправа,CaT_ПолеСнизу,CaT_Поля");
	ПереключитьНаСепарации();
	УстановитьИнформационныеЭлементыПоКонтрагенту();
	ОтложенныеЗаданияОтправитьПисьмоОбИзмененииКонтрагента();
КонецПроцедуры	

Процедура ОтложенныеЗаданияОтправитьПисьмоОбИзмененииКонтрагента()
	тмпТекст = "";
	Если 
		ЗначениеЗаполнено(КонтрагентДоИзменения)
		И КонтрагентДоИзменения <> Контрагент
	Тогда
		СвязанныеЗаявки = ПолучитьСвязанныеЗаявки();
		НовСтр = СвязанныеЗаявки.Добавить();
		НовСтр.Ссылка = Ссылка;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.ЗаявкаПокупателя В(&ЗаявкаПокупателя)
		|	И НЕ СчетНаОплатуПокупателюТовары.Ссылка.ПометкаУдаления
		|	И СчетНаОплатуПокупателюТовары.Ссылка.Контрагент <> &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АО_РасходМатериаловРасходМатериалов.Ссылка
		|ИЗ
		|	Документ.АО_РасходМатериалов.РасходМатериалов КАК АО_РасходМатериаловРасходМатериалов
		|ГДЕ
		|	АО_РасходМатериаловРасходМатериалов.ЗаявкаПокупателя В(&ЗаявкаПокупателя)
		|	И НЕ АО_РасходМатериаловРасходМатериалов.Ссылка.ПометкаУдаления
		|	И АО_РасходМатериаловРасходМатериалов.Ссылка.Контрагент <> &Контрагент";
		Запрос.УстановитьПараметр("ЗаявкаПокупателя", СвязанныеЗаявки);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ТаблицаПодчиненныхДокументов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаПодчиненныхДокументов.Количество() > 0 Тогда
			тмпТекст = "ВНИМАНИЕ! В заявке " + ЭтотОбъект + " был изменен контрагент с " + КонтрагентДоИзменения + "
			|на " + Контрагент + " пользователем " + ПараметрыСеанса.ТекущийПользователь + ".
			|Необходимо изменить контрагента в следующих документах:";
			Для Каждого Документ Из ТаблицаПодчиненныхДокументов Цикл
				тмпТекст = тмпТекст + "
				|" + Документ.Ссылка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ОтложенноеЗаданиеПисьмоОбИзмененииКонтрагента = ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоОбИзмененииКонтрагента, "Тип");
	Если         ЗначениеЗаполнено(тмпТекст) И    ОтложенноеЗаданиеПисьмоОбИзмененииКонтрагента = Неопределено Тогда
		//Создаем
		Сеансы       = ПолучитьСеансыИнформационнойБазы();
		НомерСеанса  = НомерСеансаИнформационнойБазы();
		ТекущийСеанс = Неопределено;
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				ТекущийСеанс = Сеанс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
		Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
		НовоеЗадание = ОтложенныеЗадания.Добавить();
		НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
		НовоеЗадание.ВыполнятьПосле 	= "";
		НовоеЗадание.ВыполнятьНаСервере = Истина;
		НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
		НовоеЗадание.НомерСеанса		= Идентификатор;
		НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
		НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоОбИзмененииКонтрагента;
		НовоеЗадание.СтрокаПараметров 	= тмпТекст;
		Сообщить("Письмо об изменении контрагента будет отправлено при закрытии документа");
	ИначеЕсли    ЗначениеЗаполнено(тмпТекст) И НЕ ОтложенноеЗаданиеПисьмоОбИзмененииКонтрагента = Неопределено Тогда
		//Меняем
		ОтложенноеЗаданиеПисьмоОбИзмененииКонтрагента.СтрокаПараметров = тмпТекст;
	ИначеЕсли НЕ ЗначениеЗаполнено(тмпТекст) И    ОтложенноеЗаданиеПисьмоОбИзмененииКонтрагента = Неопределено Тогда
		//Ничего не делаем
	Иначе   //НЕ ЗначениеЗаполнено(тмпТекст) И НЕ ОтложенноеЗаданиеПисьмоОбИзмененииКонтрагента = Неопределено
		//Удаляем
		ОтложенныеЗадания.Удалить(ОтложенноеЗаданиеПисьмоОбИзмененииКонтрагента);
		Сообщить("Отложенное задание по отправке письма об изменении контрагента отменено");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии() 
	ОтправитьПлощадьЗапечаткиРезультат = ПрочитатьВОтправитьПлощадьЗапечаткиРезультат();
	ИзмененНазвание                    = НазваниеЗаказа;
	ИзмененСпособоплаты                = СпособОплаты;
	КонтрагентОС_ПапкаКонтрагента      = Контрагент.ОС_ПапкаКонтрагента;
	
	Если НЕ ЭтоНовый() Тогда
		//Если ЗначениеЗаполнено(ОС_ДочернийЗаказ) Тогда
		//	УДАЛИТЬ_СтарыйДочернийЗаказ = ОС_ДочернийЗаказ;
		//	УстановитьДочернийЗаказ();
		//	Если УДАЛИТЬ_СтарыйДочернийЗаказ <> ОС_ДочернийЗаказ Тогда
		//		бб1с_Логирование.ЗаписатьВЛог(Строка(ЭтотОбъект), "1 Старый дочерний заказ: " + Строка(УДАЛИТЬ_СтарыйДочернийЗаказ) + " не равен новому: " + Строка(ОС_ДочернийЗаказ), Истина);
		//	КонецЕсли;
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НомерЗаказа) И ЗначениеЗаполнено(Ссылка) И ЗначениеЗаполнено(ПутьКФайлам) Тогда
			//бб1с_Логирование.ЗаписатьВЛог(Строка(ЭтотОбъект), "АО_ЗаявкаПокупателя.ФормаДокумента НомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка)", Истина); 
			НомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
		КонецЕсли;
	Иначе
		ОС_ПодготовкаАстралонаНаПлоттере = Истина;
		мУстановкаВ_НовомДокументеНастроекCaT_ПоУмолчанию();
		ЮГ_ВерсияРепро = 1;
	КонецЕсли;
	
	СтруктураРип = Новый Структура;
	СтруктураРип.Вставить("Действие", Перечисления.ОС_ДействияПользователя.НоваяРиповка);
	РазрешениеРиповки = РегистрыСведений.ОС_РазрешениеДействий.Получить(СтруктураРип);
	Если РазрешениеРиповки.Количество() = 0 Тогда
		тНоваяРиповка = Ложь;
	Иначе
		тНоваяРиповка = РазрешениеРиповки.Разрешить;
	КонецЕсли;	
	
	СтруктураРип.Вставить("Действие", Перечисления.ОС_ДействияПользователя.CaT_Linux);
	РазрешениеРиповки = РегистрыСведений.ОС_РазрешениеДействий.Получить(СтруктураРип);
	Если РазрешениеРиповки.Количество() = 0 Тогда
		тCaT_Linux = Ложь;
	Иначе
		тCaT_Linux = (РазрешениеРиповки.Разрешить И УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(ПараметрыСеанса.ТекущийПользователь, ПланыВидовХарактеристик.НастройкиПользователей.CaT_Linux));
	КонецЕсли;
	
	ПереключитьНаСепарации(); //УМ, при изменении Контрагента форму закрывать
	
	Если ТолькоТовары И ЭтоНовый() Тогда
		
		бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента ТолькоТовары", Истина);
		
		Дата            = ТекущаяДата();
		ОС_ТолькоТовары = Истина;
		ОС_Производство = Перечисления.ОС_Производство.Москва;
		Филиал          = Справочники.Филиалы.Москва;
		ЗаказПринял     = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	Если ОС_ТолькоТовары Тогда
		Для Каждого Страница ИЗ ЭлементыФормы.Общая.Страницы Цикл
			Страница.Видимость = Ложь;                          //УМ
		КонецЦикла;	
		ЭлементыФормы.Общая.Страницы.Товары.Видимость = Истина; //УМ
		ЭлементыФормы.VIP_РАССТЕРЛ3.Заголовок = "";
		Если
			ЗначениеЗаполнено(Контрагент)
			И
			ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента)
			И
			Контрагент.ОсновнойДоговорКонтрагента.Предоплата
		Тогда
			ЭлементыФормы.VIP_РАССТЕРЛ3.Заголовок = "Предоплата";
		КонецЕсли; 		
	Иначе
		ЭлементыФормы.Общая.Страницы.Товары.Видимость = Ложь;    //УМ
	
		//Проверим нет ли заявки в регистре к перезаписи комментариев
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОС_ЗаявкиКОбновлениюКомментариев.ОДП,
		|	ОС_ЗаявкиКОбновлениюКомментариев.Логистика,
		|	ОС_ЗаявкиКОбновлениюКомментариев.Производство,
		|	ОС_ЗаявкиКОбновлениюКомментариев.ПоОтгрузкеИзменен,
		|	ОС_ЗаявкиКОбновлениюКомментариев.ДляПриемкиИзменен
		|ИЗ
		|	РегистрСведений.ОС_ЗаявкиКОбновлениюКомментариев КАК ОС_ЗаявкиКОбновлениюКомментариев
		|ГДЕ
		|	ОС_ЗаявкиКОбновлениюКомментариев.Заявка = &Заявка";
		Запрос.УстановитьПараметр("Заявка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтруктураРесурсов = Новый Структура("ОДП,Логистика,Производство,ПоОтгрузкеИзменен,ДляПриемкиИзменен");
				ЗаполнитьЗначенияСвойств(СтруктураРесурсов, ВыборкаДетальныеЗаписи);
				ТекстРСвИзменения = "";
				Для каждого Элем Из СтруктураРесурсов Цикл
					Если Элем.Значение = Истина Тогда
						ТекстРСвИзменения = ТекстРСвИзменения + "
						| - " + Элем.Ключ;
					КонецЕсли; 
				КонецЦикла; 
				Если ТекстРСвИзменения <> "" Тогда
					Предупреждение("Изменены комментарии контрагента" + ТекстРСвИзменения + "
					|Для отображения комментария необходимо перепровести заявку.");
					Сообщить("В " + Ссылка + " изменены комментарии контрагента:" + ТекстРСвИзменения, СтатусСообщения.Важное);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;	
		
		//Печ = Истина;		//КГГ устанавливается и проверяется единожды
		
		Если ЭтоНовый()и не Копирование Тогда
			Организация = Справочники.Организации.НайтиПоКоду("000000002");
		КонецЕсли;
		
		Если ЭтоНовый() Тогда
			ТипУстановкиПараметров = Перечисления.РепроТипыУстановкиПараметров.Автоматически;
			ЗаказПринял = глЗначениеПеременной("глТекущийПользователь");
			
			ТекущийСтатусЗаявки = Неопределено;
			ВремяТекущийСтатусЗаявки = Дата("00010101");
		Иначе
			ТекущийСтатусЗаявки 	= АО_ОбщийМодуль.ПолучитьТекущийСтатусЗаявки(Ссылка, ТекущаяДата());
		КонецЕсли;
		Если Копирование Тогда	
			Организация = Справочники.Организации.НайтиПоКоду("000000002");//Коноровский А.В. 13.12.2016 17:44:10 +++
			НомерЗаказа = "";
			Дизайнер           = Справочники.Пользователи.ПустаяСсылка();
			Дизайнер_Проверка  = Справочники.Пользователи.ПустаяСсылка();
			КорректорФайла     = Справочники.Пользователи.ПустаяСсылка();
			КорректорФормы     = Справочники.Пользователи.ПустаяСсылка();
			Оператор           = Справочники.Пользователи.ПустаяСсылка();
			Упаковал           = Справочники.Пользователи.ПустаяСсылка();
			ДатаУпаковки	 = Дата("00000000000000");
			Упаковано = Ложь;
			
			ЗаказВыданКлиентуДата = Дата("00000000000000");
			Курьер = Справочники.Операторы.ПустаяСсылка();
			ЗаказВыданКлиенту = Ложь;
			
			ДатаПроверки = Дата("00000000000000");
			Проверил = Справочники.Операторы.ПустаяСсылка();
			Проверено = Ложь;
			
			ВремяОтгрузки = Дата("00000000000000");
			Время = Дата("00000000000000");
			
			ДатаВПроизводство	 = Дата("00000000000000");
			ПринялВПроизводство           = Справочники.Пользователи.ПустаяСсылка();
			ПринятоВПроизводство = Ложь;
			
			ДизайнерВывода     = Справочники.Пользователи.ПустаяСсылка();
			ОригиналМакетНаУтверждение = Ложь;
			ОригиналМакетУтвержден = Ложь;
			ОригиналМакетГотов = Ложь;
			ПечатныйФайлГотов = Ложь;
			НегативыГотовы = Ложь;
			НегативыНаФормномУчастке = Ложь;
			ФормыГотовы = Ложь;
			ЗаказВыданКлиенту = Ложь;
			СпособРасчетаЦены = Перечисления.РепроСпособРасчетаЦены.ПустаяСсылка();
			КомментарийДизайнера = "";
			РепроЛиниатура = 0;
			DCG_Новая = Справочники.DCG_Новая.ПустаяСсылка();
			ScreeningТипНовый = Справочники.ScreeningТип.ПустаяСсылка();
			ResolutionНовый = 0;
			Углы = Справочники.Углы.ПустаяСсылка();
			ТехПарСформировал = Справочники.Пользователи.ПустаяСсылка();
			ТехПарСформировалДата = Дата("00000000000000");
			ТехПараметрыСтрокаАвтомат = "";
			NexT = Ложь;
			PixelPlus = Ложь;
			ПарсЗаявки.Очистить();
			Закладки.Очистить();
			СводныйЗаказ.Очистить();
			СодержаниеЗаказа.Очистить();
			СодержаниеМонтажа.Очистить();
			ОбщаяПлощадь = 0;
			ОбщееКоличество = 0;
			ОбщаяПлощадьМонтажа = 0;
			ОбщееКоличествоМонтажа = 0;
			ЮГ_ОбщееКоличествоАстралонов = 0;
			Если Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("101 Флексо-сервис") ИЛИ Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("101 Флексо сервис Компани") Тогда
				ТипРастрирования = "";
				Линиатура = "";
				Доработка = Справочники.РепроВидыДоработок.ПустаяСсылка();
				Печать = Перечисления.АО_ВидыПечати.ПустаяСсылка();
				ЭтотОбъект.мПечатьПриИзменении();
				ПримечанияПоЗаказу = "";
			КонецЕсли;
			
			Если ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа" Тогда
				Если НЕ Контрагент.Пустая() И НЕ Контрагент.ЮГ_НеПроставлятьВЗаявкеДоработкуПоУмолчанию Тогда
					Доработка = Справочники.РепроВидыДоработок.БезДоработки;
				КонецЕсли; 
			КонецЕсли;	
			
			КрепежнаяПланка = Перечисления.КрепежныеПланки.ПустаяСсылка();
			ХвостовоеКрепление = Перечисления.ХвостовыеКрепления.ПустаяСсылка();
			РасположениеБазовогоКрепления = Перечисления.РасположенияБазовогоКрепления.ПустаяСсылка();
			Фацетирование = Ложь;
			ОбрезПод45 = Ложь;
			СрезатьКретыИМетки = Ложь;
			ЛинияЦентрInLine = Ложь;
			ЛинияЦентрRDC = Ложь;
			ЛинияЦентр0 = Ложь;
			ПриводнаяМетка = Ложь;
			ЗапайкаКромкиКлеем = Ложь;
			ХвостовоеКреплениеЛюверсы = Ложь;
			ХвостовоеКреплениеЛюверс8 = Ложь;
			УДАЛИТЬ_Люверс12 = Ложь;
			ТолщинаКлише = 0;
			Скотч = 0;
			РасстояниеМеждуОтверстиями = 0;
			ДиаметрОтверстия = 0;
			АстролонКоличествоЦветов= 0;
			ПутьКФайламЛен = "";
			Если ЭтотОбъект.ТипФотополимера.ПометкаУдаления Тогда
				ТипФотополимера = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			КомментарийКДоставке = "";
			Дисторция = "";
			
			//Выбор организациии в зависимости от группы котрагента 
			Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда 
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Контрагент", Контрагент);
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КтоДляКого.Контрагент,
				|	КтоДляКого.Организация
				|ИЗ
				|	РегистрСведений.КтоДляКого КАК КтоДляКого
				|ГДЕ
				|	КтоДляКого.Контрагент = &Контрагент";
				ВДЗ = Запрос.Выполнить().Выгрузить();
				Для Каждого Строка из ВДЗ Цикл
					Организация = Строка.Организация;
					Прервать;
				КонецЦикла;
				Если ВДЗ.Количество() = 0 Тогда
					Сообщить("Для контрагента " + Контрагент + " не заполнено соответствие организации в регистре сведений <Организации для контрагента>");
				ИначеЕсли ВДЗ.Количество() > 1 Тогда
					Сообщить("У контрагента " + Контрагент + " установлено больше одного соответствия организации в регистре сведений <Организации для контрагента>");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;   
		
		VIP_РАССТЕРЛ();
		
		ЭлементыФормы.КоманднаяПанель6.Кнопки.ПолучитьУглы.Доступность = тНоваяРиповка;        //УМ
		// Стало , херотень эту убрать при первой возможности, надол разобраться  со статусами.
		Если ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.МакетГотов 
			или  ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаВывод  
			или  ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВПроизводство 
			или  ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке 
			или  ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтгружен 
			или  ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ПринятоВПроизводство
			или  ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.Отгравировано 
			или  ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_МонтажНаАстралон 
		Тогда
			ТолькоПросмотр  = Истина;    ///Ganin { - Убрать коммент!!!
		КонецЕсли;
		
		Если ЗаявкаПоступилаНаВывод() Тогда
			ЭлементыФормы.ПанельСепарации.Доступность = Ложь;       //УМ
			ЭлементыФормы.Срочный.Доступность = Ложь;               //УМ
			ЭлементыФормы.ОС_Производство.Доступность = Ложь;       //УМ
		КонецЕсли; 
		
		Если
			РольДоступна("Бухгалтер")
			или
			РольДоступна("ПолныеПрава")
		Тогда
			ЭлементыФормы.Организация.ТолькоПросмотр = Ложь;         //УМ
			ЭлементыФормы.Организация.Доступность = Истина;          //УМ
		КонецЕсли;	
		
		Если РольДоступна("АО_УправлениеЗаявкамиАдмин") Тогда
			//ТолькоПросмотр = Истина;                                 //УМ
			ЮГ_ЭмуляцияТолькоПросмотр(Истина);
		КонецЕсли;
		
		//PlateСompens =  DCG_Новая.PlateСompens;
		
		ОбновитьХвостовоеКрепление();
		
		//Корректору можно показать кнопку вернуть заказ в корректуру 
		Если РольДоступна("АО_КорректорАдмин") И (АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.МакетГотов 
			ИЛИ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.СданаВАрхив) И НЕ Упаковано Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.ВернутьВКорректуру.Доступность = Истина;   //УМ
		КонецЕсли;	
		
		Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ОС_РазрешитьУстанавливатьСтатусСчетНаПредоплатуЗаявке")  Тогда
			ЭлементыФормы.Филиал.Доступность = Истина;                                    //УМ
		КонецЕсли;	
		
		ЭлементыФормы.КнДобавитьФайлы.ИзменяетДанные = Истина;
		
		Если
			ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа"
			ИЛИ
			РольДоступна("ПолныеПрава")
			ИЛИ
			РольДоступна("ОС_Приемка")
		Тогда
			ЭлементыФормы.ОС_НаРасчет.Доступность = Истина;                               //УМ
		Иначе
			ЭлементыФормы.ОС_НаРасчет.Доступность = Ложь;                                 //УМ
		КонецЕсли;
		
		//Заполним ДочернийЗаказ
		Если
			НЕ ЗначениеЗаполнено(ОС_ДочернийЗаказ)
		Тогда
			УДАЛИТЬ_СтарыйДочернийЗаказ = ОС_ДочернийЗаказ;
			ОС_ДочернийЗаказ = АО_ОбщийМодуль.ПолучитьДочернийЗаказ(Ссылка);
		КонецЕсли;
		
		//Блокируем данные при выставленном Счете на предоплату
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОС_ЗаявкиСПредварительнымСчетом.Заявка
		|ИЗ
		|	РегистрСведений.ОС_ЗаявкиСПредварительнымСчетом КАК ОС_ЗаявкиСПредварительнымСчетом
		|ГДЕ
		|	ОС_ЗаявкиСПредварительнымСчетом.Заявка = &Заявка";
		
		Запрос.УстановитьПараметр("Заявка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		тСчетНаПредоплату = НЕ РезультатЗапроса.Пустой();
		
		СвязьУстановлена = ЗаказРазбит();
		
		ЭлементыФормы.ОС_РазбитыйЗаказ.Значение = СвязьУстановлена;
		
		ЭлементыФормы.ОС_РазбитыйЗаказ.Доступность = РольДоступна("ОС_Бухгалтер") И СвязьУстановлена; //УМ
	    
	    ЮГ_УдалитьКонцевыеРазделителиПередатьЗаявку();
	    
		Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			Если Контрагент.НовыеСепарации = Истина Тогда
				Если ОС_ИспользоватьСепарации_РеквизитФормы <> Истина Тогда
					ОС_ИспользоватьСепарации_РеквизитФормы = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПереключитьНаСепарации();  //УМ
		
		УстановитьКартинкиБазовойПланкиИХвостовогоКрепления();
		ЮГ_НамоткаПриИзменении(Неопределено);
		
		ЮГ_РазрешитьДоступК_ДатаОтгрузки();
		
		УстановитьИнформационныеЭлементыПоКонтрагенту();
		
		//ОС_ПроизводствоПриИзменении(Неопределено, Ложь);
		ЭлементыФормы.ЮГ_ПроизводствоПрочее.Видимость = (ОС_Производство = Перечисления.ОС_Производство.Прочее);
		Если ЭтотОбъект.ЭтоНовый() Тогда
			ПроверитьПроизводство();
		КонецЕсли;
		
		ДоступностьВрем = СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Никитин Андрей" ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Наймилова Серафима";
		ЭлементыФормы.ЮГ_ДатаМонтажа.ТолькоПросмотр = НЕ ДоступностьВрем;          //УМ
		Если ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Приемка" Тогда
			ЭлементыФормы.ПанельКомментарии.ТекущаяСтраница = ЭлементыФормы.ПанельКомментарии.Страницы.Приемка;
		КонецЕсли; 
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаПроверитьЗаказ.Доступность = ЮГ_ИспользуетсяЧекЛист(); //УМ
		
		Если Не (РольДоступна("ПолныеПрава") или РольДоступна("АО_ДляДокументаоборота")) Тогда
			ЭлементыФормы.Общая.Страницы.Расчет.Видимость = Ложь;                  //УМ
		КонецЕсли; 
		
		Если Не (РольДоступна("ПолныеПрава") или РольДоступна("АО_ДляДокументаоборота") или РольДоступна("АО_УправлениеЗаявками"))  Тогда
			
			ЭлементыФормы.ОригиналМакетГотов.Доступность = Ложь;                   //УМ
			ЭлементыФормы.ОригиналМакетНаУтверждение.Доступность = Ложь;           //УМ
			ЭлементыФормы.ОригиналМакетУтвержден.Доступность = Ложь;               //УМ
			ЭлементыФормы.ПечатныйФайлГотов.Доступность = Ложь;	                   //УМ
			
		КонецЕсли; 
		
		Если Не (РольДоступна("ПолныеПрава") или РольДоступна("АО_ДляДокументаоборота") или РольДоступна("АО_ОбрабокаНегативов")) Тогда
			
			ЭлементыФормы.НегативыГотовы.Доступность = Ложь;                       //УМ
			ЭлементыФормы.НегативыНаФормномУчастке.Доступность  = Ложь;	           //УМ
			
		КонецЕсли; 
		
		Если Не (РольДоступна("ПолныеПрава") или РольДоступна("АО_ДляДокументаоборота") или РольДоступна("АО_ПолныеПраваБезПраваАдминистрирования") ИЛи РольДоступна("АО_УправлениеЗаявками")) Тогда
			ЭлементыФормы.ФормыГотовы.Доступность = Ложь;                          //УМ
			ЭлементыФормы.ЗаказВыданКлиенту.Доступность = Ложь;                    //УМ
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность = Ложь;//УМ
			Если Не (РольДоступна("АО_ТолькоПросмотр"))Тогда
				ЭлементыФормы.Дизайнер.Доступность = Истина;                       //УМ
				ЭлементыФормы.Дизайнер_Проверка.Доступность = Истина;              //УМ
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если РольДоступна("ОС_ДоступКОтладочнымФункциям") Тогда
		ЭлементыФормы.КнопкаСоздатьКаталоги.Доступность = Истина;                  //УМ
	КонецЕсли;	
	
	ОбновлениеОтображенияЭлементовФормы();
	
	//НаименованиеБазоваяНаименованиеХвостовая = ?(ЗначениеЗаполнено(БазоваяПланка), БазоваяПланка.Наименование, "") + ";" + ?(ЗначениеЗаполнено(ХвостоваяПланка), ХвостоваяПланка.Наименование, "");
	
	//Потом убрать!!!
	Отказ = Ложь;
	ЮГ_УправлениеРеквизитамиФормКлиент.ОбработатьУправлениеРеквизитамиФормОбычных(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ЮГ_ДобавитьГруппуВТаблГруппыСП(ТаблГруппыСП, СписокГруппСправочникаПользователи, КлючСтруктуры, НаименованиеГруппы)
	
	Перем ГруппаСП, СтрокаТаблГруппыСП;
	
	СтрокаТаблГруппыСП = ТаблГруппыСП.Найти(НаименованиеГруппы, "Наименование");
	ГруппаСП = Неопределено;
	Если СтрокаТаблГруппыСП <> Неопределено Тогда
		ГруппаСП = СтрокаТаблГруппыСП.Ссылка;
	КонецЕсли; 
	СписокГруппСправочникаПользователи.Вставить(КлючСтруктуры, ГруппаСП);
	
КонецПроцедуры

Процедура СодержаниеЗаказаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СодержаниеЗаказаПриНачалеРедактирования", Истина);
	
	ОбщееКоличество = СодержаниеЗаказа.Итог("Количество");
	ОбщаяПлощадь = СодержаниеЗаказа.Итог("Площадь");
	Сумма = ОбщаяПлощадь*Цена;
	Цена = ?(ОбщаяПлощадь = 0, 0, (Сумма + ПреПрессУслуги)/ОбщаяПлощадь);
	Сумма = Сумма + ПреПрессУслуги;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОС_ТолькоТовары Тогда
		Возврат;
	КонецЕсли;
	
	//Блок проверки корректности данных формы и его объекта "для всех" - начало
	ТекстСообщение = "";
	//Блок проверки только перед записью - начало
	Если Не РольДоступна("Суперудалятель") Тогда
		ТД = Новый ТекстовыйДокумент;
		Если ДатаОтгрузки < ДатаИзготовления Тогда
			Отказ = Истина;
			ТекстСообщение = ТекстСообщение + "
			|Дата отгрузки меньше даты изготовления";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаИзготовления) и ЭтоНовый() и ДатаИзготовления < НачалоДня(ТекущаяДата()) Тогда
			Отказ = Истина;
			ТекстСообщение = ТекстСообщение + "
			|Дата изготовления меньше текущей даты";
		КонецЕсли;	
		Если ЗначениеЗаполнено(ДатаОтгрузки)и ЭтоНовый() и ДатаОтгрузки < НачалоДня(ТекущаяДата()) Тогда
			Отказ = Истина;
			ТекстСообщение = ТекстСообщение + "
			|Дата отгрузки меньше текущей даты";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаОтгрузки)и не ЭтоНовый() и ДатаОтгрузки < НачалоДня(Дата) Тогда
			Отказ = Истина;
			ТекстСообщение = ТекстСообщение + "
			|Дата отгрузки меньше  даты документа";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаИзготовления) и не ЭтоНовый() и ДатаИзготовления < НачалоДня(Дата) Тогда
			Отказ = Истина;
			ТекстСообщение = ТекстСообщение + "
			|Дата изготовления меньше даты документа";
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПустыеСтрокиСодержаниеЗаказа = Ложь;
	Для каждого СтрокаТЧ Из ЭтотОбъект.СодержаниеЗаказа Цикл
		Если  НЕ ЗначениеЗаполнено(СтрокаТЧ.Длина) И НЕ ЗначениеЗаполнено(СтрокаТЧ.Ширина) Тогда	// И НЕ ЗначениеЗаполнено(СтрокаТЧ.НазваниеЗаказа) - при загрузке с FTP не заполняется
			ЕстьПустыеСтрокиСодержаниеЗаказа = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Если ЕстьПустыеСтрокиСодержаниеЗаказа Тогда
		Отказ = Истина;
		ТекстСообщение = ТекстСообщение + "
		| - Есть пустые строки в табличной части ""Содержание заказа""";
	КонецЕсли; 
	//Блок проверки только перед записью - конец
	
	Если ТекстСообщение <> "" Тогда
		ТекстСообщение = "Ошибки заполнения Заявки:" + ТекстСообщение;
		Сообщить(ТекстСообщение);
	КонецЕсли;
	Если Отказ Тогда
		Сообщить("Заявка не записана!");
		Возврат;
	КонецЕсли;
	//Блок проверки корректности данных формы и его объекта "для всех" - конец
		
	СтруктураВозврата = ПроверитьГабариты();
	Если СтруктураВозврата.ЕстьОборудование И НЕ СтруктураВозврата.ГабаритыНорм Тогда
		Предупреждение("Габаритные размеры астралонов не соответствуют ограничениям оборудования(печатной машины)
		|Необходимо привести габаритные размеры в соответствие ограничениям");
		Отказ = Истина;
		Возврат;
    КонецЕсли;
	Если СтруктураВозврата.ЕстьСодержаниеМонтажа И НЕ СтруктураВозврата.ЕстьОборудование Тогда
		ТекстСообщение = "Внимание! Содержание монтажа заполнено, но оборудование не выбрано. Нет возможности проверить соответствие габаритов ограничениям оборудования.";
		Сообщить(ТекстСообщение);
	КонецЕсли; 
	
    Если ПараметрыПроизводстваНеСоответствуютОграничениямКонтрагента() Тогда
        Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мЮГ_УстановитьЮГ_ДатаМонтажа(Ложь);
	
	ПлощадьАстролона = 0;
	Для Каждого Стрк Из СодержаниеМонтажа Цикл
		ПлощадьАстролона = ПлощадьАстролона + Стрк.Площадь;
	КонецЦикла;
	ЗапросИсключенный = Новый Запрос;
	ЗапросИсключенный.УстановитьПараметр("Объект", Контрагент);
	ЗапросИсключенный.Текст =
	"ВЫБРАТЬ
	|	КатегорииОбъектов.Объект,
	|	КатегорииОбъектов.Категория
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	|	КатегорииОбъектов.Объект = &Объект";
	РезультатЗапросИсключенный = ЗапросИсключенный.Выполнить().Выгрузить();
	Если
		ПлощадьАстролона > 0
		И
		Филиал.Код = "000000001" //Москва
		И
		ЗначениеЗаполнено(ЭтотОбъект.ЮГ_ДатаМонтажа)
		И
		РезультатЗапросИсключенный.Количество() = 0
	Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЮГ_ДатаМонтажа", ЭтотОбъект.ЮГ_ДатаМонтажа);
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		//Считаем площадь по всем Московским, не исключенным
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.Площадь) КАК Площадь,
		|	ВложенныйЗапрос.ПолеГруппировки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Ссылка КАК Ссылка,
		|		ВложенныйЗапрос.Площадь КАК Площадь,
		|		ВложенныйЗапрос1.Объект КАК Объект,
		|		""ПолеГруппировки"" КАК ПолеГруппировки
		|	ИЗ
		|		(ВЫБРАТЬ
		|			АО_ЗаявкаПокупателяСодержаниеМонтажа.Ссылка КАК Ссылка,
		|			АО_ЗаявкаПокупателяСодержаниеМонтажа.Площадь КАК Площадь
		|		ИЗ
		|			Документ.АО_ЗаявкаПокупателя.СодержаниеМонтажа КАК АО_ЗаявкаПокупателяСодержаниеМонтажа
		|		ГДЕ
		|			АО_ЗаявкаПокупателяСодержаниеМонтажа.Ссылка.ЮГ_ДатаМонтажа = &ЮГ_ДатаМонтажа
		|			И АО_ЗаявкаПокупателяСодержаниеМонтажа.Ссылка.Филиал.Код = ""000000001""
		|			И АО_ЗаявкаПокупателяСодержаниеМонтажа.Ссылка <> &Ссылка) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				КатегорииОбъектов.Объект КАК Объект
		|			ИЗ
		|				РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|			ГДЕ
		|				КатегорииОбъектов.Категория.Код = ""000000107"") КАК ВложенныйЗапрос1
		|			ПО ВложенныйЗапрос.Ссылка.Контрагент = ВложенныйЗапрос1.Объект
		|	ГДЕ
		|		ВложенныйЗапрос1.Объект ЕСТЬ NULL) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ПолеГруппировки";
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			ПлощадьАстролона = ПлощадьАстролона + Результат.Получить(0).Площадь;
		КонецЕсли;
		ЮГ_ПредельнаяПлощадьАстролона = Константы.ЮГ_ПредельнаяПлощадьАстролона.Получить();
		Если ЮГ_ПредельнаяПлощадьАстролона = 0 Тогда
			ЮГ_ПредельнаяПлощадьАстролона = 20;
		КонецЕсли; 
		Если ПлощадьАстролона > ЮГ_ПредельнаяПлощадьАстролона * 10000 Тогда
			Предупреждение("Общая площадь на указанную дату монтажа превышает " + ЮГ_ПредельнаяПлощадьАстролона + " кв.м - измените дату монтажа!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписейЗаявкиКПерезаписи = РегистрыСведений.ОС_ЗаявкиКОбновлениюКомментариев.СоздатьНаборЗаписей();
	НаборЗаписейЗаявкиКПерезаписи.Отбор.Заявка.Установить(Ссылка);
	НаборЗаписейЗаявкиКПерезаписи.Прочитать();
	Запись = Неопределено;
	Если НаборЗаписейЗаявкиКПерезаписи.Количество() = 1 Тогда
		Запись = НаборЗаписейЗаявкиКПерезаписи[0];
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда 
		Если  
			НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВПроизводство
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаВывод
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.Отгравировано
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтменен
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтгружен
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ПринятоВПроизводство
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.СтопОтгрузкаПДЗ
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ПустаяСсылка() 
			Или ЭтоНовый()
			Тогда
			ЭтотОбъект.КомментарийКонтрагентаОДП = Контрагент.КомментарийКонтрагентаОДП; 
			ЭтотОбъект.КомментарийКонтрагентаПроизводство = Контрагент.КомментарийКонтрагентаПроизводство;
			ЭтотОбъект.ОС_КомментарийКонтрагентаАстролон = Контрагент.ОС_КомментарийКонтрагентаАстролон;
			ЭтотОбъект.ЮГ_КомментарийДляПриемки = Контрагент.ЮГ_КомментарийДляПриемки;
			
			Если Запись <> Неопределено Тогда
				Запись.ОДП = Ложь;
				Запись.Производство = Ложь;
				Запись.ДляПриемкиИзменен = Ложь;
			КонецЕсли; 
		КонецЕсли; 
		//Логистика
		Если  
			НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтменен
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтгружен
			И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ПустаяСсылка() 
			Или ЭтоНовый()
			Тогда
			ЭтотОбъект.КомментарийКонтрагентЛогистика = Контрагент.КомментарийКонтрагентаЛогистика;
			ЭтотОбъект.КомментарийПоОтгрузке = Контрагент.КомментарийПоОтгрузке;
			
			Если Запись <> Неопределено Тогда
				Запись.Логистика = Ложь;
				Запись.ПоОтгрузкеИзменен = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	Если Запись <> Неопределено Тогда
		МетаРСв = НаборЗаписейЗаявкиКПерезаписи.Метаданные();
		ЕстьЗначащие = Ложь;
		Для каждого МетаРесурс Из МетаРСв.Ресурсы Цикл
			Если Запись[МетаРесурс.Имя] = Истина Тогда
				ЕстьЗначащие = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если НЕ ЕстьЗначащие Тогда
			НаборЗаписейЗаявкиКПерезаписи.Удалить(0);
		КонецЕсли; 
		Если НаборЗаписейЗаявкиКПерезаписи.Модифицированность() Тогда
			бб1с_Логирование.ЗаписатьВЛог("БылВызов", "Записать АО_ЗаявкаПокупателя.ФормаДокумента.ПередЗаписью", Истина);
			НаборЗаписейЗаявкиКПерезаписи.Записать();
		КонецЕсли; 
	КонецЕсли; 
	
	//Добавим "Обработал заказ" для Тулы для новой заявки.
	Если ЭтоНовый() Тогда //19.10--- И Филиал = Справочники.Филиалы.Тула
		Обработал_Заказ = ЗаказПринял;
	КонецЕсли;
	
	//Проверка на изменение Полимера
	Если ЗначениеЗаполнено(ПутьКФайламТиф) И НЕ ТипФотополимера = Ссылка.ТипФотополимера Тогда
		ИсхСтрока = ПутьКФайламТиф;
		Поз = Найти(ИсхСтрока, "\");
		ПозК = 0;
		Пока Поз <> 0 Цикл
			ПозК = ПозК + Поз;
			ИсхСтрока = Сред(ИсхСтрока, Поз+1);
			Поз = Найти(ИсхСтрока, "\");
		КонецЦикла;   
		ИмяПапки = Сред(ПутьКФайламТиф, ПозК + 1);
		НовоеИмяПапки = СтрЗаменить(ИмяПапки, АО_ПСМ.ПробелыНаТире(СокрЛП(Ссылка.ТипФотополимера.Наименование)), АО_ПСМ.ПробелыНаТире(СокрЛП(ТипФотополимера.Наименование)));
		КомандаСистемы("ren " + ПутьКФайламТиф + " " + НовоеИмяПапки);
		ПереименованнаяПапка = СтрЗаменить(ПутьКФайламТиф, ИмяПапки, НовоеИмяПапки);
		НовыйКаталог = Новый Файл(ПереименованнаяПапка);
		Если НовыйКаталог.Существует() Тогда 
			Сообщить("Папка :" + ПутьКФайламТиф);
			Сообщить("Переименована в папку :" + ПереименованнаяПапка);
			ПутьКФайламТиф = ПереименованнаяПапка;
		Иначе
			Предупреждение("Не удалось изменить наименование полимера в папке OUTPUT! Предупредите ПРОИЗВОДСТВО об изменении типа полимера в заказе!");
			Сообщить("Не удалось изменить наименование полимера в папке OUTPUT! Предупредите ПРОИЗВОДСТВО об изменении типа полимера в заказе!");
		КонецЕсли;	
	КонецЕсли;
	
	//Проверка на вывод форм превышающих параметры
	Если ЗначениеЗаполнено(ТипФотополимера) И ТипФотополимера.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000000100")) 
		Тогда
		ЕстьПревышениеТЗ = ЕстьПревышенияРазмераЦветопроб();
		Если ЕстьПревышениеТЗ Тогда 
			Сообщить("В табличной части есть размеры превышающие допустимые!");
			Предупреждение("Размер цветопробы превышает предельно допустимый. Измените размер");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	//Проверка заполнения Монтажной основы при заполненной таблице
	Если НЕ СодержаниеМонтажа.Количество() = 0 И НЕ ЗначениеЗаполнено(МонтажНаАстролон) Тогда
		Предупреждение("Заполните монтажную основу, либо удалите строки из содержания монтажа!");
		Отказ = Истина;
	КонецЕсли;
	
	Если ОС_Производство = Перечисления.ОС_Производство.Прочее
		И НЕ ОС_НеЗаполнятьКомментарийДляРП
		И ЗначениеЗаполнено(КомментарийКонтрагентаПроизводство) 
		И НЕ ЗначениеЗаполнено(ИнформацияДляПроизводства)
		Тогда
		Ответ = Вопрос("Заполнить комментарий для производство ""Прочее"" комментарием производства контрагента", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма = ПолучитьФорму("ОС_ФормаЗаполненияКомментарияРП");
			Форма.КомментарийКонтрагентаПроизводства = КомментарийКонтрагентаПроизводство;
			ЗаполненныйКомментарий = Форма.ОткрытьМодально();
			Если ЗаполненныйКомментарий = Неопределено Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			ИнформацияДляПроизводства = ЗаполненныйКомментарий;
			ОС_НеЗаполнятьКомментарийДляРП = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			ОС_НеЗаполнятьКомментарийДляРП = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементыФормы.Контрагент.Значение) И ЗначениеЗаполнено(ЭлементыФормы.НазваниеЗаказа.Значение) Тогда //Проверка на дубли по названию
		ДлительностьСуток = 24 * 60 * 60;
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(Дата) Тогда
			Запрос.УстановитьПараметр("Дата1",		Дата - 3 * ДлительностьСуток);
			Запрос.УстановитьПараметр("Дата2",		Дата + 3 * ДлительностьСуток);
		Иначе
			Запрос.УстановитьПараметр("Дата1",					  ТекущаяДата() - 3 * ДлительностьСуток);
			Запрос.УстановитьПараметр("Дата2",					  ТекущаяДата() + 3 * ДлительностьСуток);
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);
		Запрос.УстановитьПараметр("НазваниеЗаказа",	НазваниеЗаказа);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АО_ЗаявкаПокупателя.Ссылка
		|ИЗ
		|	Документ.АО_ЗаявкаПокупателя КАК АО_ЗаявкаПокупателя
		|ГДЕ
		|	АО_ЗаявкаПокупателя.Дата > &Дата1
		|	И АО_ЗаявкаПокупателя.Дата < &Дата2
		|	И АО_ЗаявкаПокупателя.Контрагент = &Контрагент
		|	И АО_ЗаявкаПокупателя.НазваниеЗаказа = &НазваниеЗаказа
		|	И НЕ АО_ЗаявкаПокупателя.АО_СтатусыЗаявки = ЗНАЧЕНИЕ(Перечисление.АО_СтатусыЗаявки.ОмОтменен)
		|	И НЕ АО_ЗаявкаПокупателя.ПометкаУдаления";
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(); //Получили Заявки без учета связей Основной/Подчиненный
		ЗапросРазбитые = Новый Запрос;
		ЗапросРазбитые.Текст =
		"ВЫБРАТЬ
		|	ОС_РазбитыеЗаказы.Основной,
		|	ОС_РазбитыеЗаказы.Подчиненный
		|ИЗ
		|	РегистрСведений.ОС_РазбитыеЗаказы КАК ОС_РазбитыеЗаказы
		|ГДЕ
		|	(ОС_РазбитыеЗаказы.Основной В (&ЗаявкиПокупателей)
		|			ИЛИ ОС_РазбитыеЗаказы.Подчиненный В (&ЗаявкиПокупателей))";
		ЗапросРазбитые.УстановитьПараметр("ЗаявкиПокупателей", РезультатЗапроса);
		РезультатЗапросРазбитые = ЗапросРазбитые.Выполнить().Выгрузить();
		КоличествоСвязей = 0;
		ВремяНачалаВыполнения = ТекущаяДата(); //Ограничим цикл 5 секундами
		Пока КоличествоСвязей < РезультатЗапросРазбитые.Количество() Цикл
			КоличествоСвязей = РезультатЗапросРазбитые.Количество();
			Для Каждого СтрокаРезультатЗапросРазбитые Из РезультатЗапросРазбитые Цикл //Расширяем область поиска
				Если РезультатЗапроса.Найти(СтрокаРезультатЗапросРазбитые.Основной) = Неопределено Тогда
					СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
					СтрокаРезультатЗапроса.Ссылка = СтрокаРезультатЗапросРазбитые.Основной;
				КонецЕсли;
				Если РезультатЗапроса.Найти(СтрокаРезультатЗапросРазбитые.Подчиненный) = Неопределено Тогда
					СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
					СтрокаРезультатЗапроса.Ссылка = СтрокаРезультатЗапросРазбитые.Подчиненный;
				КонецЕсли;
			КонецЦикла;
			ЗапросРазбитые.УстановитьПараметр("ЗаявкиПокупателей", РезультатЗапроса); //Ищем связи из расширенной области
			РезультатЗапросРазбитые = ЗапросРазбитые.Выполнить().Выгрузить();
			Если ВремяНачалаВыполнения + 5 < ТекущаяДата() Тогда //Ограничим цикл 5 секундами
				Сообщить("Поиск Заявок с парным наименованием не произведен до конца, слишком много связей Основной/Подчиненный. Использован упрощенный алгоритм!");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ГруппыРазбитых = Новый ТаблицаЗначений;
		ГруппыРазбитых.Колонки.Добавить("Группа");
		ГруппыРазбитых.Колонки.Добавить("Заявка");
		НомерГруппы = 0;
		Для Каждого СтрокаРезультатЗапросРазбитые Из РезультатЗапросРазбитые Цикл //Добавляем пары из регистра
			СтрОсновной		= ГруппыРазбитых.Найти(СтрокаРезультатЗапросРазбитые.Основной);
			СтрПодчиненный	= ГруппыРазбитых.Найти(СтрокаРезультатЗапросРазбитые.Подчиненный);
			Если СтрОсновной = Неопределено И СтрПодчиненный = Неопределено Тогда //Создаем новую группу и добавляем обе заявки
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= НомерГруппы;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Основной;
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= НомерГруппы;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Подчиненный;
				НомерГруппы = НомерГруппы + 1;
			ИначеЕсли СтрОсновной = Неопределено И СтрПодчиненный <> Неопределено Тогда //Добавляем в существующую группу
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= СтрПодчиненный.Группа;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Основной;
			ИначеЕсли СтрОсновной <> Неопределено И СтрПодчиненный = Неопределено Тогда //Аналогично
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= СтрОсновной.Группа;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Подчиненный;
			КонецЕсли;
		КонецЦикла;
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(); //Снова получаем сокращенную таблицу, в основном, чтобы правильно сформировать сообщение
		Заказытемп = "Имеются заявки с таким же названием у данного контрагента, вы уверены что хотите записать документ?: " + Символы.ПС;
		Для Каждого СтрокаРезультатЗапроса Из РезультатЗапроса Цикл //Добавляем в ГруппыРазбитых и Заказы
			Заказытемп		= Заказытемп + СтрокаРезультатЗапроса.Ссылка + Символы.ПС;
			СтрОсновной		= ГруппыРазбитых.Найти(СтрокаРезультатЗапроса.Ссылка);
			Если СтрОсновной = Неопределено Тогда
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= НомерГруппы;
				Стр.Заявка	= СтрокаРезультатЗапроса.Ссылка;
				НомерГруппы = НомерГруппы + 1;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда //Если документ еще ни разу не записывался, он точно в отдельной группе
			НомерГруппы = НомерГруппы + 1;
		КонецЕсли;
		Если НомерГруппы > 1 Тогда
			Ответ = Вопрос(Заказытемп, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				Возврат;
			Иначе
                ТекстКом = "Записана заявка - дубль с названием: " + ЭлементыФормы.НазваниеЗаказа.Значение;
                бб1с_Логирование.ЗаписатьВЛог(Строка(ЭтотОбъект), ТекстКом);
            КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры //ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

Функция ЕстьПревышенияРазмераЦветопроб()

	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЕстьПревышенияРазмераЦветопроб", Истина);
	
	Для каждого Стр ИЗ СодержаниеЗаказа Цикл
		Если Стр.Длина > 61
			И Стр.Ширина > 61 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	Возврат Ложь;
КонецФункции // ЕстьПревышенияРазмераЦветопроб()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыСтруктураПодчиненностиДокумента", Истина);
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ПослеЗаписи()
	
	//Если ОС_ТолькоТовары Тогда
	//	Возврат;
	//КонецЕсли;
	Если НЕ ОС_ТолькоТовары Тогда
	// Условие поменять !!  
	Если ЭтоНовый() ИЛИ ПустаяСтрока(НомерЗаказа) Тогда
		Если ЭтоНовый() Тогда
			бб1с_Логирование.ЗаписатьВЛог("БылВызов", "Записать АО_ЗаявкаПокупателя.ФормаДокумента.ПослеЗаписи_ЭтоНовый", Истина);
		КонецЕсли;
		Если ПустаяСтрока(НомерЗаказа) Тогда
			бб1с_Логирование.ЗаписатьВЛог("БылВызов", "Записать АО_ЗаявкаПокупателя.ФормаДокумента.ПослеЗаписи_ПустаяСтрока", Истина);
		КонецЕсли;
		тмпДатаСтатуса = ?(ЗначениеЗаполнено(ПоследняяДатаОбработкиОДП), ПоследняяДатаОбработкиОДП, ТекущаяДата()); 
		ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь"), тмпДатаСтатуса, Ссылка, Перечисления.АО_СтатусыЗаявки.ОмВРаботе, "Создание заявки");
		НомерЗаказа = СтрЗаменить(строка(Число(Номер)),Символы.НПП,""); 
		СоздатьКаталоги();
		ЭтотОбъект.АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВРаботе; 
		ЭтотОбъект.Записать(); 
	КонецЕсли;
	КонецЕсли;
	
	УправлениеВидимостью();
	ОбновлениеОтображенияЭлементовФормы();
	
	Если ОС_ТолькоТовары Тогда
		Возврат;
	КонецЕсли;
	
	Изменения = "";
	Если ИзмененНазвание <> ЭлементыФормы.НазваниеЗаказа.Значение Тогда
		ИзмененНазван = Истина;
		Изменения = Изменения + " Название заказа ";
	Иначе
		ИзмененНазван = Ложь;
	КонецЕсли;
	Если ИзмененСпособоплаты <> ЭлементыФормы.СпособОплаты.Значение Тогда
		ИзмененСпособоплат = Истина;
		Изменения = Изменения + " Способ оплаты ";
	Иначе
		ИзмененСпособоплат = Ложь;
	КонецЕсли;
	//Если ИзмененСодержаниеЗаказа Тогда
	//	Изменения = Изменения + " Содержание заказа ";
	//КонецЕсли;
	Если
		ИзмененНазван
		ИЛИ
		ИзмененСпособоплат
		//ИЛИ
		//ИзмененСодержаниеЗаказа
	Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаякиДокументыКонтрагентов.Счет,
		|	ЗаякиДокументыКонтрагентов.СчетФактуры
		|ИЗ
		|	РегистрСведений.ЗаякиДокументыКонтрагентов КАК ЗаякиДокументыКонтрагентов
		|ГДЕ
		|	ЗаякиДокументыКонтрагентов.Заявка = &Заявка";
		Запрос.УстановитьПараметр("Заявка", ЭтотОбъект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ИсходящееПисьмо = Новый ИнтернетПочтовоеСообщение;
			ИсходящееПисьмо.Отправитель = "auto@optimasmart.ru";
			ИсходящееПисьмо.Тема = Строка(ЭтотОбъект.Контрагент) + " Изменение заявки " + Строка(ЭтотОбъект.Ссылка);
			тмпТекст = Строка(ЭтотОбъект.Контрагент) + " Внимание заявка " + Строка(ЭтотОбъект.Ссылка) + " была изменена:" + Изменения;
			ИсходящееПисьмо.Тексты.Добавить(тмпТекст);
			ИсходящееПисьмо.Получатели.Добавить("finance@optimasmart.ru");
			ОС_ОтправкаПочты.ОтправитьПисьмо(ИсходящееПисьмо);
		КонецЕсли;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ПутьКФайламТиф) Тогда
	//	ФайлИнфо = Новый Файл(ПутьКФайламТиф + "\info.txt");
	//	Если ФайлИнфо.Существует() Тогда
	//		АО_ПСМ.СоздатьЛогФайлТехИНФО(ПутьКФайламТиф, Ссылка);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(Путь, ТекстФайла)
	ТекущийНомерЗадания = ОтложенныеЗаданияСоздатьКаталог(Путь);
	
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле 	= ТекущийНомерЗадания;
	НовоеЗадание.ВыполнятьНаСервере = Истина;
	НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
	НовоеЗадание.НомерСеанса		= Идентификатор;
	НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
	НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.СоздатьЛогФайлТехИнфо;
	НовоеЗадание.СтрокаПараметров 	= Путь + "|" + ТекстФайла;
	Сообщить("Создание файла технического лога отложено до момента записи заявки");
КонецПроцедуры

Процедура ОтложенныеЗаданияСообщениеОСозданииФайлаПланки()
	НовоеЗначениеНаименованиеБазоваяНаименованиеХвостовая = ?(ЗначениеЗаполнено(БазоваяПланка), БазоваяПланка.Наименование, "") + ";" + ?(ЗначениеЗаполнено(ХвостоваяПланка), ХвостоваяПланка.Наименование, "");
	ОтложенноеЗаданиеСоздатьФайлПланки = ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.СоздатьФайлПланки, "Тип");
	Если
		ОтложенноеЗаданиеСоздатьФайлПланки = Неопределено
		И
		НЕ НовоеЗначениеНаименованиеБазоваяНаименованиеХвостовая = НаименованиеБазоваяНаименованиеХвостовая
		И
		НЕ ОС_ТолькоТовары
	Тогда //Добавляем отложенное задание
		Сеансы       = ПолучитьСеансыИнформационнойБазы();
		НомерСеанса  = НомерСеансаИнформационнойБазы();
		ТекущийСеанс = Неопределено;
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				ТекущийСеанс = Сеанс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
		Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
		ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталог(ПутьКФайлам + "\tmp");
		НовоеЗадание = ОтложенныеЗадания.Добавить();
		НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
		НовоеЗадание.ВыполнятьПосле 	= ТекущееЗадание;
		НовоеЗадание.ВыполнятьНаСервере = Истина;
		НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
		НовоеЗадание.НомерСеанса		= Идентификатор;
		НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
		НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.СоздатьФайлПланки;
		НовоеЗадание.СтрокаПараметров 	= "";
		Сообщить("Файл Planki.txt будет создан/обновлен при закрытии документа");
	ИначеЕсли
		НЕ ОтложенноеЗаданиеСоздатьФайлПланки = Неопределено
		И
		(
			НовоеЗначениеНаименованиеБазоваяНаименованиеХвостовая = НаименованиеБазоваяНаименованиеХвостовая
			ИЛИ
			ОС_ТолькоТовары
		)
	Тогда //Удаляем отложенное задание
		ОтложенныеЗадания.Удалить(ОтложенноеЗаданиеСоздатьФайлПланки);
		Сообщить("Отложенное задание по созданию/обновлению файла Planki.txt отменено");
	КонецЕсли;
КонецПроцедуры

Процедура ОтложенныеЗаданияСкопироватьJPEG()	
	Если ПутьКФайлам = "" Тогда
		Сообщить("У заявки " + Ссылка + " не заполнен путь к файлам");
	Иначе
		ПутьJPEG = ПутьКФайлам + "\Jpeg";
		МасФайлов = НайтиФайлы(ПутьJPEG, "*.*");
		МасУдалить = Новый Массив;
		Для Каждого Файл Из МасФайлов Цикл
			Если Файл.ЭтоКаталог() Тогда
				МасУдалить.Добавить(Файл);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Файл Из МасУдалить Цикл
			МасФайлов.Удалить(МасФайлов.Найти(Файл));
		КонецЦикла;
		Если ЗначениеЗаполнено(Контрагент.ОС_ПапкаКонтрагента) И МасФайлов.Количество() > 0 Тогда
			//Проверить наличие и если нет создать каталог
			ВыполнятьПосле = "";
			КаталогКуда = Новый Файл(Контрагент.ОС_ПапкаКонтрагента + "\Arhive\" + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
			Если НЕ КаталогКуда.Существует() Тогда
				ВыполнятьПосле = ОтложенныеЗаданияСоздатьКаталог(Контрагент.ОС_ПапкаКонтрагента + "\Arhive\" + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка));
			КонецЕсли;
			Сеансы       = ПолучитьСеансыИнформационнойБазы();
			НомерСеанса  = НомерСеансаИнформационнойБазы();
			ТекущийСеанс = Неопределено;
			Для Каждого Сеанс Из Сеансы Цикл
				Если Сеанс.НомерСеанса = НомерСеанса Тогда
					ТекущийСеанс = Сеанс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
			Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
			Для Каждого Файл Из МасФайлов Цикл
				НовоеЗадание = ОтложенныеЗадания.Добавить();
				НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
				НовоеЗадание.ВыполнятьПосле 	= ВыполнятьПосле;
				НовоеЗадание.ВыполнятьНаСервере = Истина;
				НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
				НовоеЗадание.НомерСеанса		= Идентификатор;
				НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
				НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.СкопироватьФайлы;
				НовоеЗадание.СтрокаПараметров 	= Файл.ПолноеИмя + "|" + Контрагент.ОС_ПапкаКонтрагента + "\Arhive\" + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + "\" + Файл.Имя;
			КонецЦикла;
		Иначе
			Сообщить("Нет файлов JPEG для копирования Контрагенту " + Контрагент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеВидимостью()
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.УправлениеВидимостью", Истина);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура СодержаниеМонтажаПослеУдаления(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СодержаниеМонтажаПослеУдаления", Истина);
	
	ОбщееКоличествоМонтажа = СодержаниеМонтажа.Итог("Количество");
	ОбщаяПлощадьМонтажа = СодержаниеМонтажа.Итог("Площадь");
	ЮГ_ОбщееКоличествоАстралонов = СодержаниеМонтажа.Количество();
	СуммаМонтажа = ОбщаяПлощадьМонтажа*ЦенаМонтажа;
	ЦенаМонтажа = ?(ОбщаяПлощадьМонтажа = 0, 0, (СуммаМонтажа)/ОбщаяПлощадьМонтажа);
	
	Стр = СводныйЗаказ.Найти(Справочники.ВидыПродукции.Астролон,"ВидПродукта");
	Пока не Стр = Неопределено Цикл
		СводныйЗаказ.Удалить(Стр);
		Стр = СводныйЗаказ.Найти(Справочники.ВидыПродукции.Астролон,"ВидПродукта");
	КонецЦикла;	
	ЗаполнитьПоАстролон();
	
КонецПроцедуры

Процедура СодержаниеМонтажаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СодержаниеМонтажаПриНачалеРедактирования", Истина);
	
	ОбщееКоличествоМонтажа = СодержаниеМонтажа.Итог("Количество");
	ОбщаяПлощадьМонтажа = СодержаниеМонтажа.Итог("Площадь");
	ЮГ_ОбщееКоличествоАстралонов = СодержаниеМонтажа.Количество();
	СуммаМонтажа = ОбщаяПлощадьМонтажа*ЦенаМонтажа;
	ЦенаМонтажа = ?(ОбщаяПлощадьМонтажа = 0, 0, (СуммаМонтажа)/ОбщаяПлощадьМонтажа);
	
	Если НоваяСтрока и МонтажНаАстролон.Пустая() Тогда
		МонтажНаАстролон = Справочники.Номенклатура.НайтиПоКоду("00000000093");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьЗаказ(ЗаказСсылка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтменитьЗаказ", Истина);
	
	Если НЕ ЗаказСсылка.Проведен Тогда
		Возврат;
	КонецЕсли;	
	тмпНомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(ЗаказСсылка);
	тмпНомерЗаявки = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект.Ссылка);
	Попытка
		ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
		ЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщить("В связи с отменой Заявки, для снятия резерва отменено проведение документа: " + ЗаказСсылка);
	Исключение
		бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтменитьЗаказ 2", Истина);
		Сообщить("Отменить Заказ покупателя не удалось по причине: " + ОписаниеОшибки());
		ИсходящееПисьмо = Новый ИнтернетПочтовоеСообщение;
		тмпТекушийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		ИсходящееПисьмо.Отправитель = "finance@optimasmart.ru";
		ИсходящееПисьмо.Тема = "От " + тмпТекушийПользователь.Имя + ". Снять резерв по отмененной Заявке №" + тмпНомерЗаявки + " от " + Формат(ДокументОбъект.Дата, "ДФ=""дд.ММ.гггг""");
		ИсходящееПисьмо.Получатели.Добавить("finance@optimasmart.ru");
		//ИсходящееПисьмо.Получатели.Добавить("ra72soft@mail.ru"); ДЛЯ ОТЛАДКИ !!!
		тмпТекст = "В связи с отменой заявки №" + тмпНомерЗаявки + " от " + Формат(ДокументОбъект.Дата, "ДФ=""дд.ММ.гггг""") + Символы.ПС
			+ "необходимо отменить проведение Заказа покупателя №" + тмпНомерЗаказа + " от " + Формат(ЗаказСсылка.Дата,"ДФ=""дд.ММ.гггг""") + Символы.ПС
			+ "автоматическая отмена проведения не удалась по причине:" + Символы.ПС
			+ ОписаниеОшибки();
		ИсходящееПисьмо.Тексты.Добавить(тмпТекст);
		РА_ОбщийМодуль.ОтправитьПисьмо(ИсходящееПисьмо);
	КонецПопытки;
КонецПроцедуры	

Процедура СнятьРезервТовара();
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СнятьРезервТовара", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	з.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ЗаказыЗаявок1
	|ИЗ
	|	Документ.ЗаказПокупателя КАК з
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК рт
	|		ПО з.Ссылка = рт.Ссылка.Сделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК ст
	|		ПО (рт.РасходМатериалов = ст.РасходМатериалов)
	|ГДЕ
	|	рт.РасходМатериалов.ДокументОснование = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	з.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ЗаказыЗаявок2
	|ИЗ
	|	Документ.ЗаказПокупателя КАК з
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК ст
	|		ПО з.ДокументОснование = ст.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК рт
	|		ПО з.Ссылка = рт.Ссылка.Сделка
	|ГДЕ
	|	ст.РасходМатериалов.ДокументОснование = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Заказ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыЗаявок1.Заказ КАК Заказ
	|	ИЗ
	|		ЗаказыЗаявок1 КАК ЗаказыЗаявок1
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыЗаявок2.Заказ
	|	ИЗ
	|		ЗаказыЗаявок2 КАК ЗаказыЗаявок2) КАК т";
	
	Запрос.УстановитьПараметр("Заявка", ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтменитьЗаказ(Выборка.Заказ);
	КонецЦикла;	
	
КонецПроцедуры	

//////////////////////////////////////////////////////
// ГРУППА ПЕРЕВОДА СТАТУСА                          //
//////////////////////////////////////////////////////

Процедура ОтправитьНаОмВРаботе(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВРаботе;
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры	

Процедура ОтправитьНаОмНаДп(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭтотОбъект.мЮГ_ПроверитьЦеныНоменклатуры() Тогда
		//Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
		//Возврат;
	КонецЕсли;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаДп;	
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаЮГ_ВозвратНаДоработку(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭтотОбъект.мЮГ_ПроверитьЦеныНоменклатуры() Тогда
		//Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
		//Возврат;
	КонецЕсли;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ЮГ_ВозвратНаДоработку;
	//киг
	тмпКомментарий = "";
	тмпФорма = ЭтотОбъект.ПолучитьФорму("ФормаВводаКомментария2");
	тмпФорма.ТекстПредупреждения = "Не указан комментарий для перевода в статус: " + НовыйСтатусЗаявки;
	тмпКомментарий = тмпФорма.ОткрытьМодально();
	Если ПустаяСтрока(тмпКомментарий) Тогда
		Возврат;
	КонецЕсли;

	//киг
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки, тмпКомментарий) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_Возврат(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	тмпОтвет = ВвестиКомментарий(Истина);
	тмпКомментарий = тмпОтвет.Комментарий;
	тмпКомментарий = ?(тмпКомментарий = Неопределено, "", тмпКомментарий);
	тмпПричинаВозврата = тмпОтвет.ПричинаВозврата;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_Возврат;	
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки, тмпКомментарий, тмпПричинаВозврата) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_НаОтрисовке(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли;
	
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_НаОтрисовке;	
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОмНаПроверке(Тест = Ложь)

	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 

	Если НЕ ЭтотОбъект.мЮГ_ПроверитьЦеныНоменклатуры() Тогда
		//Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
		//Возврат;
	КонецЕсли;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаПроверке;	
	ЭтотОбъект.Обработал_Заказ= ПараметрыСеанса.ТекущийПользователь;
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОмНаПроверкеДП(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Вы заполнили норматив?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаПроверкеДП;	
	ЭтотОбъект.Обработал_Заказ= ПараметрыСеанса.ТекущийПользователь;
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
			Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	ИначеЕсли ЗначениеЗаполнено(МонтажНаАстролон) ТОгда
		СохранитьАстролон();
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОмЖдемИнфоОтКлиента(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмЖдемИнфоОтКлиента;	
	//Если НЕ Филиал = Справочники.Филиалы.Тула Тогда
		КомментарийС = ВвестиКомментарий();
	//КонецЕсли;
	КомментарийС = ?(КомментарийС = Неопределено, "", КомментарийС);
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки, КомментарийС) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
	КонецЕсли;

	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОмОтменен(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Обработал_Заказ) Тогда
		Обработал_Заказ = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтменен;	
	Срочный = Ложь;
	АО_ОбщийМодуль.СтеретьДанныеПоЗаявкеВИсторииСрочнойЗаявки(Ссылка);
	КомментарийС = ВвестиКомментарий();
	КомментарийС = ?(КомментарийС = Неопределено, "", КомментарийС);
	Если СтатусПереведен(НовыйСтатусЗаявки, КомментарийС) Тогда
		СнятьРезервТовара();
	Иначе	
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	Если ВыписаныДокументы = Истина Тогда
		Если ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоОтменаЗаказа, "Тип") = Неопределено Тогда
			Сеансы       = ПолучитьСеансыИнформационнойБазы();
			НомерСеанса  = НомерСеансаИнформационнойБазы();
			ТекущийСеанс = Неопределено;
			Для Каждого Сеанс Из Сеансы Цикл
				Если Сеанс.НомерСеанса = НомерСеанса Тогда
					ТекущийСеанс = Сеанс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
			Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
			НовоеЗадание = ОтложенныеЗадания.Добавить();
			НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
			НовоеЗадание.ВыполнятьПосле 	= "";
			НовоеЗадание.ВыполнятьНаСервере = Истина;
			НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
			НовоеЗадание.НомерСеанса		= Идентификатор;
			НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
			НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоОтменаЗаказа;
			НовоеЗадание.СтрокаПараметров 	= "";
			Сообщить("Отправка письма по отмене заказа отложена до момента записи Заявки");
		КонецЕсли;
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры	

Процедура ОтправитьНаЮГ_ВозвратНаВыяснение(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Обработал_Заказ) Тогда
		Обработал_Заказ = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ЮГ_ВозвратНаВыяснение;
	тмпКомментарий = "";
	тмпФорма = ЭтотОбъект.ПолучитьФорму("ФормаВводаКомментария2");
	тмпФорма.ТекстПредупреждения = "Не указан комментарий для перевода в статус: " + НовыйСтатусЗаявки;
	тмпКомментарий = тмпФорма.ОткрытьМодально();
	Если ПустаяСтрока(тмпКомментарий) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки, тмпКомментарий) Тогда
		Сообщить("Статус заявки не может быть изменен на """ + НовыйСтатусЗаявки + """!",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры	

Процедура ОтправитьНаОС_СчетНаПредоплату(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	//Добавим заявки на товары
	Если НЕ ОС_ТолькоТовары И НЕ ОС_Услуги Тогда
		ТаблицаЕстьНезаполненные = АО_ОбщийМодуль.ЕстьНеЗаполненыеЯчейкиТабличныхЧастей(Ссылка, ОС_Астролон);
		Если ТипЗнч(ТаблицаЕстьНезаполненные) = Тип("Булево") И ТаблицаЕстьНезаполненные Тогда
			Сообщить("Заполните табличную часть ""Параметры печати""!");
			Возврат;
		КонецЕсли;		
		Если НЕ ТабличныеЧастиЗаполнены(ТаблицаЕстьНезаполненные) Тогда
			Возврат;
		КонецЕсли;	
		ОС_НаРасчет = Ложь;
	КонецЕсли;
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_СчетНаПредоплату;
	Если НЕ СтатусПереведен(НовыйСатус) Тогда	//, КомментарийРаспечаток
		Сообщить("Статус заявки не может быть изменен ОправитьНаСчетНаПредоплату!",СтатусСообщения.Важное);
	Иначе
		Если Филиал = Справочники.Филиалы.Москва Тогда
			//Письмо бухам
			ОтправитьПисьмоОПредварительномСчетеБух();
		КонецЕсли;
		Если НЕ СкопированыФайлы(Ложь, Ложь, Истина) Тогда
			Сообщить("Не удалось скопировать файлы.");
		Иначе
			ПутьКФайламАрхива = "";
			Записать();
		КонецЕсли;	
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_Изменение(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_Изменение;
	Если НЕ СтатусПереведен(НовыйСатус) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаИзменение!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_Утвержден(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_Утвержден;
	Если НЕ СтатусПереведен(НовыйСатус) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаУтвержден!",СтатусСообщения.Важное);
	Иначе
		МенеджерЗаписи = РегистрыСведений.ОповещениеДизайнеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заявка = ЭтотОбъект.Ссылка;
		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.Дизайнер = Обработал_Заказ;
		МенеджерЗаписи.Записать();	
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_Проверен(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_Проверен;
	Если НЕ СтатусПереведен(НовыйСатус) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаПроверен!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_ПроверкаКорректора(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_ПроверкаКорректора;
	Если НЕ СтатусПереведен(НовыйСатус) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаПромежуточнаяПроверка!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_НаУтверждении(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	Ответ = Вопрос("Вы заполнили норматив?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
    	Возврат;
	КонецЕсли;
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_НаУтверждении;
	Если НЕ СтатусПереведен(НовыйСатус) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаУтверждении!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

//Переход для признака "Услуги"
Процедура ОтправитьНаОмОтгружен(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	//Подставим основной договор
	Если НЕ Организация = Контрагент.ОсновнойДоговорКонтрагента.Организация Тогда
		Организация = Контрагент.ОсновнойДоговорКонтрагента.Организация;
	КонецЕсли;
	
	Если ЕстьПДЗ() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОмОтгружен;
	Если ОС_Услуги Тогда
		КомментарийСтатуса = "Перевод заявки на Услуги";
		ПрефиксСообщения = "УСЛУГА";
	Иначе
		КомментарийСтатуса = "Перевод заявки на Товары";
		ПрефиксСообщения = "ТОВАР";
	КонецЕсли; 
	Если НЕ СтатусПереведен(НовыйСатус, КомментарийСтатуса) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаОтгружено!",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	//Создание документа ЮГ_ЭлектронныйПакет
	ТекДатаСервера = АО_ПСМ.ПолучитьДатуСервера();
	ДокПакет = Документы.ЮГ_ЭлектронныйПакет.СоздатьДокумент();
	ДокПакет.Дата = ТекДатаСервера;
	ДокПакет.НазначениеЭлектронногоПисьма = Перечисления.ЮГ_НазначенияЭлектронныхПисем.ОбычноеПисьмо;
	ДокПакет.ОтправившийОбъект = ЭтотОбъект.Ссылка;
	ДокПакет.ОтправлятьНемедленно = Истина;
	//Адрес отправителя
	ПредставлениеВрем = "auto@optimasmart.ru";
	АдресОтправителяЭлектроннойПочтыВрем = ЮГ_ОбщийМодульВызовСервера.ПолучитьСоздатьЮГ_АдресаЭлектроннойПочтыПоАдресу(ПредставлениеВрем);
	ДокПакет.АдресОтправителяЭлектроннойПочты = АдресОтправителяЭлектроннойПочтыВрем;
	
	//Формирование текста письма - начало
	НомерЗаказаВрем = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	НазваниеЗаказаВрем = СокрЛП(НазваниеЗаказа);
	
	ДокПакет.ПараметрыДата = ЭтотОбъект.Дата;
	ДокПакет.ПараметрыКодНомер = "" + НомерЗаказа;
	ДокПакет.Комментарий = КомментарийСтатуса;
	//ДокПакет.ПараметрыНазваниеЗаказа = НазваниеЗаказа;
	ДокПакет.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	ТекстПисьма = ПрефиксСообщения + ": У контрагента: " + Контрагент + " произошло изменение статуса отгрузки в заявке №" + НомерЗаказаВрем + " от " + ЭтотОбъект.Дата + ":
	| присвоен статус ""Отгружено"".
	|Пожалуйста, выпишите документы.";
	ДокПакет.ТекстПисьма = ТекстПисьма;
	//ДокПакет.ТипТекстаПочтовогоСообщенияСтрокойВнутр = ЗначениеВСтрокуВнутр(ТипТекстаПочтовогоСообщения.HTML);
	//Формирование текста письма - конец
	
	ДокПакет.ПараметрыСобытие = КомментарийСтатуса;
	ДокПакет.ПараметрыСтатус = "" + АО_СтатусыЗаявки;
	
	//Тема
	ТемаВрем = ПрефиксСообщения + ": Изменения статуса отгрузки: " + Контрагент;
	ДокПакет.Тема = ТемаВрем;
	
	ДокПакет.ТекстПисьма =  ДокПакет.ТекстПисьма + "
	|
	|Письмо сформировано автоматической службой рассылки.
	|Просьба не отвечать на данное письмо.";
	
	//Определение получателей - начало
	СтрокаАдреса = "";
	//СтрокаАдреса = "stgy@mail.ru";
	СтрокаАдреса = СтрокаАдреса + "finance@optimasmart.ru,commerce@optimasmart.ru";
	СтрокаАдреса = СтрЗаменить(СтрокаАдреса, ";", ",");
	СтрокаАдреса = СокрЛП(СтрокаАдреса);
	тмпМассивАдресов = АО_ОбщийМодуль.РазложитьСтрокуВМассив(СтрокаАдреса);
	Для Каждого тмпАдрес Из тмпМассивАдресов Цикл
		Если НЕ КАВ_РассылкаПисем.АдресРазрешен(тмпАдрес) Тогда
			Продолжить;
		КонецЕсли;
		АдресЭлектроннойПочтыВрем = ЮГ_ОбщийМодульВызовСервера.ПолучитьСоздатьЮГ_АдресаЭлектроннойПочтыПоАдресу(тмпАдрес);
		НоваяСтрока = ДокПакет.Получатели.Добавить();
		НоваяСтрока.АдресПолучателя = АдресЭлектроннойПочтыВрем;
	КонецЦикла;
	//Определение получателей - конец
	
	Если ДокПакет.Получатели.Количество() > 0 Тогда
		//Вложения
		Попытка
			ДокПакет.Записать();
			Сообщить("Уведомление в бухгалтерию сформировано для отправки.");
		Исключение
			Сообщить("Ошибка формирования уведомления в бухгалтерию.");
		КонецПопытки; 
	Иначе
		Сообщить("Ошибка формирования уведомления в бухгалтерию: не выявлены адреса получателей.");
	КонецЕсли; 
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

//ОтправитьНаОС_НаРсчет
Процедура ОтправитьНаОС_НаРсчет(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_НаРсчет;
	КомментарийСтатуса = "";
	Если НЕ СтатусПереведен(НовыйСатус, КомментарийСтатуса) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаРасчет!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

//ОтправитьНаОС_ПредварительныйРасчет
Процедура ОтправитьНаОС_ПредварительныйРасчет(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_ПредварительныйРасчет;
	КомментарийСтатуса = "";
	Если НЕ СтатусПереведен(НовыйСатус, КомментарийСтатуса) Тогда
		Сообщить("Статус заявки не может быть изменен ОтправитьПредварительныйРасчет!",СтатусСообщения.Важное);
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура ОтправитьНаОС_Изготовлен(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	//Запрет отправки Цветопробы ИМПРЕСС без услуг в статус "Изготовлен"
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Справочники.Номенклатура.НайтиПоКоду("00000001052")); //Цветопроба на бумаге - услуга
	Если
		Контрагент = Справочники.Контрагенты.НайтиПоКоду("000001618")  //ИМПРЕСС
		И
		Услуги.НайтиСтроки(ПараметрыОтбора).Количество() = 0 //Нет строк с цветопробой
	Тогда                                         
		Сообщить("Для данного контрагента цветопроба должна быть в услугах!");
		Возврат;
	КонецЕсли;		
	Если НЕ ВсеНеобходимыеПоляЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	ТаблицаЕстьНезаполненные = АО_ОбщийМодуль.ЕстьНеЗаполненыеЯчейкиТабличныхЧастей(Ссылка);
	Если ТипЗнч(ТаблицаЕстьНезаполненные) = Тип("Булево") И ТаблицаЕстьНезаполненные Тогда
		Сообщить("Заполните табличную часть ""Параметры печати""!");
		Возврат;
	КонецЕсли;
	Если НЕ ТабличныеЧастиЗаполнены(ТаблицаЕстьНезаполненные) Тогда
		Возврат;
	КонецЕсли;
	НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОС_Изготовлен;
	Если НЕ СтатусПереведен(НовыйСатус) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаИзготовлен!",СтатусСообщения.Важное);
	КонецЕсли;
	Печать(Истина, Ложь);
	//СкопироватьJpegи();
	ОтложенныеЗаданияСкопироватьJPEG();
	Если ТипФотополимера.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("Цветопробы") Тогда
		НаВыводПослеИзготовлен();
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Функция СтатусПереведен(НовыйСтатус, КомментарийСтатуса = "", ПричинаВозврата = Неопределено)
	
	Если НЕ ПравильноЗаполненыДатаОтгрузкиИДатаИзготовления(НовыйСтатус) Тогда
		Предупреждение("ДатаОтгрузки или ДатаИзготовления не заполнены");
		Возврат Ложь;
	КонецЕсли;
	
	тДата = ТекДата();
	СтруктураПрежнихРеквизитов = Неопределено;
	СтруктураНовыхРеквизитов = Неопределено;
	
	Попытка
		СтруктураНовыхРеквизитов = ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь") ,тДата, Ссылка, НовыйСтатус, КомментарийСтатуса, ПричинаВозврата);
		СтруктураПрежнихРеквизитов = ТекущийСтатус_ЗаявкиУстановить(СтруктураНовыхРеквизитов);
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		Сообщить(ОписаниеОшибки());
		Если НЕ СтруктураПрежнихРеквизитов = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПрежнихРеквизитов);
		КонецЕсли; 
		Если НЕ СтруктураНовыхРеквизитов = Неопределено Тогда
			Если СтруктураНовыхРеквизитов.Свойство("ДобавленаСтрокаТЧИстории") И СтруктураНовыхРеквизитов.ДобавленаСтрокаТЧИстории Тогда
				ЭтотОбъект.ЮГ_ИсторияСтатусовЗаявок.Удалить(ЭтотОбъект.ЮГ_ИсторияСтатусовЗаявок.Количество() - 1);
			КонецЕсли; 
		КонецЕсли; 
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция СтатусПереведенБезПроведения(НовыйСтатус, КомментарийСтатуса = "", ПричинаВозврата = Неопределено)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СтатусПереведенБезПроведения", Истина);
	
	Если НЕ ПравильноЗаполненыДатаОтгрузкиИДатаИзготовления(НовыйСтатус) Тогда
		Предупреждение("ДатаОтгрузки или ДатаИзготовления не заполнены");
		Возврат Ложь;
	КонецЕсли;
	
	тДата = ТекДата();
	СтруктураНовыхРеквизитов = ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь") ,тДата, Ссылка, НовыйСтатус, КомментарийСтатуса, ПричинаВозврата);
	СтруктураПрежнихРеквизитов = ТекущийСтатус_ЗаявкиУстановить(СтруктураНовыхРеквизитов);
	Попытка
		ЭтотОбъект.ОбменДанными.Загрузка = Истина;
		ЭтотОбъект.Записать();
		ЭтотОбъект.ОбменДанными.Загрузка = Ложь;
	Исключение
		Сообщить(ОписаниеОшибки());
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПрежнихРеквизитов);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Процедура ОтправитьПисьмоОПредварительномСчетеБух()
	Если ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоПредварительныйСчет, "Тип") = Неопределено Тогда
		Сеансы       = ПолучитьСеансыИнформационнойБазы();
		НомерСеанса  = НомерСеансаИнформационнойБазы();
		ТекущийСеанс = Неопределено;
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				ТекущийСеанс = Сеанс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
		Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
		НовоеЗадание = ОтложенныеЗадания.Добавить();
		НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
		НовоеЗадание.ВыполнятьПосле 	= "";
		НовоеЗадание.ВыполнятьНаСервере = Истина;
		НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
		НовоеЗадание.НомерСеанса		= Идентификатор;
		НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
		НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоПредварительныйСчет;
		НовоеЗадание.СтрокаПараметров 	= "";
		Сообщить("Отправка электронного письма о предварительном счёте отложена до момента записи Заявки");
	КонецЕсли;
КонецПроцедуры

Функция АдаптироватьИмяФайлаПередКопированием(Имя, Расширение) //Имя с расширением
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.АдаптироватьИмяФайлаПередКопированием", Истина);
	
	МаксимальнаяДлина = 50 + СтрДлина(Расширение);
	Если СтрДлина(Имя) <= МаксимальнаяДлина Тогда //Было 57
		Возврат Имя;
	Иначе
		Если СоответствиеИменДляКопирования.Получить(Имя) <> Неопределено Тогда  //Проверим на наличие соответствия имен
			Возврат СоответствиеИменДляКопирования.Получить(Имя); //Если есть, вернем из соответствия
        Иначе
            ИмяБезРасширения      = Лев(Имя, СтрДлина(Имя) - СтрДлина(Расширение));
            СтрРазделительИмени   = "_  ";                                             //"_" + два пробела
            ДлинаРазделителя      = СтрДлина(СтрРазделительИмени);
            ЧислоВхождений        = СтрЧислоВхождений(ИмяБезРасширения, СтрРазделительИмени); //Разделитель есть в строке имени
            Если ЧислоВхождений > 0 Тогда                                              //Разделители есть, обрабатываем по правилу
                Если ЧислоВхождений  = 1 Тогда
                    ИндексВхождения = Найти(ИмяБезРасширения, СтрРазделительИмени);    //Находим единственное вхождение
                Иначе //Ищем ИндексВхождения для последнего вхождения
                    Строки = СтрЗаменить(ИмяБезРасширения, СтрРазделительИмени, Символы.ПС); //получили многострочную строку
                    ОкончаниеСтроки = СтрПолучитьСтроку(Строки, СтрЧислоСтрок(Строки));// выделяем строку с окончанием. 
                    ИндексВхождения = СтрДлина(ИмяБезРасширения) - СтрДлина(ОкончаниеСтроки) - СтрДлина(СтрРазделительИмени) + 1;
                КонецЕсли;
                ЛеваяЧастьДлинная = Лев(ИмяБезРасширения, ИндексВхождения - 1);                     //Исключая  разделитель
                ПраваяЧастьДлинная = Сред(ИмяБезРасширения, ИндексВхождения + ДлинаРазделителя);    //Исключая разделитель
                //чистим левую часть
                Коп = Найти(ЛеваяЧастьДлинная, " - kopiya");
                Если Коп > 0 Тогда
                    ЛеваяЧастьДлинная = Лев(ЛеваяЧастьДлинная, Коп - 1);
                КонецЕсли;
                Коп = Найти(ЛеваяЧастьДлинная, " — kopiya");
                Если Коп > 0 Тогда
                    ЛеваяЧастьДлинная = Лев(ЛеваяЧастьДлинная, Коп - 1);
                КонецЕсли;
                Коп = Найти(ЛеваяЧастьДлинная, " - копия");
                Если Коп > 0 Тогда
                    ЛеваяЧастьДлинная = Лев(ЛеваяЧастьДлинная, Коп - 1);
                КонецЕсли;
                Коп = Найти(ЛеваяЧастьДлинная, " — копия");
                Если Коп > 0 Тогда
                    ЛеваяЧастьДлинная = Лев(ЛеваяЧастьДлинная, Коп - 1);
                КонецЕсли;
                Коп = Найти(ПраваяЧастьДлинная, " - копия");
                Если Коп > 0 Тогда
                    ПраваяЧастьДлинная = Лев(ПраваяЧастьДлинная, Коп - 1);
                КонецЕсли;
                Коп = Найти(ПраваяЧастьДлинная, " — копия");
                Если Коп > 0 Тогда
                   ПраваяЧастьДлинная = Лев(ПраваяЧастьДлинная, Коп - 1);
                КонецЕсли;
                Коп = Найти(ПраваяЧастьДлинная, "~");
                Если Коп > 0 Тогда
                   ПраваяЧастьДлинная = Лев(ПраваяЧастьДлинная, Коп - 1);
                КонецЕсли;
                Если СтрДлина(ПраваяЧастьДлинная) > 16 Тогда //Самый длинный вариант цвета был "Mcdonalds Yellow"
                    ПраваяЧастьДлинная = Лев(ПраваяЧастьДлинная, 16);
                КонецЕсли;
                //приведем длину 
                Если СтрДлина(ЛеваяЧастьДлинная) + ДлинаРазделителя + СтрДлина(ПраваяЧастьДлинная) > МаксимальнаяДлина - СтрДлина(Расширение) Тогда
                   ЛеваяЧастьДлинная = Лев(ЛеваяЧастьДлинная, МаксимальнаяДлина - СтрДлина(Расширение) - ДлинаРазделителя - СтрДлина(ПраваяЧастьДлинная));
                КонецЕсли;
                Итог = ЛеваяЧастьДлинная + СтрРазделительИмени + ПраваяЧастьДлинная + Расширение;
            Иначе
                Итог = Лев(ИмяБезРасширения, МаксимальнаяДлина - СтрДлина(Расширение)) + Расширение;
            КонецЕсли; //ЧислоВхождений  > 0
			СоответствиеИменДляКопирования.Вставить(Имя, Итог); //Запишем соответствие имен
			Возврат Итог;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция БезСпецсимволов(Имя)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.БезСпецсимволов", Истина);
	
	Рез = СокрЛП(Имя);   
	Рез = СтрЗаменить(Рез,"<","");
	Рез = СтрЗаменить(Рез,">","");
	Рез = СтрЗаменить(Рез,"?","");
	Рез = СтрЗаменить(Рез,":","");
	Рез = СтрЗаменить(Рез,"*","");
	Рез = СтрЗаменить(Рез,"/","");
	Рез = СтрЗаменить(Рез,"\","");
	Рез = СтрЗаменить(Рез,"|","");
	Рез = СтрЗаменить(Рез,"!","");
	
	Возврат(Рез);
КонецФункции

Процедура ОтправитьНаОмНаВывод(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли;
	//КИГ +
	Если 
		ЗначениеЗаполнено(ОС_Стратегия)
		И ТаблицаФайловТиф.Количество() > 0
	Тогда
		Расширение = Прав(ОС_Стратегия.Наименование, 4);
		ФлагОшибки = Ложь;
		Если Расширение =".dgc" Тогда
			Для каждого Стр Из ТаблицаФайловТиф Цикл
				Если ОС_Стратегия.Наименование <> Стр.Кривая Тогда
					ФлагОшибки = Истина;	
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Прав(ОС_Стратегия.Наименование, 6) = ".icpro" Тогда
			Для каждого Стр Из ТаблицаФайловТиф Цикл
				Если НЕ ЗначениеЗаполнено(Стр.Кривая) Тогда
					ФлагОшибки = Истина;	
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если ФлагОшибки Тогда
			Сообщить("Необходимо проверить и привести в соответствие кривой тифф файлов с заданием");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//КИГ -

	//КГГ 2021 10 19+
	Если НЕ ЗначениеЗаполнено(МонтажНаАстролон) И КоличествоФорм <> ОбщееКоличество Тогда
		Сообщить("Общее количество не соответствует количеству форм по заявке. Необходимо проверить комплектность.");
		Возврат;
	КонецЕсли;
	//КГГ 2021 10 19-
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент) И ЗначениеЗаполнено(ЭтотОбъект.НазваниеЗаказа) Тогда //Проверка на дубли по названию
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(ЭтотОбъект.Дата) Тогда
			Запрос.УстановитьПараметр("Дата1",		ЭтотОбъект.Дата - 3 * 24 * 60 * 60);
			Запрос.УстановитьПараметр("Дата2",		ЭтотОбъект.Дата + 3 * 24 * 60 * 60);
		Иначе
			Запрос.УстановитьПараметр("Дата1",					  ТекущаяДата() - 3 * 24 * 60 * 60);
			Запрос.УстановитьПараметр("Дата2",					  ТекущаяДата() + 3 * 24 * 60 * 60);
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент",		ЭтотОбъект.Контрагент);
		Запрос.УстановитьПараметр("НазваниеЗаказа",	ЭтотОбъект.НазваниеЗаказа);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АО_ЗаявкаПокупателя.Ссылка
		|ИЗ
		|	Документ.АО_ЗаявкаПокупателя КАК АО_ЗаявкаПокупателя
		|ГДЕ
		|	АО_ЗаявкаПокупателя.Дата > &Дата1
		|	И АО_ЗаявкаПокупателя.Дата < &Дата2
		|	И АО_ЗаявкаПокупателя.Контрагент = &Контрагент
		|	И АО_ЗаявкаПокупателя.НазваниеЗаказа = &НазваниеЗаказа
		|	И НЕ АО_ЗаявкаПокупателя.АО_СтатусыЗаявки = ЗНАЧЕНИЕ(Перечисление.АО_СтатусыЗаявки.ОмОтменен)
		|	И НЕ АО_ЗаявкаПокупателя.ПометкаУдаления";
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(); //Получили Заявки без учета связей Основной/Подчиненный
		ЗапросРазбитые = Новый Запрос;
		ЗапросРазбитые.Текст =
		"ВЫБРАТЬ
		|	ОС_РазбитыеЗаказы.Основной,
		|	ОС_РазбитыеЗаказы.Подчиненный
		|ИЗ
		|	РегистрСведений.ОС_РазбитыеЗаказы КАК ОС_РазбитыеЗаказы
		|ГДЕ
		|	(ОС_РазбитыеЗаказы.Основной В (&ЗаявкиПокупателей)
		|			ИЛИ ОС_РазбитыеЗаказы.Подчиненный В (&ЗаявкиПокупателей))";
		ЗапросРазбитые.УстановитьПараметр("ЗаявкиПокупателей", РезультатЗапроса);
		РезультатЗапросРазбитые = ЗапросРазбитые.Выполнить().Выгрузить();
		КоличествоСвязей = 0;
		ВремяНачалаВыполнения = ТекущаяДата(); //Ограничим цикл 5 секундами
		Пока КоличествоСвязей < РезультатЗапросРазбитые.Количество() Цикл
			КоличествоСвязей = РезультатЗапросРазбитые.Количество();
			Для Каждого СтрокаРезультатЗапросРазбитые Из РезультатЗапросРазбитые Цикл //Расширяем область поиска
				Если РезультатЗапроса.Найти(СтрокаРезультатЗапросРазбитые.Основной) = Неопределено Тогда
					СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
					СтрокаРезультатЗапроса.Ссылка = СтрокаРезультатЗапросРазбитые.Основной;
				КонецЕсли;
				Если РезультатЗапроса.Найти(СтрокаРезультатЗапросРазбитые.Подчиненный) = Неопределено Тогда
					СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
					СтрокаРезультатЗапроса.Ссылка = СтрокаРезультатЗапросРазбитые.Подчиненный;
				КонецЕсли;
			КонецЦикла;
			ЗапросРазбитые.УстановитьПараметр("ЗаявкиПокупателей", РезультатЗапроса); //Ищем связи из расширенной области
			РезультатЗапросРазбитые = ЗапросРазбитые.Выполнить().Выгрузить();
			Если ВремяНачалаВыполнения + 5 < ТекущаяДата() Тогда //Ограничим цикл 5 секундами
				Сообщить("Поиск Заявок с парным наименованием не произведен до конца, слишком много связей Основной/Подчиненный. Использован упрощенный алгоритм!");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ГруппыРазбитых = Новый ТаблицаЗначений;
		ГруппыРазбитых.Колонки.Добавить("Группа");
		ГруппыРазбитых.Колонки.Добавить("Заявка");
		НомерГруппы = 0;
		Для Каждого СтрокаРезультатЗапросРазбитые Из РезультатЗапросРазбитые Цикл //Добавляем пары из регистра
			СтрОсновной		= ГруппыРазбитых.Найти(СтрокаРезультатЗапросРазбитые.Основной);
			СтрПодчиненный	= ГруппыРазбитых.Найти(СтрокаРезультатЗапросРазбитые.Подчиненный);
			Если СтрОсновной = Неопределено И СтрПодчиненный = Неопределено Тогда //Создаем новую группу и добавляем обе заявки
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= НомерГруппы;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Основной;
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= НомерГруппы;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Подчиненный;
				НомерГруппы = НомерГруппы + 1;
			ИначеЕсли СтрОсновной = Неопределено И СтрПодчиненный <> Неопределено Тогда //Добавляем в существующую группу
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= СтрПодчиненный.Группа;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Основной;
			ИначеЕсли СтрОсновной <> Неопределено И СтрПодчиненный = Неопределено Тогда //Аналогично
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= СтрОсновной.Группа;
				Стр.Заявка	= СтрокаРезультатЗапросРазбитые.Подчиненный;
			КонецЕсли;
		КонецЦикла;
		РезультатЗапроса = Запрос.Выполнить().Выгрузить(); //Снова получаем сокращенную таблицу, в основном, чтобы правильно сформировать сообщение
		Заказытемп = "Имеются заявки с таким же названием у данного контрагента, вы уверены что хотите записать документ?: " + Символы.ПС;
		Для Каждого СтрокаРезультатЗапроса Из РезультатЗапроса Цикл //Добавляем в ГруппыРазбитых и Заказы
			Заказытемп		= Заказытемп + СтрокаРезультатЗапроса.Ссылка + Символы.ПС;
			СтрОсновной		= ГруппыРазбитых.Найти(СтрокаРезультатЗапроса.Ссылка);
			Если СтрОсновной = Неопределено Тогда
				Стр = ГруппыРазбитых.Добавить();
				Стр.Группа	= НомерГруппы;
				Стр.Заявка	= СтрокаРезультатЗапроса.Ссылка;
				НомерГруппы = НомерГруппы + 1;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда //Если документ еще ни разу не записывался, он точно в отдельной группе
			НомерГруппы = НомерГруппы + 1;
		КонецЕсли;
		Если НомерГруппы > 1 Тогда
			Ответ = Вопрос(Заказытемп, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				Возврат;
			Иначе
                ТекстКом = "Отправлена на вывод заявка - дубль с названием: " + ЭтотОбъект.НазваниеЗаказа;
                бб1с_Логирование.ЗаписатьВЛог(Строка(ЭтотОбъект), ТекстКом);
            КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Организация = Контрагент.ОсновнойДоговорКонтрагента.Организация Тогда
	
		 Организация = Контрагент.ОсновнойДоговорКонтрагента.Организация;
	
	КонецЕсли;
	
	Если Организация = Справочники.Организации.НайтиПоКоду("000000001") Тогда
		Предупреждение("Отгрузка от организации ""АртЛоджик"" запрещена! Проверьте наличе договора с ""ОптимасмАрт"".");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаИзготовления) Тогда
		ТекстСообщения = "Не заполнена ""Дата изготовления""!";
		Сообщить (ТекстСообщения);
		Предупреждение(ТекстСообщения);
		Возврат;
	ИначеЕсли НачалоДня(ТекущаяДата()) > ДатаИзготовления Тогда
		ТекстСообщения = """Дата изготовления"" должна быть не раньше сегодняшней даты!";
		Сообщить (ТекстСообщения);
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//Проверка дня отгрузки сегодняшнему дню
	Если НачалоДня(ТекущаяДата()) > ДатаОтгрузки Тогда
		Предупреждение("Дата отгрузки не может быть ""Вчера""!");
		Сообщить ("Измените дату отгрузки!");
		Возврат;
	ИначеЕсли НЕ Срочный И НачалоДня(ТекущаяДата()) = ДатаОтгрузки Тогда
		Ответ = Вопрос("Отгрузка сегодня. Отметить заявку как срочную?", РежимДиалогаВопрос.ДаНетОтмена);
	    Если Ответ = КодВозвратаДиалога.ДА Тогда
		    Срочный = Истина;
		Иначе
			Сообщить("Отгружаться сегодня могут только срочные заказы! Отметьте заявку как срочную, или измените дату отгрузки.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерЗаказа) Тогда
		НомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	КонецЕсли;

	Попытка
		ЭтотОбъект.Записать();
	Исключение
		Возврат;
	КонецПопытки;
	//Оставлены процедуры проверки. Предоплата и ПДЗ оставлены в текущей процедуре
	Если НЕ ВыполнитьПроверкуОтправкиНаВывод() Тогда
		Возврат;
	КонецЕсли;	

	//Сначала проверяем СРЦ, если есть, других проверок по оплате не делаем. 
	//Если нет СРЦ проверяем Предоплату, затем ПДЗ.
	Если НЕ СпособРасчетаЦены = Перечисления.РепроСпособРасчетаЦены.СчетНеВыставлять Тогда
		Если ЕстьПредоплата() Тогда
			Возврат;
		КонецЕсли;	
		
		//Проверим на стоп отгрузку
		Если ЕстьПДЗ() Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	РаспечаткиНапечатаны = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.МонтажНаАстролон) Тогда
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.БазоваяПланка) Тогда
			ТекстОшибки = ТекстОшибки + "
			|- ""Крепежная планка (базовая)""";
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ХвостоваяПланка) Тогда
			ТекстОшибки = ТекстОшибки + "
			|- ""Хвостовое крепление""";
		КонецЕсли; 
		Если ТекстОшибки <> "" Тогда
			ТекстОшибки = "Перевод заявки в статус <на вывод> отменен: " + "для Монтажа на астролон не заполнено:" + ТекстОшибки;
			Сообщить(ТекстОшибки);
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураВозвратаПечатьРаспечаток = Неопределено;
	//МОСКВА
	Если ОС_Производство = Перечисления.ОС_Производство.Москва ИЛИ ОС_Производство = Перечисления.ОС_Производство.Пенза Тогда
		Если ЭтотОбъект.ТаблицаФайловТиф.Количество()=0 И НЕ ос_астролон Тогда 
			Сообщить("Перевод заявки в статус <на вывод> отменен, к заявке не прикреплены файлы tif ");	
			Возврат;
		КонецЕсли;
		
		//Проверка на СРЦ Доп контроль заполнения
		Если ЭтотОбъект.СпособРасчетаЦены = Перечисления.РепроСпособРасчетаЦены.СчетНеВыставлять
			И (ЭтотОбъект.ПричиныСчетНеВыставлять.Количество()=0 
			или ЭтотОбъект.ОтделыСчетНеВыставлять.Количество()=0
			или ЭтотОбъект.СчетНеВыставлятьПричина="") Тогда 
			Сообщить("Перевод заявки в статус <на вывод> отменен, к заявке не заполнены причины счет не выставлять и комментарий причины ");	
			Возврат;
		КонецЕсли;
		Если ЭтотОбъект.ТаблицаФайловТиф.Количество()>0 Тогда	
			Если НЕ СкопированыФайлы(Ложь, Ложь) Тогда
				Сообщить("Не удалось скопировать файлы.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//Перенесено в данное условие
		Если ЭтотОбъект.Срочный Тогда	// (Пользователь,ОтветДа, Ссылка, Статус, Комментарий)
			АО_ОбщийМодуль.СменитьСтатусСрочной(глЗначениеПеременной("глТекущийПользователь"), Истина , Ссылка, Перечисления.СрочныеСтатусы.ПереданВПроизводствоИзОДП, Комментарий,Ложь);
		КонецЕсли;
		СтруктураВозвратаПечатьРаспечаток = ПечатьРаспечаток(Истина);
	//ПРОЧЕЕ
	ИначеЕсли
		ОС_Производство = Перечисления.ОС_Производство.Прочее //Репропарк
	Тогда   //Производство = "прочее"
		//Пердоплата
		Если
			ЭтотОбъект.Контрагент.ОсновнойДоговорКонтрагента.Предоплата
			И
			НЕ РольДоступна("РазрешитьУстанавливатьСтатусПредоплатаКонтрагенту")
		Тогда
			Сообщить("Перевод заявки в статус <на вывод> отменен , заявка переводится в ""СчетНаПредоплату"", с контрагентом работаем по предоплате");
			
			НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_СчетНаПредоплату;
			Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
				Сообщить("Статус заявки не может быть изменен ОправитьНаВывод!",СтатусСообщения.Важное);
			КонецЕсли;
			
			ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
			
			Возврат;
		КонецЕсли;  
		
		Если ЭтотОбъект.ТаблицаФайловТиф.Количество()=0  и не ОС_Астролон Тогда 
			Сообщить("Перевод заявки в статус <на вывод> отменен, к заявке не прикреплены файлы tif или len");	
			Возврат;
		КонецЕсли;
		
		//СРЦ
		Если ЭтотОбъект.СпособРасчетаЦены = Перечисления.РепроСпособРасчетаЦены.СчетНеВыставлять
			И (ЭтотОбъект.ПричиныСчетНеВыставлять.Количество()=0 
			или ЭтотОбъект.ОтделыСчетНеВыставлять.Количество()=0
			или ЭтотОбъект.СчетНеВыставлятьПричина="") Тогда 
			Сообщить("Перевод заявки в статус <на вывод> отменен, к заявке не заполнены причины счет не выставлять и комментарий причины ");	
			Возврат;
		КонецЕсли;
		
		Прочее = Истина;
		Если ЭтотОбъект.ТаблицаФайловТиф.Количество()>0 Тогда
			Если НЕ СкопированыФайлы(Прочее, Ложь) Тогда
				Сообщить("Не удалось скопировать файлы Тиф.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//Проверка на опцию
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОС_РазрешениеДействий.Действие
		|ИЗ
		|	РегистрСведений.ОС_РазрешениеДействий КАК ОС_РазрешениеДействий
		|ГДЕ
		|	ОС_РазрешениеДействий.Действие = &Действие
		|	И ОС_РазрешениеДействий.Разрешить";
		
		Запрос.УстановитьПараметр("Действие", Перечисления.ОС_ДействияПользователя.СозданиеЗаказаРепропарк);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗаводитьЗаказыВРепропарке = НЕ РезультатЗапроса.Пустой();
		Если ОС_Производство = Перечисления.ОС_Производство.Прочее //Репропарк - запись статуса?
			И ЗаводитьЗаказыВРепропарке Тогда
			
			Если ЗначениеЗаполнено(ОС_НомерРепропарк) Тогда
				Ответ = Вопрос("В базе Репропарк уже создан заказ с номером " + ОС_НомерРепропарк + ". Продолжение вызовет создание нового заказа в базе Репропарк. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
				Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;	
			
			//Перенесем смену статуса сюда для Тульских заявок
			Если Филиал = Справочники.Филиалы.Тула Тогда
				Перейти ~ЗаписьСтатусаДляТулы;
			КонецЕсли;	
			
			Если НЕ СоздатьЗаказРепропарк() Тогда     
				Сообщить("Перевод в статус ""На вывод"" невозможен! Не удалось создать заказ в базе Репропарк."); 
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтотОбъект.Срочный И НЕ (ОС_Производство = Перечисления.ОС_Производство.Прочее) Тогда	//Коноровский А.В. 10.04.2017 13:08:35 +++
			// Для РП Срочные не пишем
			// (Пользователь,ОтветДа, Ссылка, Статус, Комментарий)
			АО_ОбщийМодуль.СменитьСтатусСрочной(глЗначениеПеременной("глТекущийПользователь"), Истина , Ссылка, Перечисления.СрочныеСтатусы.ПереданВПроизводствоИзОДП, Комментарий,Ложь);
		КонецЕсли;
		
		СтруктураВозвратаПечатьРаспечаток = ПечатьРаспечаток(Истина);

	Иначе
		Сообщить("Заполните поле ""Производство""!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.МонтажНаАстролон.Пустая() Тогда
		//Копируем Астралоны На вывод
		УспешноСкопированыФайлыАстралоныНаВывод = СкопироватьФайлыАстралоныНаВывод();
	КонецЕсли; 
	
	~ЗаписьСтатусаДляТулы:
	
	//Запишем имеющиеся Jpegи в папку контрагента
	//СкопироватьJpegи();
	ОтложенныеЗаданияСкопироватьJPEG();
	
	//Требуется реинжиниринг: перенести переводы статусов в функции и пометсить все процедуры в транзакцию с попыткой записи заявки	
	//Установим статус "На вывод"
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаВывод;
	ЭтотОбъект.ОтправилНаВывод = глЗначениеПеременной("глТекущийПользователь");
	ЭтотОбъект.Отправил_НаВывод = глЗначениеПеременной("глТекущийПользователь");
	Если НЕ ЗначениеЗаполнено(Обработал_Заказ) Тогда
		Обработал_Заказ = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	ЭтотОбъект.ДатаНаВывод = ТекДата();
	
	Если СтруктураВозвратаПечатьРаспечаток = Неопределено Тогда
		Комментарий = "Не было печати распечаток.";
	Иначе
		Комментарий = СтруктураВозвратаПечатьРаспечаток.Информация;
	КонецЕсли; 
	
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки, Комментарий) Тогда
		Сообщить("Статус заявки не может быть изменен ОправитьНаВывод 2!",СтатусСообщения.Важное);
		//Удалим файлы из архива на вывод
		Попытка
			УдалитьФайлы(ПутьКФайламАрхива);
			Сообщить("  удален каталог : "+ПутьКФайламАрхива);
			ПутьКФайламАрхива = "";
			Записать();
		Исключение	
			Сообщить("Не удалось удалить каталог с файлами :"+ПутьКФайламАрхива+" удалите его вручную"); 
		КонецПопытки;
		Возврат;
	Иначе
		Если Филиал = Справочники.Филиалы.Тула 
			И ОС_Производство = Перечисления.ОС_Производство.Прочее
			И ЗаводитьЗаказыВРепропарке
			Тогда
			Если НЕ СоздатьЗаказРепропарк() Тогда
				Сообщить("Перевод в статус ""На вывод"" невозможен! Не удалось создать заказ в базе Репропарк."); 
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		
		Если РаспечаткиНапечатаны Тогда
			МасФайлов = НайтиФайлы(ПутьКФайлам + "\Print", "*.jpg*");
			Предупреждение("Распечатаны цветные распечати в количестве " + МасФайлов.Количество() + " шт. Заберите их с принтера.",, "Цветные распечатки");
		КонецЕсли;
		
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МонтажНаАстролон) Тогда
		ДатаРазница = ДатаОтгрузки - ДатаИзготовления;
		Если СтараяФормаАстролона Тогда
		СохранитьАстролон(,Истина);
		Иначе
		СохранитьАстролонНовая(,Истина);
		КонецЕсли;
		Если ДатаРазница < 86400*2 Тогда;
			ЭтотОбъект.Срочный = Истина;
			АО_ОбщийМодуль.СменитьСтатусСрочной(глЗначениеПеременной("глТекущийПользователь"), Истина , Ссылка, Перечисления.СрочныеСтатусы.ПереданВПроизводствоИзОДП, Комментарий,Ложь);
			ЭтотОбъект.Записать();
			
		КонецЕсли;
		Если Контрагент.ЮГ_ОповещатьОДлинныхАстралонах = Истина Тогда
			НужноОтправлять = Ложь;
			ЮГ_ПределДлины = 150;
			Для каждого СтрСодержаниеМонтажа Из СодержаниеМонтажа Цикл
				Если СтрСодержаниеМонтажа.Длина > ЮГ_ПределДлины Тогда
					НужноОтправлять = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НужноОтправлять Тогда
				Если ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоДлинныйАстролон, "Тип") = Неопределено Тогда
					Сеансы       = ПолучитьСеансыИнформационнойБазы();
					НомерСеанса  = НомерСеансаИнформационнойБазы();
					ТекущийСеанс = Неопределено;
					Для Каждого Сеанс Из Сеансы Цикл
						Если Сеанс.НомерСеанса = НомерСеанса Тогда
							ТекущийСеанс = Сеанс;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
					Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
					НовоеЗадание = ОтложенныеЗадания.Добавить();
					НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
					НовоеЗадание.ВыполнятьПосле 	= "";
					НовоеЗадание.ВыполнятьНаСервере = Истина;
					НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
					НовоеЗадание.НомерСеанса		= Идентификатор;
					НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
					НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоДлинныйАстролон;
					НовоеЗадание.СтрокаПараметров 	= ЮГ_ПределДлины;
					Сообщить("Отправка письма о длинном астролоне отложена до момента записи Заявки");
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	//ОтправитьПочтуБухгалтерииПриРазбитомЗаказе();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОС_РазбитыеЗаказы.Подчиненный
		|ИЗ
		|	РегистрСведений.ОС_РазбитыеЗаказы КАК ОС_РазбитыеЗаказы
		|ГДЕ
		|	ОС_РазбитыеЗаказы.Основной = &Основной";
	
	Запрос.УстановитьПараметр("Основной", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		СтрокаОтложенногоЗадания = ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоРазбитыйЗаказ, "Тип");
		Если СтрокаОтложенногоЗадания = Неопределено Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПодчиненныйЗаказ = Строка(Выборка.Подчиненный);
			Сеансы       = ПолучитьСеансыИнформационнойБазы();
			НомерСеанса  = НомерСеансаИнформационнойБазы();
			ТекущийСеанс = Неопределено;
			Для Каждого Сеанс Из Сеансы Цикл
				Если Сеанс.НомерСеанса = НомерСеанса Тогда
					ТекущийСеанс = Сеанс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
			Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
			НовоеЗадание = ОтложенныеЗадания.Добавить();
			НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
			НовоеЗадание.ВыполнятьПосле 	= "";
			НовоеЗадание.ВыполнятьНаСервере = Истина;
			НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
			НовоеЗадание.НомерСеанса		= Идентификатор;
			НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
			НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоРазбитыйЗаказ;
			НовоеЗадание.СтрокаПараметров 	= ПодчиненныйЗаказ;
		Иначе
			СтрокаОтложенногоЗадания.СтрокаПараметров = ПодчиненныйЗаказ;
		КонецЕсли;
		Сообщить("Отправка письма по разбитому заказу для бухгалтерии отложена до момента записи Заявки");
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) И Контрагент.ОтправлятьПлощадьЗапечатки Тогда
		ОтправитьПлощадьЗапечаткиНажатие(Неопределено); //ЭлементыФормы.ОтправитьПлощадьЗапечатки
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры //НаВывод

Функция СкопироватьФайлыАстралоныНаВывод() Экспорт
	КаталогИсточник = ЭтотОбъект.ПутьКФайлам;
	СлэшИсточника = ЮГ_ПолучитьСлэшИДобавитьКонцевойЕслиНет(КаталогИсточник);
	КаталогИсточник = КаталогИсточник + "Print";
	КаталогВрем = Новый Файл(КаталогИсточник);
	Если НЕ КаталогВрем.Существует() Тогда
		Сообщить("Каталог-источник для файлов астралонов: """ + КаталогИсточник + """ не существует. Файлы астралонов не скопированы!");
		Возврат Ложь;
	КонецЕсли; 
	
	МассивФайловИсточник = НайтиФайлы(КаталогИсточник, "*.eps", Ложь);
	МассивФайловJPG = НайтиФайлы(КаталогИсточник, "*.jpg", Ложь);
	МассивФайловTIF = НайтиФайлы(КаталогИсточник, "*.tif", Ложь);
	МассивФайловВсех = НайтиФайлы(КаталогИсточник, "*.*", Ложь);
	Если МассивФайловИсточник.Количество() = 0 И МассивФайловJPG.Количество() = 0 И МассивФайловTIF.Количество() = 0 Тогда
		Сообщить("В каталоге-источнике """ + КаталогИсточник + """ нет файлов .eps, .jpg, .tif. Файлы астралонов не скопированы!");
		Возврат Ложь;
	КонецЕсли; 
	
	КорневойКаталогНазначения = АО_ОбщийМодуль.ПолучитьКорневойКаталогПоНазначения(,Перечисления.НазначенияКаталогов.АстралоныНаВывод, ЭтотОбъект.ОС_Производство);
	Если НЕ ЗначениеЗаполнено(КорневойКаталогНазначения) Тогда
		Сообщить("В регистре сведений ""Путь к каталогам"" не найден путь по назначению АстралоныНаВывод. Файлы астралонов не скопированы!");
		Возврат Ложь;
	КонецЕсли; 
	Слэш = ЮГ_ПолучитьСлэшИУдалитьКонцевойЕслиЕсть(КорневойКаталогНазначения);
	КаталогВрем = Новый Файл(КорневойКаталогНазначения);
	Если НЕ КаталогВрем.Существует() Тогда
		Сообщить("Каталог назначения для файлов астралонов: " + КорневойКаталогНазначения + " не существует. Файлы астралонов не скопированы!");
		Возврат Ложь;
	КонецЕсли; 
	
	ИмяПапкиНазначения = 
	Формат(ЭтотОбъект.ЮГ_ДатаМонтажа,"ДФ=dd.MM.yy")+ 
	"_" + Формат(Число(Номер),"ЧГ=0")+ 
	АО_ПСМ.ПробелыНаТире(?(ЗначениеЗаполнено(Контрагент.ОС_НаименованиеДляПапок), "_" + Контрагент.ОС_НаименованиеДляПапок, "")) +
	"_" + АО_ПСМ.ПробелыНаТире(Контрагент.Наименование);
	КолвоМонтажей = ЭтотОбъект.СодержаниеМонтажа.Количество();
	ПоследняяЦифра = КолвоМонтажей - Цел(КолвоМонтажей / 10) * 10;
	Текстик = "" + КолвоМонтажей + "-монтаж";
	Концовка = "ей";
	Если КолвоМонтажей < 10 ИЛИ КолвоМонтажей > 20 Тогда
		//Больше 100 не бывает
		Если ПоследняяЦифра > 1 И ПоследняяЦифра < 5 Тогда
			Концовка = "а";
		ИначеЕсли ПоследняяЦифра = 1 Тогда
			Концовка = "";
		КонецЕсли; 
	КонецЕсли; 
	ИмяПапкиНазначения = ИмяПапкиНазначения + 
	"_" + Текстик + Концовка;
	ИмяПапкиНазначения = СтрЗаменить(ИмяПапкиНазначения, ",", ".");
	ИмяПапкиНазначения = АО_ПСМ.ЗаменитьНаПробелыНеДОССимволы(ИмяПапкиНазначения);
	ИмяПапкиНазначения = АО_ПСМ.ПробелыНаТире(ИмяПапкиНазначения);
	
	ПутьНазначения = КорневойКаталогНазначения + Слэш + ИмяПапкиНазначения;
	ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталог(ПутьНазначения);
	Для Каждого Файл Из МассивФайловВсех Цикл
		Если Файл.ЭтоФайл() И Файл.Расширение <> ".tmp" Тогда
			ОтложенныеЗаданияСкопироватьФайлы(Файл.ПолноеИмя, ПутьНазначения + "\" + Файл.Имя, ТекущееЗадание);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправитьНаОС_МонтажНаАстралон(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;
	СтруктураВозвратаПечатьРаспечаток = ПечатьРаспечаток(Истина);
	КомментарийРаспечаток = СтруктураВозвратаПечатьРаспечаток.Информация;
	РаспечаткиНапечатаны = СтруктураВозвратаПечатьРаспечаток.Успешно;
	//ПечатьАстролонНовая(Истина, КомментарийРаспечаток);
	Если
		ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ПечатьАстролон, "Тип") = Неопределено
		//Или
		//Вопрос("Для данного документа уже есть отложенное задание типа ""Печать Астролон"". Хотите создать ещё одно?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да
	Тогда
		Сеансы       = ПолучитьСеансыИнформационнойБазы();
		НомерСеанса  = НомерСеансаИнформационнойБазы();
		ТекущийСеанс = Неопределено;
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				ТекущийСеанс = Сеанс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
		Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
		НовоеЗадание = ОтложенныеЗадания.Добавить();
		НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
		НовоеЗадание.ВыполнятьПосле 	= "";
		НовоеЗадание.ВыполнятьНаСервере = Ложь;
		НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
		НовоеЗадание.НомерСеанса		= Идентификатор;
		НовоеЗадание.Ключ               = "";
		НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ПечатьАстролон;
		НовоеЗадание.СтрокаПараметров 	= "Истина";
		Сообщить("Печать Астролон отложена до момента записи Заявки");
	КонецЕсли;
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_МонтажНаАстралон;
	ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь"), АО_ОбщийМодуль.ТекДата(), Ссылка, НовыйСтатусЗаявки, КомментарийРаспечаток);    
	АО_СтатусыЗаявки = НовыйСтатусЗаявки;
	Попытка
		Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
	    Сообщить("Перевод в статус """ + НовыйСтатусЗаявки + """ невозможен! По причине: " + ОписаниеОшибки()); 
	КонецПопытки;
	Если РаспечаткиНапечатаны Тогда
		МасФайлов = НайтиФайлы(ПутьКФайлам + "\Print", "*.jpg*");
		Предупреждение("Распечатаны цветные распечати в количестве " + МасФайлов.Количество() + " шт. Заберите их с принтера.",, "Цветные распечатки");
	КонецЕсли;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

/////////////////////////////////////////////////////////
// Группа проверок при отправке на вывод
////////////////////////////////////////////////////////

Функция ЕстьПДЗ()
	
	Если СтопОтгрузка() Тогда
		тмпКодРазблокировки = АО_ОбщийМодуль.ПрочитатьКодРазблокировки(ЭтотОбъект.Ссылка);
		Если тмпКодРазблокировки = Неопределено Тогда
			тмпКодРазблокировки = АО_ОбщийМодуль.ПолучитьСлучайныйКод();
			АО_ОбщийМодуль.УстановитьКодРазблокировки(ЭтотОбъект.Ссылка, тмпКодРазблокировки);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Константы.ОС_ПочтовыйЯщикМенеджера.Получить()) Тогда
			АО_ОбщийМодуль.ОтправитьПисьмоСКодомРазблокировки(ЭтотОбъект.Ссылка, тмпКодРазблокировки);
			Сообщить("У Контрагента обнаружилась просроченная задолженность. Введите Код разблокировки.", СтатусСообщения.Внимание);
			тмпФорма = ПолучитьОбщуюФорму("ОС_ФормаВводаКодаРазблокировки");
			тмпФорма.ОткрытьМодально();
			Если тмпФорма.КодРазблокировки <> тмпКодРазблокировки Тогда
				
				бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЕстьПДЗ_1", Истина);
				
				НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.СтопОтгрузкаПДЗ;
				Комментарий = "Введен неверный код разблокировки";
				Сообщить("Статус ""На вывод"" не может быть установлен.", СтатусСообщения.Внимание);
				
				Если НЕ СтатусПереведен(НовыйСтатусЗаявки, Комментарий) Тогда
					Сообщить("Статус заявки не может быть изменен ПДЗ!",СтатусСообщения.Важное);
					Возврат Истина;
				КонецЕсли;
				
				Если НЕ СкопированыФайлы(Ложь, Ложь, Истина) Тогда
					Сообщить("Не удалось скопировать файлы.");
					Возврат Истина;
				КонецЕсли;	
				ПутьКФайламАрхива = "";
				
				ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
				
				Возврат Истина;
			КонецЕсли;	
		Иначе
			Сообщить("У Контрагента обнаружилась просроченная задолженность. Для продолжения работы необходимо снять контроль ПДЗ.", СтатусСообщения.Внимание);
			Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	

	Возврат Ложь;

КонецФункции // ЕстьПДЗ()

Функция ЕстьПредоплата()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЕстьПредоплата", Истина);
	
	Если (ЭтотОбъект.Контрагент.ОсновнойДоговорКонтрагента.Предоплата 
		) // В условие добавлен реквизит заявки
		И  НЕ РольДоступна("РазрешитьУстанавливатьСтатусПредоплатаКонтрагенту") Тогда 
		Сообщить("Перевод заявки в статус <на вывод> отменен , заявка переводится в ""СчетНаПредоплату"", с контрагентом работаем по предоплате");
		
		НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_СчетНаПредоплату;
		
		//СтруктураВозвратаПечатьРаспечаток = ПечатьРаспечаток(Истина);
		
		//КомментарийРаспечаток = СтруктураВозвратаПечатьРаспечаток.Информация;
		
		Если НЕ СтатусПереведен(НовыйСтатусЗаявки, "") Тогда  //КомментарийРаспечаток
			Сообщить("Статус заявки не может быть изменен ЕстьПредоплата!",СтатусСообщения.Важное);
			Возврат Истина; //КАВ
		ИначеЕсли Филиал = Справочники.Филиалы.Москва Тогда //КАВ Филиал Москва
			//Письмо бухам
			ОтправитьПисьмоОПредварительномСчетеБух();
		КонецЕсли;
	
		Если НЕ СкопированыФайлы(Ложь, Ложь, Истина) Тогда
			Сообщить("Не удалось скопировать файлы.");
			Возврат Истина;
		КонецЕсли;	
		ПутьКФайламАрхива = "";
		
		ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
		
		Возврат Истина;
		
	КонецЕсли;  
	
	Возврат Ложь;
	
КонецФункции // ЕстьПредоплата()

//Процедура СкопироватьJpegи()
//	
//	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СкопироватьJpegи", Истина);
//	
//	ПутьJPEG = ПутьКФайлам + "\Jpeg";
//	МасФайлов = НайтиФайлы(ПутьJPEG, "*.*");
//	Если ЗначениеЗаполнено(Контрагент.ОС_ПапкаКонтрагента) И НЕ МасФайлов.Количество() = 0 Тогда 
//		НомерПапки = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
//		ПапкаЗаказа = Контрагент.ОС_ПапкаКонтрагента + "\Arhive\" + НомерПапки;
//		СоздатьКаталог(ПапкаЗаказа);
//		Каталог = Новый Файл(ПапкаЗаказа);
//		Если Каталог.Существует() Тогда
//			Слеш = "\";
//			Счетчик = 0;
//			Для Каждого НФайл ИЗ МасФайлов Цикл 
//				Попытка
//					КопироватьФайл(НФайл.ПолноеИмя, ПапкаЗаказа + Слеш + НФайл.Имя);
//					ОжидаемыйФайл2 = новый файл(ПапкаЗаказа + Слеш + НФайл.Имя);
//					Если Не    ОжидаемыйФайл2.Существует() Тогда
//						Сообщить("После копирование не найден : "+ПапкаЗаказа + Слеш + НФайл.Имя);
//					Иначе
//						Счетчик = Счетчик + 1;
//					КонецЕсли;
//				Исключение
//					Сообщить("Не удалось скопировать файл : "+ПапкаЗаказа + Слеш + НФайл.Имя);
//				КонецПопытки
//			КонецЦикла;
//			Сообщить("Контрагенту " + Контрагент + " скопировано в папку " + НомерПапки + " - " + Счетчик + " файлов");
//		Иначе
//			Сообщить("Контрагенту " + Контрагент + " не создана папка " + НомерПапки);
//		КонецЕсли;	
//	КонецЕсли;	
//	
//КонецПроцедуры

Процедура ОтправитьНаОмГотовКОтгрузке(Тест = Ложь)
	
	Если Тест = Истина Тогда
		//Это тест наличия процедуры
		Возврат;
	КонецЕсли; 
	
	//Подставим основной договор
	Если НЕ Организация = Контрагент.ОсновнойДоговорКонтрагента.Организация Тогда
		Организация = Контрагент.ОсновнойДоговорКонтрагента.Организация;
	КонецЕсли;
	Если ЕстьПДЗ() Тогда
		Возврат;
	КонецЕсли;
	Если Организация = Справочники.Организации.НайтиПоКоду("000000001") Тогда
		Предупреждение("Отгрузка от организации ""АртЛоджик"" запрещена! Измените организацию.");
		Возврат;
	КонецЕсли;
	Если ОС_ТолькоТовары Тогда
		Отказ = Ложь;
		ТекстСообщение = "";
		Если Не ЗначениеЗаполнено(СпособОплаты) Тогда
			Отказ = Истина;
			ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Способ оплаты"".", ТекстСообщение + "
			|Не заполнено поле ""Способ оплаты"".");
		КонецЕсли;
		Если ДатаОтгрузки < НачалоДня(Дата) Тогда
			ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Дата отгрузки меньше  даты документа", ТекстСообщение + "
			|Дата отгрузки меньше  даты документа");
			Отказ = Истина;
		КонецЕсли;
		Если Отказ Тогда
			Сообщить(ТекстСообщение);
			Возврат;
		КонецЕсли;
		НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке;	
		Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
			Сообщить("Статус заявки не может быть изменен ОтправитьНаГотовКОтгрузке!",СтатусСообщения.Важное);
		Иначе
			ГруппаСкотчи = Справочники.Номенклатура.НайтиПоКоду("00000000937");
			ТаблТовары = ЭтотОбъект.ОС_Товары.Выгрузить();
			МассивДляУдаления = Новый Массив;
			Для каждого СтрокаТаблТовары Из ТаблТовары Цикл
				Если НЕ СтрокаТаблТовары.Номенклатура.ПринадлежитЭлементу(ГруппаСкотчи) Тогда
					МассивДляУдаления.Добавить(СтрокаТаблТовары);
				КонецЕсли; 
			КонецЦикла; 
			Для каждого СтрокаТаблТовары Из МассивДляУдаления Цикл
				ТаблТовары.Удалить(СтрокаТаблТовары);
			КонецЦикла; 
			Если ТаблТовары.Количество() > 0 Тогда
				Если ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоВыставитьСчет, "Тип") = Неопределено Тогда
					Сеансы       = ПолучитьСеансыИнформационнойБазы();
					НомерСеанса  = НомерСеансаИнформационнойБазы();
					ТекущийСеанс = Неопределено;
					Для Каждого Сеанс Из Сеансы Цикл
						Если Сеанс.НомерСеанса = НомерСеанса Тогда
							ТекущийСеанс = Сеанс;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
					Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
					НовоеЗадание = ОтложенныеЗадания.Добавить();
					НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
					НовоеЗадание.ВыполнятьПосле 	= "";
					НовоеЗадание.ВыполнятьНаСервере = Истина;
					НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
					НовоеЗадание.НомерСеанса		= Идентификатор;
					НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
					НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоВыставитьСчет;
					НовоеЗадание.СтрокаПараметров 	= "";
					Сообщить("Отправка письма по о необходимости выставить счет отложена до момента записи Заявки");
				КонецЕсли;
			КонецЕсли; 
			
			ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
			
		КонецЕсли;
		Возврат;
	КонецЕсли;	
	
	Если НЕ ВсеНеобходимыеПоляЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОС_Астролон И НЕ ЗначениеЗаполнено(МонтажНаАстролон) Тогда
		Сообщить("Заполните поле ""Монтаж на астролон""");
		Возврат;
	КонецЕсли;
	
	//Рефакторинг
	ТаблицаЕстьНезаполненные = АО_ОбщийМодуль.ЕстьНеЗаполненыеЯчейкиТабличныхЧастей(Ссылка, ОС_Астролон);
	
	Если ТипЗнч(ТаблицаЕстьНезаполненные) = Тип("Булево") И ТаблицаЕстьНезаполненные Тогда
		Сообщить("Заполните табличную часть ""Параметры печати""!");
		Возврат;
	КонецЕсли;	
	
	Если НЕ ТабличныеЧастиЗаполнены(ТаблицаЕстьНезаполненные) Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Обработал_Заказ) Тогда
		Обработал_Заказ = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке;	
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
		Сообщить("Статус заявки не может быть изменен ОтправитьНаГотовКОтгрузке 2!",СтатусСообщения.Важное);
	КонецЕсли;
	
	//СкопироватьJpegи();
	ОтложенныеЗаданияСкопироватьJPEG();
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры	

//////////////////////////////////////////////////////
// ГРУППА ОТОБРАЖЕНИЯ ЭЛЕМЕНТОВ                     //
//////////////////////////////////////////////////////

Процедура ОбновлениеОтображенияЭлементовФормы()

	ТекущийСтатусЗаявки 	= АО_ОбщийМодуль.ПолучитьТекущийСтатусЗаявки(Ссылка, ТекущаяДата());
	ВремяТекущийСтатусЗаявки = АО_ОбщийМодуль.ПолучитьВремяТекущийСтатусЗаявки(Ссылка, ТекущаяДата());
	ЭлементыФормы.СтатусЗаявки.Заголовок = Строка(ТекущийСтатусЗаявки)+" "+?(ЗначениеЗаполнено(Дизайнер),Строка(Дизайнер),"");
	
	Если ЭтотОбъект.Заблокирован() Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЮГ_РазрешенныеПереходыМеждуСтатусами.СчетчикПереходов КАК СчетчикПереходов,
		|	ЮГ_РазрешенныеПереходыМеждуСтатусами.Статус_На,
		|	ЮГ_РазрешенныеПереходыМеждуСтатусами.Статус_С
		|ПОМЕСТИТЬ ВТ_Разрешенные
		|ИЗ
		|	РегистрСведений.ЮГ_РазрешенныеПереходыМеждуСтатусами КАК ЮГ_РазрешенныеПереходыМеждуСтатусами
		|ГДЕ
		|	ЮГ_РазрешенныеПереходыМеждуСтатусами.Статус_С = &Статус_С
		|	И ЮГ_РазрешенныеПереходыМеждуСтатусами.Разрешен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Разрешенные.СчетчикПереходов,
		|	ВТ_Разрешенные.Статус_На,
		|	ВТ_Разрешенные.Статус_С
		|ИЗ
		|	ВТ_Разрешенные КАК ВТ_Разрешенные";
		
		Запрос.УстановитьПараметр("Статус_С", ЭтотОбъект.АО_СтатусыЗаявки);
		ТаблРазрешенныеПереходы = Запрос.Выполнить().Выгрузить();
		
		ПереходыРазрешены = Истина;
		
		Если ТаблРазрешенныеПереходы.Количество() = 0 Тогда
			ПереходыРазрешены = Ложь;
		КонецЕсли; 
		
		Если ПереходыРазрешены Тогда
			НЗ = РегистрыСведений.ЮГ_УсловияПереходовПоСтатусам.СоздатьНаборЗаписей();
			НЗ.Отбор.ТипСтатуса.Установить(Перечисления.ЮГ_ТипыСтатусовЗаявки.Статус_С);
			НЗ.Отбор.СтатусЗаявки.Установить(ЭтотОбъект.АО_СтатусыЗаявки);
			НЗ.Прочитать();
			Если НЗ.Количество() > 0 Тогда
				Запись = НЗ[0];
				Если НЕ ЗначениеЗаполнено(Запись.УниверсальноеУсловие) Тогда
					//Нет условия - переход разрешен
				Иначе
					//Проверяем условие
					ВозврСтруктура = ЮГ_УниверсальныйМеханизмУсловийПоКритериям.ПроверитьУсловиеПоКритериям(Запись.УниверсальноеУсловие,, ЭтотОбъект);
					Если ЗначениеЗаполнено(ВозврСтруктура.ТекстОшибок) Тогда
						ТекстСообщения = "Ошибки проверки условий управления реквизитами формы для Статус_С: " + Запись.УниверсальноеУсловие + ": " + ВозврСтруктура.ТекстОшибок;
						Сообщить(ТекстСообщения);
						бб1с_Логирование.ЗаписатьВЛог("" + Ссылка + ". Заполнение меню доступных статусов ""На"".", ТекстСообщения);
						ПереходыРазрешены = Ложь;
					Иначе
						Если ВозврСтруктура.Результат = Истина Тогда
							//Запрет в УниверсальноеУсловие
							ПереходыРазрешены = Ложь;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		УдалитьКнопки();
		
		Если ПереходыРазрешены Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВТ_Разрешенные.Статус_На КАК Статус_На,
			|	ВТ_Разрешенные.СчетчикПереходов КАК СчетчикПереходов,
			|	ЮГ_УсловияПереходовПоСтатусам.УниверсальноеУсловие КАК УниверсальноеУсловие
			|ИЗ
			|	ВТ_Разрешенные КАК ВТ_Разрешенные
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЮГ_УсловияПереходовПоСтатусам КАК ЮГ_УсловияПереходовПоСтатусам
			|		ПО ВТ_Разрешенные.Статус_На = ЮГ_УсловияПереходовПоСтатусам.СтатусЗаявки
			|			И (ЮГ_УсловияПереходовПоСтатусам.ТипСтатуса = ЗНАЧЕНИЕ(Перечисление.ЮГ_ТипыСтатусовЗаявки.Статус_На))
			|
			|УПОРЯДОЧИТЬ ПО
			|	СчетчикПереходов УБЫВ";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.УниверсальноеУсловие = NULL Тогда
					//Нет записи - переход разрешен
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.УниверсальноеУсловие) Тогда
					//Нет условия - переход разрешен
				Иначе
					//Проверяем условие
					ВозврСтруктура = ЮГ_УниверсальныйМеханизмУсловийПоКритериям.ПроверитьУсловиеПоКритериям(Выборка.УниверсальноеУсловие,, ЭтотОбъект);
					Если ЗначениеЗаполнено(ВозврСтруктура.ТекстОшибок) Тогда
						ТекстСообщения = "Ошибки проверки условий управления реквизитами формы для Статус_На: " + Выборка.УниверсальноеУсловие + ": " + ВозврСтруктура.ТекстОшибок;
						Сообщить(ТекстСообщения);
						бб1с_Логирование.ЗаписатьВЛог("" + Ссылка + ". Заполнение меню доступных статусов ""На"".", ТекстСообщения);
						//Пропускаем
						Продолжить;
					Иначе
						Если ВозврСтруктура.Результат = Истина Тогда
							//Запрет в УниверсальноеУсловие
							Продолжить;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				Если фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Найти(Выборка.Статус_На, "СтатусЗаявки") = Неопределено Тогда
					ТекстСообщения = "Ошибка формирования подменю ""Передать заявку"": нет процедуры для перехода на статус: """ + Выборка.Статус_На + """";
					Сообщить(ТекстСообщения);
					бб1с_Логирование.ЗаписатьВЛог("" + Ссылка + ". Заполнение меню доступных статусов ""На"".", ТекстСообщения);
					Продолжить;
				КонецЕсли; 
				ЮГ_ДобавитьКнопкуПередатьЗаявку(Выборка.Статус_На);
			КонецЦикла; 
		КонецЕсли;	
	КонецЕсли;
	
	Если
		(
			(
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВРаботе
				ИЛИ
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.Отрипован
				ИЛИ
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.Ошибка
				ИЛИ
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ЮГ_ВыполненCaT
			)
			И
			(
				ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Менеджеры"
				ИЛИ
				ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Технологи"
				ИЛИ
				ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа"
				ИЛИ
				ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Приемка"
			)
		ИЛИ
			(
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.Отрипован
				ИЛИ
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ЮГ_ВыполненCaT
				ИЛИ
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВРаботе
				ИЛИ
				ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_Проверен
			)
			И
			(
				ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Корректоры"
				ИЛИ
				ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Дизайнеры"
			)
		)
	Тогда
		ЭлементыФормы.КнОтправитьНаРИП.Видимость   = Истина;
		ЭлементыФормы.КнОтправитьНаРИП.Доступность = Истина;
	КонецЕсли;	
	//Доступность содержания заказа
	Если НЕ ЭтоНовый() Тогда 
		ЭлементыФормы.СодержаниеЗаказа.Колонки.Длина.Доступность  = Ложь;
		ЭлементыФормы.СодержаниеЗаказа.Колонки.Ширина.Доступность = Ложь;
		ЭлементыФормы.СодержаниеЗаказа.Колонки.Длина.Доступность  = Истина;
		ЭлементыФормы.СодержаниеЗаказа.Колонки.Ширина.Доступность = Истина;
	КонецЕсли;
	
	Если
		РольДоступна("ПолныеПрава")
		ИЛИ
		РольДоступна("АО_УправлениеЗаявкамиАдмин")
	Тогда
		ЭлементыФормы.СформироватьПараметрыРИП.Доступность = Истина;
		ЭлементыФормы.ТПИсторияИзменений.Доступность = Истина;
		ЭлементыФормы.ТПИсторияИзменений.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если РольДоступна("ОС_Приемка") ИЛИ РольДоступна("Технолог") Тогда
		ЭлементыФормы.ТПИсторияИзменений.ТолькоПросмотр = Ложь;
	Иначе
		ЭлементыФормы.ТПИсторияИзменений.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	//Возможность админу сменить статус заявки в ручном режиме,
	Если СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "1С" Тогда
		ЭлементыФормы.АО_СтатусыЗаявки.Видимость = Истина;
		ЭлементыФормы.АО_СтатусыЗаявки.ТолькоПросмотр = Ложь;
		ЭлементыФормы.АО_СтатусыЗаявки.Доступность = Истина;
	КонецЕсли;	
	
	Если АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВПроизводство 
		ИЛИ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке
		ИЛИ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаВывод
		ИЛИ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтгружен
		ИЛИ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.Отгравировано
		ИЛИ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ПринятоВПроизводство Тогда		
		ЭлементыФормы.КнОтправитьНаРИП.Видимость   = Ложь;
		ЭлементыФормы.КнОтправитьНаРИП.Доступность = Ложь;
	КонецЕсли;	
	
	//Ограничим доступность для заявки с признаком "Услуги"
	ЭлементыФормы.СодержаниеЗаказа.ТолькоПросмотр = ОС_Услуги;
	ЭлементыФормы.КнДобавитьФайлы.Доступность = НЕ ОС_Услуги;
	ЭлементыФормы.КоманднаяПанель6.Доступность = НЕ ОС_Услуги;
	ЭлементыФормы.ТабличноеПоле1.ТолькоПросмотр = ОС_Услуги;
	ЭлементыФормы.ТабличноеПоле2.ТолькоПросмотр = ОС_Услуги;
	ЭлементыФормы.СодержаниеМонтажа.ТолькоПросмотр = ОС_Услуги;
	ЭлементыФормы.СводныйЗаказ.ТолькоПросмотр = ОС_Услуги;
	
	Если ТекущийСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_СчетНаПредоплату Тогда
		ЭлементыФормы.СодержаниеЗаказа.ТолькоПросмотр = Истина;
		ЭлементыФормы.СодержаниеМонтажа.ТолькоПросмотр = Истина;
		ЭлементыФормы.Услуги.ТолькоПросмотр = Истина;
		ЭлементыФормы.КнДобавитьФайлы.Доступность = Ложь;
		ЭлементыФормы.КнОтправитьНаРИП.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанель6.Доступность = Ложь;
		ЭлементыФормы.ТабличноеПоле1.ТолькоПросмотр = Истина;
		ЭлементыФормы.ТабличноеПоле2.ТолькоПросмотр = Истина;
		ЭлементыФормы.СводныйЗаказ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//Кнопки ДФС
	ЭлементыФормы.ИмпортLenВDFS.ЦветФонаКнопки = ?(ОС_ИмпортированВДФС, WebЦвета.ЗеленаяЛужайка,  WebЦвета.Лосось);
	ЭлементыФормы.ЭкспортLenИзDFS.ЦветФонаКнопки = ?(ОС_ЭкспортированИЗДФС, WebЦвета.ЗеленаяЛужайка,  WebЦвета.Лосось);
	ЭлементыФормы.LenToTiff.ЦветФонаКнопки = ?(ОС_КонверированДФС, WebЦвета.ЗеленаяЛужайка,  WebЦвета.Лосось);
	
	Если Контрагент.ОС_УказыватьДоработкуВТЧ И Доработка = Справочники.РепроВидыДоработок.НайтиПоКоду("000000006") Тогда //С Доработкой
		ЭлементыФормы.СодержаниеЗаказа.Колонки.ОС_Доработка.Видимость = Истина;
		ЭлементыФормы.СодержаниеЗаказа.Колонки.ОС_Доработка.Доступность = Истина;
		ЭлементыФормы.УстановитьВсеДоработки.Видимость = Истина;
	Иначе
		ЭлементыФормы.СодержаниеЗаказа.Колонки.ОС_Доработка.Видимость = Ложь;
		ЭлементыФормы.СодержаниеЗаказа.Колонки.ОС_Доработка.Доступность = Ложь;
		ЭлементыФормы.УстановитьВсеДоработки.Видимость = Ложь;
	КонецЕсли;
	
	Если СТРДлина(ЭлементыФормы.ПолеВвода8.Значение) > 500 Тогда
		ЭлементыФормы.ПолеВвода8.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
	Если СТРДлина(ЭлементыФормы.ПримечанияПоЗаказу.Значение) > 500 Тогда
		ЭлементыФормы.ПримечанияПоЗаказу.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
	Если СТРДлина(ЭлементыФормы.ПолеВвода10.Значение) > 500 Тогда
		ЭлементыФормы.ПолеВвода10.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
	Если СТРДлина(ЭлементыФормы.ОС_КомментарийИнтернет.Значение) > 500 Тогда
		ЭлементыФормы.ОС_КомментарийИнтернет.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	КонецЕсли;
		
	Если РольДоступна("Курьер") И АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке Тогда
		Если ЭтаФорма.ТолькоПросмотр Тогда
			ЭтаФорма.ТолькоПросмотр = Ложь;
			//Вдруг уже эмулировалось закрытие - пытаемся снять, иначе зафиксируется все закрытое
			ЮГ_ЭмуляцияТолькоПросмотр(Ложь);
			ЮГ_ЭмуляцияТолькоПросмотр(Истина);
		КонецЕсли; 
		ЭлементыФормы.АдресДоставки.ТолькоПросмотр = Ложь;
		ЭлементыФормы.Время.ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	Если ЭтотОбъект.ЗаявкаПоступилаНаВывод() Тогда
		ЭлементыФормы.ОС_Производство.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ОС_Производство.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЮГ_РазрешитьДоступК_ДатаОтгрузки()
	
	//Проверяем только при открытии. Если что-то изменилось, что должно пользователю открыть доступ, то он должен закрыть документ и открыть его заново.
	
	РазрешитьДоступДатаОтгрузки = АО_СтатусыЗаявки <> Перечисления.АО_СтатусыЗаявки.ОмОтгружен;
	Если РазрешитьДоступДатаОтгрузки Тогда
		РазрешитьДоступДатаОтгрузки = ЭтаФорма.ТолькоПросмотр ИЛИ ЭлементыФормы.АдресДоставки.ТолькоПросмотр ИЛИ ЭлементыФормы.ДатаОтгрузки.ТолькоПросмотр;
		Если РазрешитьДоступДатаОтгрузки Тогда
			Если РольДоступна("Доставка")		//Логист
				ИЛИ РольДоступна("ОС_Приемка")		//Приемка
				ИЛИ ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа"	//Риповка, Риповка Руководитель
				Тогда
				//Оставляем разрешение
			Иначе
				РазрешитьДоступДатаОтгрузки = Ложь;
			КонецЕсли; 
		КонецЕсли; 
		Если РазрешитьДоступДатаОтгрузки Тогда
			Если РольДоступна("Доставка") Тогда	//Логист
				//Безусловный доступ
			Иначе	//Для остальных - условия
				//Есть ли счет по заявке
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СчетНаОплатуПокупателюТовары.Ссылка
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				|ГДЕ
				|	СчетНаОплатуПокупателюТовары.ЗаявкаПокупателя = &ЗаявкаПокупателя
				|	И НЕ СчетНаОплатуПокупателюТовары.Ссылка.ПометкаУдаления
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	СчетНаОплатуПокупателю.Ссылка
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
				|ГДЕ
				|	СчетНаОплатуПокупателю.ла_ЗаявкаПокупателя = &ЗаявкаПокупателя
				|	И НЕ СчетНаОплатуПокупателю.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ЗаявкаПокупателя", Ссылка);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
					РазрешитьДоступДатаОтгрузки = Ложь;
					Сообщить("Реквизиты отгрузки закрыты для редактирования, потому что по заявке выписан счет.");
				КонецЕсли; 
				
				Если РазрешитьДоступДатаОтгрузки Тогда
					//Есть ли развозка по заявке
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	РазвозкаЗаказовРазвозка.Ссылка
					|ИЗ
					|	Документ.РазвозкаЗаказов.Развозка КАК РазвозкаЗаказовРазвозка
					|ГДЕ
					|	РазвозкаЗаказовРазвозка.ЗаявкаПокупателя = &ЗаявкаПокупателя
					|	И НЕ РазвозкаЗаказовРазвозка.Ссылка.ПометкаУдаления";
					
					Запрос.УстановитьПараметр("ЗаявкаПокупателя", Ссылка);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Если Выборка.Следующий() Тогда
						РазрешитьДоступДатаОтгрузки = Ложь;
						Сообщить("Реквизиты отгрузки закрыты для редактирования, потому что заявка уже в развозке.");
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЕсли; 
		Если РазрешитьДоступДатаОтгрузки Тогда
			Если ЭтаФорма.ТолькоПросмотр Тогда
				ЭтаФорма.ТолькоПросмотр = Ложь;
				ЮГ_ЭмуляцияТолькоПросмотр(Ложь);
				ЮГ_ЭмуляцияТолькоПросмотр(Истина);
			КонецЕсли; 
			ЭлементыФормы.АдресДоставки.ТолькоПросмотр = Ложь;
			ЭлементыФормы.ДатаОтгрузки.ТолькоПросмотр = Ложь;
			ЭлементыФормы.КнопкаАдресДоставкиПоУмолчанию.Доступность = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура УдалитьКнопку(СтатусЗаявкиПарам)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.УдалитьКнопку", Истина);
	
	ИмяКнопки = СтатусЗаявкиПарам.Метаданные().ЗначенияПеречисления.Получить(Перечисления[СтатусЗаявкиПарам.Метаданные().Имя].Индекс(СтатусЗаявкиПарам)).Имя;
	ИмяКнопки = "КнопкаОтправитьНа" + ИмяКнопки;
	Кнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Найти(ИмяКнопки);
	ИндексКнопки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Индекс(Кнопка);
	Если НЕ ИндексКнопки = - 1 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Удалить(ИндексКнопки); 
	КонецЕсли;
	
КонецПроцедуры // УдалитьКнопку()

Процедура УдалитьКнопки()	
	Пока ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Количество() > 0 Цикл
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Удалить(0);
    КонецЦикла;
    фЮГ_КнопкиПередатьЗаявкуУдалены = Истина;
КонецПроцедуры

Процедура ДействияФормыИстория(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыИстория", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АО_ИсторияСтатусовЗаявок.Период КАК Дата,
	|	АО_ИсторияСтатусовЗаявок.Статус_На КАК УстановленСтатус,
	|	АО_ИсторияСтатусовЗаявок.Пользователь КАК Пользователь_Кто,
	|	АО_ИсторияСтатусовЗаявок.Пользователь_кому КАК Пользователь_Кому,
	|	АО_ИсторияСтатусовЗаявок.Комментарий
	|ИЗ
	|	РегистрСведений.АО_ИсторияСтатусовЗаявок КАК АО_ИсторияСтатусовЗаявок
	|ГДЕ
	|	АО_ИсторияСтатусовЗаявок.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		Табдок.Очистить();
		
		Макет = ЭтотОбъект.ПолучитьМакет("История");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьИстория = Макет.ПолучитьОбласть("История");
		
		ОбластьШапка.Параметры.Ссылка = ЭтотОбъект.Ссылка;
		ТабДок.Вывести(ОбластьШапка);
		
		Для каждого стр Из Результат Цикл
			ОбластьИстория.Параметры.Заполнить(стр);
			ТабДок.Вывести(ОбластьИстория);
		КонецЦикла; 
		
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Показать();	 
	Иначе
		Предупреждение("Нет истории.", 5, "Ошибка"); 
	КонецЕсли;
	
КонецПроцедуры

Процедура VIP_РАССТЕРЛ()
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.VIP_РАССТЕРЛ", Истина);
	
	Если VIP_заказ Тогда
		ЭлементыФормы.VIP_РАССТЕРЛ.Заголовок = "VIP";
	Иначе
		ЭлементыФормы.VIP_РАССТЕРЛ.Заголовок = "";
	КонецЕсли;
	ЭлементыФормы.VIP_РАССТЕРЛ1.Заголовок = ЭлементыФормы.VIP_РАССТЕРЛ.Заголовок;
	
	ЭлементыФормы.VIP_РАССТЕРЛ2.Заголовок = "";
	Если Контрагент.ОсновнойДоговорКонтрагента.Предоплата 
		Тогда
		ЭлементыФормы.VIP_РАССТЕРЛ2.Заголовок = "Предоплата";
	КонецЕсли;
	
	Если ЕстьПретензия() Тогда
		ЭлементыФормы.VIP_РАССТЕРЛ2.Заголовок = "ПРЕТЕНЗИЯ";
	КонецЕсли;
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	//Проверка на наличие не выполненных отложенных заданий по данному документу
	ЗапросОтложенныеЗадания = Новый Запрос;
	ЗапросОтложенныеЗадания.УстановитьПараметр("Документ", Ссылка);
	ЗапросОтложенныеЗадания.Текст = 
	"ВЫБРАТЬ
	|	ОтложенныеЗадания.Документ,
	|	ОтложенныеЗадания.НомерЗадания,
	|	ОтложенныеЗадания.Тип,
	|	ОтложенныеЗадания.Выполняется КАК Выполняется,
	|	ОтложенныеЗадания.ИмяКомпьютера,
	|	ОтложенныеЗадания.ВыполнятьНаСервере
	|ИЗ
	|	РегистрСведений.ОтложенныеЗадания КАК ОтложенныеЗадания
	|ГДЕ
	|	ОтложенныеЗадания.Документ = &Документ";
	СписокОтложенныхЗаданий = ЗапросОтложенныеЗадания.Выполнить().Выгрузить();
	ОбщийТекстЗаданий = "";
	ТекстЗаданийНеВыполняется = "";
	ТекстЗаданийВыполняется = "";
	ТекстЗаданийОшибка = "";
	Для Каждого Задание Из СписокОтложенныхЗаданий Цикл
		Если Задание.Выполняется = Перечисления.ОтложенныеЗаданияВыполняется.НеВыполняется Тогда
			Если Задание.ВыполнятьНаСервере Тогда
				ТекстЗаданийНеВыполняется = ТекстЗаданийНеВыполняется + Задание.Тип + ", номер " + Задание.НомерЗадания + Символы.ПС;	
			Иначе
				ТекстЗаданийНеВыполняется = ТекстЗаданийНеВыполняется + Задание.Тип + ", номер " + Задание.НомерЗадания +  ", запущено с компьютера " + Задание.ИмяКомпьютера + Символы.ПС;
			КонецЕсли;
		ИначеЕсли Задание.Выполняется = Перечисления.ОтложенныеЗаданияВыполняется.Выполняется Тогда
			ТекстЗаданийВыполняется = ТекстЗаданийВыполняется + Задание.Тип + ", номер " + Задание.НомерЗадания +  Символы.ПС;
		ИначеЕсли Задание.Выполняется = Перечисления.ОтложенныеЗаданияВыполняется.Ошибка Тогда
			ТекстЗаданийОшибка = ТекстЗаданийОшибка + Задание.Тип + ", номер " + Задание.НомерЗадания +  Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если ТекстЗаданийНеВыполняется <> "" Тогда
		ТекстЗаданийНеВыполняется = "По данному документу существуют отложенные задания, выполнение которых не начато. Дождитесь окончания выполнения заданий (для клиентских заданий потребуется наличие сеанса с компьютера, который его запустил): " + Символы.ПС + ТекстЗаданийНеВыполняется + Символы.ПС;
	КонецЕсли;
	Если ТекстЗаданийВыполняется <> "" Тогда
		ТекстЗаданийВыполняется = "По данному документу существуют выполняющиеся отложенные отложенные задания. Дождитесь окончания выполнения заданий: " + Символы.ПС + ТекстЗаданийВыполняется;
	КонецЕсли;
	Если ТекстЗаданийОшибка <> "" Тогда
		ТекстЗаданийОшибка = "ВНИМАНИЕ! ПО ДАННОМУ ДОКУМЕНТУ СУЩЕСТВУЮТ ОТЛОЖЕННЫЕ ЗАДАНИЯ, ЗАВЕРШИВШИЕСЯ С ОШИБКОЙ! НЕВОЗМОЖНО ОТКРЫТЬ ДОКУМЕНТ! СРОЧНО ОБРАТИТЕСЬ К СИСТЕМНОМУ АДМИНИСТРАТОРУ! " + Символы.ПС + ТекстЗаданийОшибка + Символы.ПС;
	КонецЕсли;
	ОбщийТекстЗаданий = ТекстЗаданийОшибка + ТекстЗаданийНеВыполняется + ТекстЗаданийВыполняется;
	Если ОбщийТекстЗаданий <> "" Тогда
		Предупреждение(ОбщийТекстЗаданий);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//ОТКРЫТИЕ СТАРОЙ ФОРМЫ
	Если НЕ ЭтоНовый() И (СтараяФормаАстролона ИЛИ Дата < '20191009') Тогда
		СтараяФорма = Ссылка.ПолучитьФорму("ФормаДокументаСтарая");
		СтараяФорма.Открыть();
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ОС_ТолькоТовары Тогда
		Если
			НЕ
			(
				РольДоступна("ПолныеПрава") 
				ИЛИ
				РольДоступна("Бухгалтер") 
				ИЛИ
				РольДоступна("Технолог")
			)
		Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	//Механизм управления реквизитами форм
	ЮГ_УправлениеРеквизитамиФормКлиент.ОбработатьУправлениеРеквизитамиФормОбычных(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭтотОбъект.Заблокировать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Комп = Найти(ТекстОшибки, "компьютер");
		Компьютер = Прав(ОписаниеОшибки(), СтрДлина(ТекстОшибки) - Комп - 10);
		Текст = Строка(ЭтотОбъект) + Символы.ПС
			  + "уже открыта на коммпьютере: " + Компьютер + Символы.ПС
			  + Символы.ПС
			  + "Изменения не могут быть выполнены" + Символы.ПС
			  + Символы.ПС
			  + "Для просмотра заявки нажмите ОК" + Символы.ПС
			  + Символы.ПС
			  + "Изменения будут возможны, если" + Символы.ПС
			  + "                          1) Закрыть заявку на указанном компьютере" + Символы.ПС
			  + "                          2) Закрыть/Открыть заявку на текущем компьютере";
		Предупреждение(Текст);
		ЮГ_ЭмуляцияТолькоПросмотр();
		Возврат;
	КонецПопытки;

	Если
		(
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаДп
			ИЛИ
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_Проверен
			ИЛИ
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ЮГ_ВозвратНаДоработку
		)
	Тогда
		Если ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Дизайнеры" Тогда
			Если Вопрос("Установить статус ""В работе""?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ОтправитьНаОмВРаботе();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли
		АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_ЗагруженFTP
	Тогда
		Если ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа" Тогда
			Если Вопрос("Установить статус ""В работе""?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Обработал_Заказ = глЗначениеПеременной("глТекущийПользователь");
				Если
					НЕ Контрагент.Пустая()
					И
					НЕ Контрагент.ЮГ_НеПроставлятьВЗаявкеДоработкуПоУмолчанию
				Тогда
					Доработка = Справочники.РепроВидыДоработок.БезДоработки;
				КонецЕсли; 
				Если ЗначениеЗаполнено(Контрагент.ОС_Производство) Тогда
					ОС_Производство = Контрагент.ОС_Производство;
				КонецЕсли;
				ОтправитьНаОмВРаботе();
			КонецЕсли;
        Иначе
			ЮГ_ЭмуляцияТолькоПросмотр();
			Возврат;
		КонецЕсли;
	ИначеЕсли
		АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_ЗагруженССайта
	Тогда
		Если ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа" Тогда
			Если Вопрос("Установить статус ""В работе""?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Обработал_Заказ = глЗначениеПеременной("глТекущийПользователь");
				Если
					НЕ Контрагент.Пустая()
					И
					НЕ Контрагент.ЮГ_НеПроставлятьВЗаявкеДоработкуПоУмолчанию
				Тогда
					Доработка = Справочники.РепроВидыДоработок.БезДоработки;
				КонецЕсли; 
				Если ЗначениеЗаполнено(Контрагент.ОС_Производство) Тогда
					ОС_Производство = Контрагент.ОС_Производство;
				КонецЕсли;
				Филиал = Справочники.Филиалы.Москва;
				СпособОплаты = Перечисления.ВидыДенежныхСредств.Безналичные;
				ОтправитьНаОмВРаботе();
			КонецЕсли;
        Иначе
			ЮГ_ЭмуляцияТолькоПросмотр();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КонтрагентДоИзменения = Контрагент;
	
	НаименованиеБазоваяНаименованиеХвостовая = ";";
	Файл = Новый Файл(ПутьКФайлам + "\tmp\Planki.txt");
	Если ЗначениеЗаполнено(ПутьКФайлам) И Файл.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста;
		Попытка
			ЧтениеТекста.Открыть(Файл.ПолноеИмя);
			НаименованиеБазоваяНаименованиеХвостовая = ЧтениеТекста.ПрочитатьСтроку();
		Исключение
			Сообщить("ОШИБКА! Не удалось прочитать файл Planki.txt!");
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	СтрокаЛогФайлТехИнфо = "";
	Файл = Новый Файл(ПутьКФайламТиф + "\info.txt");
	Если ЗначениеЗаполнено(ПутьКФайламТиф) И Файл.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста;
		Попытка
			ЧтениеТекста.Открыть(Файл.ПолноеИмя);
			СтрокаЛогФайлТехИнфо = ЧтениеТекста.ПрочитатьСтроку();
		Исключение
			Сообщить("ОШИБКА! Не удалось прочитать файл info.txt!");
			Отказ = Истина;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	СтараяДатаОтгрузки  = ДатаОтгрузки;
	СтароеВремяОтгрузки = Время;
	
КонецПроцедуры

Функция Значение_В_Интервале(Значение, ГраницаНиз,ГраницаВерх)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Значение_В_Интервале", Истина);
	
    Если (Значение >= ГраницаНиз) И (Значение <= ГраницаВерх) Тогда
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;
КонецФункции

Функция ПараметрыПроизводстваНеСоответствуютОграничениямКонтрагента()
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПараметрыПроизводстваНеСоответствуютОграничениямКонтрагента", Истина);
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
        Если ЭтотОбъект.ЭтоНовый() Тогда
            Возврат Ложь; //проверка не производится 
        Иначе
            Сообщить("Не выбран контрагент! Действие отменено.");
            Возврат Истина;
        КонецЕсли;
    КонецЕсли;
    Если НЕ ЗначениеЗаполнено(ТипФотополимера) ИЛИ (Контрагент.НовыеСепарации И НЕ ЗначениеЗаполнено(Ограничения))
        ИЛИ (Контрагент.НовыеСепарации И ЗначениеЗаполнено(ЛиниатураОптима))
        ИЛИ (НЕ Контрагент.НовыеСепарации И НЕ ЗначениеЗаполнено(ЛиниатураОптима))
        ИЛИ (НЕ Контрагент.НовыеСепарации И ЗначениеЗаполнено(Ограничения))
		ИЛИ НЕ ЗначениеЗаполнено(Печать)
        //ИЛИ
        //НЕ ЗначениеЗаполнено(СпособВыводаФорм) - потому что может быть не выбрано, зависит от ограничений
		// Не проверяем, потому что поля закрыты:
		//Экспонирование
		//Микроструктура
		//ОС_Стратегия
		//Линиатура
	Тогда
		Если
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтменен
			ИЛИ
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтгружен
			ИЛИ
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОС_ЗагруженFTP
			ИЛИ
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмЖдемИнфоОтКлиента
		Тогда
			Возврат Ложь;
        Иначе
            Ответ = Вопрос("Не указан Тип фотополимера или Ограничения или Вид печати! Все равно продолжить?", РежимДиалогаВопрос.ДаНет);
            Если Ответ = КодВозвратаДиалога.Да Тогда
                Возврат Ложь;
            Иначе
                Возврат Истина;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Если НЕ Контрагент.НовыеСепарации Тогда
        Сообщить("Контрагент по этой Заявке НЕ имеет признака НовыеСепарации. Проверка ограничений техпроцесса не производится!");
        Возврат Ложь;
    КонецЕсли;
	Если
		АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаВывод
		ИЛИ
		АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВПроизводство
		ИЛИ
		АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.Отгравировано
		ИЛИ
		АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке
		ИЛИ
		АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтгружен
	Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера КАК ТипФотополимера,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Печать КАК Печать,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование КАК Экспонирование,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура КАК Микроструктура
	|ПОМЕСТИТЬ ФотополимерыДляРекомбинации
	|ИЗ
	|	Справочник.Контрагенты.ОграниченияКонтрагентаПроцессы КАК КонтрагентыОграниченияКонтрагентаПроцессы
	|ГДЕ
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Ссылка = &Контрагент
	|	И КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры = ЗНАЧЕНИЕ(Справочник.ОС_ПроцессыЛиниатура.ПустаяСсылка)
	|	И КонтрагентыОграниченияКонтрагентаПроцессы.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
	|	И КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование = ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
	|	И КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура = ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера КАК ТипФотополимера,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Печать КАК Печать,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование КАК Экспонирование,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура КАК Микроструктура
	|ПОМЕСТИТЬ ВсеОстальноеДляРекомбинации
	|ИЗ
	|	Справочник.Контрагенты.ОграниченияКонтрагентаПроцессы КАК КонтрагентыОграниченияКонтрагентаПроцессы
	|ГДЕ
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Ссылка = &Контрагент
	|	И КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ОС_ПроцессыЛиниатура.ПустаяСсылка)
	|			ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
	|			ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
	|			ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера КАК ТипФотополимера,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Печать КАК Печать,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование КАК Экспонирование,
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура КАК Микроструктура
	|ИЗ
	|	Справочник.Контрагенты.ОграниченияКонтрагентаПроцессы КАК КонтрагентыОграниченияКонтрагентаПроцессы
	|ГДЕ
	|	КонтрагентыОграниченияКонтрагентаПроцессы.Ссылка = &Контрагент
	|	И КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ОС_ПроцессыЛиниатура.ПустаяСсылка)
	|			ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
	|			ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
	|			ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФотополимерыДляРекомбинации.ТипФотополимера,
	|	ВсеОстальноеДляРекомбинации.ГорячаяПапкаЛиниатуры,
	|	ВсеОстальноеДляРекомбинации.Печать,
	|	ВсеОстальноеДляРекомбинации.Экспонирование,
	|	ВсеОстальноеДляРекомбинации.Микроструктура
	|ИЗ
	|	ФотополимерыДляРекомбинации КАК ФотополимерыДляРекомбинации,
	|	ВсеОстальноеДляРекомбинации КАК ВсеОстальноеДляРекомбинации";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицыКомбинаций Из РезультатЗапроса Цикл
		Если
			СтрокаТаблицыКомбинаций.ТипФотополимера       					= ТипФотополимера
			И
			СтрокаТаблицыКомбинаций.ГорячаяПапкаЛиниатуры 					= Ограничения
			И
			(
				НЕ ЗначениеЗаполнено(СтрокаТаблицыКомбинаций.Печать) //может быть любым, но не может быть пустым - проверено раньше
				ИЛИ
				СтрокаТаблицыКомбинаций.Печать            					= Печать
			)
			И
			СтрокаТаблицыКомбинаций.Экспонирование        					= Экспонирование
			И
			СтрокаТаблицыКомбинаций.Микроструктура        					= Микроструктура
			И
			СтрокаТаблицыКомбинаций.ГорячаяПапкаЛиниатуры.Стратегия			= ОС_Стратегия
			И
			Строка(СтрокаТаблицыКомбинаций.ГорячаяПапкаЛиниатуры.Ruling)	= Линиатура
		Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Сообщить("Параметры производства не соответствуют ограничениям контрагента! Добавлена запись в лог.");
	бб1с_Логирование.ЗаписатьВЛог(Строка(ЭтотОбъект), "АО_ЗаявкаПокупателя.ФормаДокумента.ПараметрыПроизводстваНеСоответствуютОграничениямКонтрагента()");
	Возврат Ложь;
	
КонецФункции //ПараметрыПроизводстваНеСоответствуютОграничениямКонтрагента()

Функция ПроверитьГабариты()
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПроверитьГабариты", Истина);
	
	СтруктураВозврата = Новый Структура("ЕстьСодержаниеМонтажа,ЕстьОборудование,ГабаритыНорм", Ложь, Ложь, Ложь);
	
	Если СодержаниеМонтажа.Количество() = 0 Тогда
		//Нет монтажа на астралон - проверять нечего
		Возврат СтруктураВозврата;
	КонецЕсли; 
	СтруктураВозврата.ЕстьСодержаниеМонтажа = Истина;
	
	Техпроцесс = ЮГ_ПолучитьПараметрыПроцесса();	//Заполнили из соответствующей строки ТЧ элемента Об_Оборудование
	Если НЕ Техпроцесс.ДанныеИзОборудованияПолучены Тогда
		//Была ошибка получения параметров процесса
		Возврат СтруктураВозврата;
	КонецЕсли; 
	СтруктураВозврата.ЕстьОборудование = Истина;
	
	ТехпроцессЗаявки = Новый Структура("Об_МинШирина,Об_МаксШирина,Об_МинВысота,Об_ВысотаАстролона,Об_ммОтКрая,Об_ммОтХвоста,Об_ммОтБазы");
	ЗаполнитьЗначенияСвойств(ТехпроцессЗаявки, ЭтотОбъект);
	
    ГабаритыНорм    = Истина;
    ПроверитьВысоту = Ложь;
    ПроверитьШирину = Ложь;
    Если ЗначениеЗаполнено(Техпроцесс.Об_ВысотаАстролона) И СодержаниеМонтажа.Количество()>0 Тогда
        ПроверитьВысоту = Истина; //Проверяем ВысотуАстралона в интервале Высоты
    КонецЕсли;
    Если ЗначениеЗаполнено(Техпроцесс.Об_МаксШирина) И СодержаниеМонтажа.Количество()>0  Тогда
        ПроверитьШирину = Истина; //Проверяем Длину по планке в интервале Ширины
    КонецЕсли;
    Если ПроверитьШирину Или ПроверитьВысоту Тогда  // заполнено хотя бы одно значение габаритов оборудования
        Для каждого СтрСодержаниеМонтажа Из СодержаниеМонтажа Цикл
            Если ПроверитьШирину Тогда
                Если НЕ(Значение_В_Интервале(СтрСодержаниеМонтажа.Длина*10,Техпроцесс.Об_МинШирина,Техпроцесс.Об_МаксШирина)) Тогда
                    Сообщить("В Строке "+СтрСодержаниеМонтажа.НомерСтроки+" Длина не в габаритах оборудования!"); 
                    ГабаритыНорм = Ложь;
                КонецЕсли;
            КонецЕсли;
            Если ПроверитьВысоту Тогда
                Если НЕ(Значение_В_Интервале(СтрСодержаниеМонтажа.Ширина*10,Техпроцесс.Об_МинВысота,Техпроцесс.Об_ВысотаАстролона)) Тогда
                    Сообщить("В Строке "+СтрСодержаниеМонтажа.НомерСтроки+" Высота Астралона не в габаритах оборудования!"); 
                    ГабаритыНорм = Ложь;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
	КонецЕсли;     
	ТекстСообщения = "";
	Для каждого Элем Из ТехпроцессЗаявки Цикл
		Если Техпроцесс[Элем.Ключ] <> ТехпроцессЗаявки[Элем.Ключ] Тогда
			ТекстСообщения = ТекстСообщения + "
			| - " + Элем.Ключ;
		КонецЕсли; 
	КонецЦикла; 
	Если ТекстСообщения <> "" Тогда
		ТекстСообщения = "В Заявке изменены значения относительно выбранного элемента ""Оборудование"":" + ТекстСообщения;
		Сообщить(ТекстСообщения);
	КонецЕсли; 
	
	СтруктураВозврата.ГабаритыНорм = ГабаритыНорм;
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура ДоработкаПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДоработкаПриИзменении", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Репро_ЦеныСрезПоследних.Период КАК Период,
	|	Репро_ЦеныСрезПоследних.Контрагент,
	|	Репро_ЦеныСрезПоследних.Номенклатура,
	|	Репро_ЦеныСрезПоследних.Доработка,
	|	Репро_ЦеныСрезПоследних.Цена,
	|	Репро_ЦеныСрезПоследних.Валюта
	|ИЗ
	|	РегистрСведений.Репро_Цены.СрезПоследних(&Период, ) КАК Репро_ЦеныСрезПоследних
	|ГДЕ
	|	Репро_ЦеныСрезПоследних.Контрагент = &Контрагент
	|	И Репро_ЦеныСрезПоследних.Номенклатура = &Номенклатура
	|	И Репро_ЦеныСрезПоследних.Доработка = &Доработка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";

	Дораб = ?(Доработка.Пустая() Или не Найти(ТипФотополимера.ПолноеНаименование(),"Цветопробы") = 0, Справочники.РепроВидыДоработок.БезДоработки,Доработка);
	Запрос.УстановитьПараметр("Доработка", Дораб);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Номенклатура", ТипФотополимера);
	Запрос.УстановитьПараметр("НоменклатураПусто", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("Период", ДатаОтгрузки);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", ТипФотополимера.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("ЦеноваяГруппаПусто", Справочники.ЦеновыеГруппы.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидПродукта", Справочники.ВидыПродукции.Флексоформы);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 и не Доработка.Пустая() Тогда
		Предупреждение("Нет цены с доработкой: " + Доработка + " для контрагента: " + Контрагент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоАстролон()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЗаполнитьПоАстролон", Истина);
	
	Для Каждого Стр Из СодержаниеМонтажа Цикл
		Если Стр.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрСвод = СводныйЗаказ.Добавить();
		СтрСвод.ВидПродукта = Справочники.ВидыПродукции.Астролон;
		СтрСвод.Номенклатура = МонтажНаАстролон;
		СтрСвод.Длина = Стр.Длина;
		СтрСвод.Количество = Стр.Количество;
		СтрСвод.Площадь = Стр.Площадь;
		СтрСвод.Ширина = Стр.Ширина;
		СтрСвод.Примечание = Стр.Примечание;
		Если НЕ Контрагент.ОсновнойДоговорКонтрагента.ГруппироватьСтрокиВПФ Тогда
			СтрСвод.НазваниеЗаказа = НазваниеЗаказа +"; " + Стр.Цвет;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОС_ТолькоТовары Тогда
		Если АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ПустаяСсылка() Тогда
			НовыйСатус =  Перечисления.АО_СтатусыЗаявки.ОмВРаботе;
			КомментарийСтатуса = "";
			Если НЕ СтатусПереведен(НовыйСатус, КомментарийСтатуса) Тогда
				Сообщить("Статус заявки не может быть изменен ФормаПриЗаписи!",СтатусСообщения.Важное);
			КонецЕсли;
			ПоследняяДатаОбработкиОДП = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	Если 
		ЗначениеЗаполнено(КонтрагентДоИзменения)
		И КонтрагентДоИзменения <> Контрагент
	Тогда
		СвязанныеЗаявки = ПолучитьСвязанныеЗаявки();
		НовСтр = СвязанныеЗаявки.Добавить();
		НовСтр.Ссылка = Ссылка;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетНаОплатуПокупателюТовары.Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
		|ГДЕ
		|	СчетНаОплатуПокупателюТовары.ЗаявкаПокупателя В(&ЗаявкаПокупателя)
		|	И НЕ СчетНаОплатуПокупателюТовары.Ссылка.ПометкаУдаления
		|	И СчетНаОплатуПокупателюТовары.Ссылка.Контрагент <> &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АО_РасходМатериаловРасходМатериалов.Ссылка
		|ИЗ
		|	Документ.АО_РасходМатериалов.РасходМатериалов КАК АО_РасходМатериаловРасходМатериалов
		|ГДЕ
		|	АО_РасходМатериаловРасходМатериалов.ЗаявкаПокупателя В(&ЗаявкаПокупателя)
		|	И НЕ АО_РасходМатериаловРасходМатериалов.Ссылка.ПометкаУдаления
		|	И АО_РасходМатериаловРасходМатериалов.Ссылка.Контрагент <> &Контрагент";
		Запрос.УстановитьПараметр("ЗаявкаПокупателя", СвязанныеЗаявки);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ТаблицаПодчиненныхДокументов = Запрос.Выполнить().Выгрузить();
		Если ТаблицаПодчиненныхДокументов.Количество() > 0 Тогда
			ИсходящееПисьмо = Новый ИнтернетПочтовоеСообщение;
			ИсходящееПисьмо.Отправитель =  "auto@optimasmart.ru";
			ИсходящееПисьмо.Тема = "Изменение конрагента в " + ЭтотОбъект;
			
			тмпТекст = "ВНИМАНИЕ! В заявке " + ЭтотОбъект + " был изменен контрагент с " + КонтрагентДоИзменения + "
			|на " + Контрагент + " пользователем " + ПараметрыСеанса.ТекущийПользователь + ".
			|Необходимо изменить контрагента в следующих документах:";
			Для Каждого Документ Из ТаблицаПодчиненныхДокументов Цикл
				тмпТекст = тмпТекст + "
				|" + Документ.Ссылка;
			КонецЦикла;
			ИсходящееПисьмо.Тексты.Добавить(тмпТекст);
			
			ИсходящееПисьмо.Получатели.Добавить("finance@optimasmart.ru");
			ПисьмоОтправлено = ОС_ОтправкаПочты.ОтправитьПисьмо(ИсходящееПисьмо, , , Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВремяПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ВремяПриИзменении", Истина);
	
	VIP_РАССТЕРЛ();
КонецПроцедуры

Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДатаОтгрузкиПриИзменении", Истина);
	
	ТД = Новый ТекстовыйДокумент;
	VIP_РАССТЕРЛ();
	
	//Документ которым она отгрузилась?
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКДоставкеОстаткиИОбороты.Регистратор
	|ИЗ
	|	РегистрНакопления.ДокументыКДоставке.ОстаткиИОбороты(, , Регистратор, , ) КАК ДокументыКДоставкеОстаткиИОбороты
	|ГДЕ
	|	ДокументыКДоставкеОстаткиИОбороты.ЗаявкаКДоставке.Ссылка = &Ссылка
	|	И ДокументыКДоставкеОстаткиИОбороты.КоличествоРасход = &КоличествоРасход";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КоличествоРасход", 1);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Текст = "Эта заявка уже отгружена - " + ВыборкаДетальныеЗаписи.Регистратор + Тд.РазделительСтрок
			+ "      Вы уверенны в необходимости изменения даты отгрузки?";
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ДатаОтгрузки = СтараяДатаОтгрузки;
			Возврат;
		КонецЕсли;
		Док = ВыборкаДетальныеЗаписи.Регистратор.ПолучитьОбъект();
		Попытка
			Док.Заблокировать();
			Стр = Док.Развозка.Найти(Ссылка);
			Док.Развозка.Удалить(Стр);
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТесттОшибки = ОписаниеОшибки();
			Текст = "В данный момент изменение даты отгрузки невозможно," + ТД.РазделительСтрок +
				"Попросите вручную удалить Заявку N " +Номер+ " из Документа развозки " + ТД.РазделительСтрок +
				"  или закрыть его.";
			Комп = Найти(ТесттОшибки,"компьютер");
			Если Комп > 0 Тогда
				//Ошибка может быть и не при блокировке, а при проведении
				Компьютер = Прав(ОписаниеОшибки(),СтрДлина(ТесттОшибки)-Комп-10);
				Текст = Текст + Тд.РазделительСтрок + Строка(Док) + Тд.РазделительСтрок+ "уже открыта на коммпьютере: "+Компьютер
					+Тд.РазделительСтрок + Тд.РазделительСтрок+"Изменения в ней не могут быть выполнены" 
					+Тд.РазделительСтрок + Тд.РазделительСтрок+ "Для просмотра заявки нажмите ОК"
					+Тд.РазделительСтрок + Тд.РазделительСтрок+"Изменения будут возможны, если"
					+Тд.РазделительСтрок+"                             Закрыть заявку на указанном компьютере"
					+Тд.РазделительСтрок+"                             Попробовать изменить дату отгрузки в этой Заявке заново.";
			Иначе
				//Видимо, ошибка при проведении
				Текст = Текст + "
					|Если закрытие документа " + Строка(Док) + " не даст результата,
					|  - то остается вручную удалить Заявку N " +Номер+ " из указанного Документа развозки, а затем:
					|  - попробовать изменить дату отгрузки в этой Заявке заново.";
			КонецЕсли; 
			Предупреждение(Текст);
			ДатаОтгрузки = СтараяДатаОтгрузки;
			Возврат;
		КонецПопытки;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ВремяОтгрузки
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВремяСтарое = Время;
	ВыборкаДетальныеЗаписи.Следующий();
	Если ВыборкаДетальныеЗаписи.ВремяОтгрузки   <> '00010101' Тогда
		Время = ВыборкаДетальныеЗаписи.ВремяОтгрузки;
	КонецЕсли;

	тмпКомментарий = "";
    Если ДатаОтгрузки <> СтараяДатаОтгрузки Тогда
		ГруппаСтатуса = АО_ОбщийМодуль.ПолучитьГруппуСтатуса(АО_СтатусыЗаявки);
		Если ГруппаСтатуса = Справочники.ОС_ГруппыСтатусов.ВЫВОД Тогда
			Если ЗначениеЗаполнено(СтараяДатаОтгрузки) Тогда
				тмпФорма = ЭтотОбъект.ПолучитьФорму("ФормаВводаКомментария2");
				тмпФорма.ТекстПредупреждения = "Не указан комментарий изменения Даты отгрузки.";
				тмпКомментарий = тмпФорма.ОткрытьМодально();
				Если ПустаяСтрока(тмпКомментарий) Тогда
					//Отменяется изменение ДатаОтгрузки
					ДатаОтгрузки = СтараяДатаОтгрузки;
					Время = ВремяСтарое;
					Сообщить("Изменение Даты отгрузки отменено.");
					Возврат;
				КонецЕсли;
				//Записываем в историю статусов
				КомментВрем =  "Изменение Даты отгрузки с " +Формат(СтараяДатаОтгрузки, "ДФ=dd.MM.yyyy") + " на "+Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy") + " Комментарий: " + тмпКомментарий;
				ЭтотОбъект.ДополнительныеСвойства.Вставить("КомментарийДляСменыСтатусаПоИзменениюДатыОтгрузки", КомментВрем);
				//ЭтотОбъект.мИзменитьСтатус(ПараметрыСеанса.ТекущийПользователь, ПараметрыСеанса.ТекущийПользователь,, Ссылка, ЭтотОбъект.АО_СтатусыЗаявки, КомментВрем);
			КонецЕсли; 
			ЭтотОбъект.ДополнительныеСвойства.Вставить("КомментарийДляПисьмаПоИзменениюДатыОтгрузки", тмпКомментарий);
			бб1с_Логирование.ЗаписатьВЛог("" + ЭтотОбъект, "ДатаОтгрузкиПриИзменении: ДатаОтгрузки <> СтараяДатаОтгрузки, ГруппаСтатуса = " + ГруппаСтатуса + ". Письмо готовится к отправке.");
			//Если ЮГ_ОбщийМодуль.ЭтоРабочаяБаза() Тогда
			//	ПисьмоОтправлено = ОтправитьПисьмоОИзмененииДатыОтгрузки(Ссылка, ДатаОтгрузки, СтараяДатаОтгрузки, Время, ВремяСтарое, тмпКомментарий);	
			//	бб1с_Логирование.ЗаписатьВЛог("" + ЭтотОбъект, "ДатаОтгрузкиПриИзменении: ДатаОтгрузки <> СтараяДатаОтгрузки, ГруппаСтатуса = " + ГруппаСтатуса + ". Письмо отправлено = " + ПисьмоОтправлено);
			//КонецЕсли; 
		Иначе
		    бб1с_Логирование.ЗаписатьВЛог("" + ЭтотОбъект, "ДатаОтгрузкиПриИзменении: ДатаОтгрузки <> СтараяДатаОтгрузки, но ГруппаСтатуса = " + ГруппаСтатуса + ". Письмо не отправляется!");
		КонецЕсли; 
	КонецЕсли;
	СрочныйПриИзменении(Неопределено, Ложь);
	
	
	ОтложенноеЗаданиеПисьмоОбИзмененииДатыОтгрузки = ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоИзменениеДатыОтгрузки, "Тип");
	Если
		НЕ ОС_Услуги
		И
		ДатаОтгрузки <> СтараяДатаОтгрузки
		И
		АО_ОбщийМодуль.ПолучитьГруппуСтатуса(АО_СтатусыЗаявки) = Справочники.ОС_ГруппыСтатусов.ВЫВОД
	Тогда
		Если ЗначениеЗаполнено(СтараяДатаОтгрузки) Тогда
			ТемаНачало = "Изменение даты отгрузки ";
		Иначе
			ТемаНачало = "Назначена дата отгрузки ";
		КонецЕсли; 
		Если 
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке 
			ИЛИ
			АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмОтгружен
		Тогда
			Тема = ТемаНачало + "для заказа: " + Ссылка + " в логистике";
		Иначе
			Тема = ТемаНачало + "для заказа: " + Ссылка + " на производстве";
		КонецЕсли;
		тмпТекст = "Номер заказа: " + Строка(ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка)) + Символы.ПС + "Клиент: " + Контрагент.Наименование + Символы.ПС + "Наименование заказа: " + НазваниеЗаказа;
		Если ЗначениеЗаполнено(СтараяДатаОтгрузки) Тогда
			тмпТекст = тмпТекст + Символы.ПС + "Дата отгрузки " + Формат(СтараяДатаОтгрузки, "ДФ=dd.MM.yyyy") + " и время " + Формат(СтароеВремяОтгрузки, "ДЛФ=T") + " изменены на " + Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy") + " и " + Формат(Время, "ДЛФ=T");
		Иначе
			тмпТекст = тмпТекст + Символы.ПС + "Назначена дата отгрузки " + Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy") + " и время " + Формат(Время, "ДЛФ=T");
		КонецЕсли; 
		тмпТекст = тмпТекст + Символы.ПС + "Пользователь 1С внесший изменения: " + ПараметрыСеанса.ТекущийПользователь;
		Если тмпКомментарий <> "" Тогда
			тмпТекст = тмпТекст + Символы.ПС + "Комментарий: " + тмпКомментарий;
		КонецЕсли;
		тмпТекст = тмпТекст + Символы.ПС + Символы.ПС + "Автоматическая рассылка www.optimasmart.ru";
		Если ОтложенноеЗаданиеПисьмоОбИзмененииДатыОтгрузки = Неопределено Тогда //Добавляем отложенное задание
			Сеансы       = ПолучитьСеансыИнформационнойБазы();
			НомерСеанса  = НомерСеансаИнформационнойБазы();
			ТекущийСеанс = Неопределено;
			Для Каждого Сеанс Из Сеансы Цикл
				Если Сеанс.НомерСеанса = НомерСеанса Тогда
					ТекущийСеанс = Сеанс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
			Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
			НовоеЗадание = ОтложенныеЗадания.Добавить();
			НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
			НовоеЗадание.ВыполнятьПосле 	= "";
			НовоеЗадание.ВыполнятьНаСервере = Истина;
			НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
			НовоеЗадание.НомерСеанса		= Идентификатор;
			НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
			НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоИзменениеДатыОтгрузки;
			НовоеЗадание.СтрокаПараметров 	= Тема + "|" + тмпТекст;
		Иначе //Меняем имеющееся отложенное задание
			ОтложенноеЗаданиеПисьмоОбИзмененииДатыОтгрузки.СтрокаПараметров = Тема + "|" + тмпТекст;
		КонецЕсли;
	Иначе //НЕ (НЕ ОС_Услуги И ДатаОтгрузки <> СтараяДатаОтгрузки И АО_ОбщийМодуль.ПолучитьГруппуСтатуса(АО_СтатусыЗаявки) = Справочники.ОС_ГруппыСтатусов.ВЫВОД)
		Если ОтложенноеЗаданиеПисьмоОбИзмененииДатыОтгрузки = Неопределено Тогда
			//Ничего не делаем
		Иначе
			ОтложенныеЗадания.Удалить(ОтложенноеЗаданиеПисьмоОбИзмененииДатыОтгрузки);
			Сообщить("Отложенное задание по отправке письма об изменении даты отгрузки отменено");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаИзготовленияПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДатаИзготовленияПриИзменении", Истина);
	
	VIP_РАССТЕРЛ();
	мЮГ_УстановитьЮГ_ДатаМонтажа(Истина);
	СрочныйПриИзменении(Неопределено, Ложь);
КонецПроцедуры

Процедура ДействияФормыТехПараметры(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыТехПараметры", Истина);
	
	Форма = Обработки.ТехнологичеческиеПараметрыКлиентов.ПолучитьФорму();
	Форма.ЭлементыФормы.КоманднаяПанель1.Доступность = Ложь;
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.Код.ВидСравнения = ВидСравнения.Равно;
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.Код.Значение = Число(Лев(Контрагент.Наименование,3));
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.Код.Использование = Истина;
	
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.ТипПолимера.ВидСравнения = ВидСравнения.Равно;
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.ТипПолимера.Значение = ТипФотополимера.ТипПолимера;
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.ТипПолимера.Использование = Истина;
	
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.Толщина.ВидСравнения = ВидСравнения.Равно;
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.Толщина.Значение = ТипФотополимера.ЦеноваяГруппа;
	Форма.ЭлементыФормы.ТехПараметры.Значение.Отбор.Толщина.Использование = Истина;
	
	Форма.ЭлементыФормы.ТехПараметры.СпособРедактирования = СпособРедактированияСписка.ВСписке;
	Если Не РольДоступна("ПолныеПрава") И Не РольДоступна("АО_УправлениеЗаявкамиАдмин") Тогда
		Для н = 1 по ЭлементыФормы.Количество() Цикл
			Попытка
				Форма.ЭлементыФормы[н-1].ТолькоПросмотр = Истина;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Форма.Открыть();
КонецПроцедуры

Процедура СодержаниеЗаказаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СодержаниеЗаказаВыбор", Истина);
	
	Если ВыборДляСписания Тогда
		Размер = Новый Структура("НомерФормы","Количество");
		Размер.Вставить("НомерФормы",ВыбраннаяСтрока.НомерСтроки);
		Размер.Вставить("Количество",ВыбраннаяСтрока.Количество);
		ЭтаФорма.Закрыть(Размер);
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыВсе(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыВсе", Истина);
	
	Форма = Обработки.Репро_ЦеныКонтрагентов.ПолучитьФорму();
	
	Форма.Цены.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	Форма.Цены.Отбор.Контрагент.Значение = Контрагент;
	Форма.Цены.Отбор.Контрагент.Использование = Истина;
	
	Форма.ОткрытьМодально();
КонецПроцедуры

Процедура СодержаниеМонтажаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СодержаниеМонтажаПриОкончанииРедактирования", Истина);
	
	Стр = СводныйЗаказ.Найти(Справочники.ВидыПродукции.Астролон,"ВидПродукта");
	Пока не Стр = Неопределено Цикл
		СводныйЗаказ.Удалить(Стр);
		Стр = СводныйЗаказ.Найти(Справочники.ВидыПродукции.Астролон,"ВидПродукта");
	КонецЦикла;	
	ЗаполнитьПоАстролон();
КонецПроцедуры

Процедура СодержаниеЗаказаПослеУдаления(Элемент)
	ОбщееКоличество = СодержаниеЗаказа.Итог("Количество");
	ОбщаяПлощадь = СодержаниеЗаказа.Итог("Площадь");
	Сумма = ОбщаяПлощадь * Цена;
	Цена = ?(ОбщаяПлощадь = 0, 0, (Сумма + ПреПрессУслуги) / ОбщаяПлощадь);
	Сумма = Сумма + ПреПрессУслуги;
	
	Стр = СводныйЗаказ.Найти(Справочники.ВидыПродукции.Флексоформы, "ВидПродукта");
	Пока НЕ Стр = Неопределено Цикл
		СводныйЗаказ.Удалить(Стр);
		Стр = СводныйЗаказ.Найти(Справочники.ВидыПродукции.Флексоформы, "ВидПродукта");
	КонецЦикла;
	
	ЗаполнитьПоФормам();
КонецПроцедуры

Процедура ДействияФормыМатериалАналог(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыМатериалАналог", Истина);
	
	Если  не СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Журавлев" 
		И  не СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "1С"
		И  не СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Ценообразование" Тогда
		Возврат;
	КонецЕсли;
	Форма = РегистрыСведений.Репро_Материалы_Аналоги.ПолучитьФорму("ФормаСписка");	
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры

Процедура СпособРасчетаЦеныОткрытие(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СпособРасчетаЦеныОткрытие", Истина);
	
	СтандартнаяОбработка = Ложь;
	Если Не Элемент.Значение.Пустая() Тогда
		Форма = ЭтотОбъект.ПолучитьФорму("ПричиныСчетНеВыставлять");
		Форма.ОС_ТолькоПросмотр = ТолькоПросмотр;
		Форма.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры

Процедура СпособРасчетаЦеныОчистка(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СпособРасчетаЦеныОчистка", Истина);
	
	ПричиныСчетНеВыставлять.Очистить();
	ОтделыСчетНеВыставлять.Очистить();
	СогласованоСчетНеВыставлять = Справочники.СогласовалСчетНеВыставлять.ПустаяСсылка();
КонецПроцедуры

Процедура ОсновныеДействияФормыПечатьАстрлон(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОсновныеДействияФормыПечатьАстрлон", Истина);
	
	//ПечатьАстролонНовая();
	Если
		ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ПечатьАстролон, "Тип") = Неопределено
		//Или
		//Вопрос("Для данного документа уже есть отложенное задание типа ""Печать Астролон"". Хотите создать ещё одно?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да
	Тогда
		Сеансы       = ПолучитьСеансыИнформационнойБазы();
		НомерСеанса  = НомерСеансаИнформационнойБазы();
		ТекущийСеанс = Неопределено;
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				ТекущийСеанс = Сеанс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
		Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
		НовоеЗадание = ОтложенныеЗадания.Добавить();
		НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
		НовоеЗадание.ВыполнятьПосле 	= "";
		НовоеЗадание.ВыполнятьНаСервере = Ложь;
		НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
		НовоеЗадание.НомерСеанса		= Идентификатор;
		НовоеЗадание.Ключ               = "";
		НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ПечатьАстролон;
		НовоеЗадание.СтрокаПараметров 	= "";
		Сообщить("Печать Астролон отложена до момента записи Заявки");
	КонецЕсли;
	//Запись в истории заявки печати астролона
	НашОбъект = ЭтотОбъект;
	НовыйСтатусЗаявки = Ссылка.АО_СтатусыЗаявки;
	ТекДата =  АО_ОбщийМодуль.ТекДата();
	Комментарий = "Распечатан бланк ""Астролон""";
	
	ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь"), ТекДата, Ссылка, НовыйСтатусЗаявки, Комментарий);

КонецПроцедуры

Процедура ДействияФормыПретензия(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыПретензия", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Претенз.Ссылка
	|ИЗ
	|	Документ.Претензия КАК Претенз
	|ГДЕ
	|	Претенз.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВыборкаДетальныеЗаписи.Ссылка.ПолучитьФорму("ФормаДокумента3").Открыть();
		КонецЦикла;
	ИначеЕсли РольДоступна("Технолог") Тогда
		Форма = Документы.Претензия.ПолучитьФормуНовогоДокумента();
		Форма.Объект.Заявка = Ссылка;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

//Процедура ДатаОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
//	
//	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДатаОтгрузкиНачалоВыбора", Истина);
//	
//	СтараяДатаОтгрузки = ДатаОтгрузки;
//КонецПроцедуры

Процедура ТПИсторияИзмененийПриАктивизацииЯчейки(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТПИсторияИзмененийПриАктивизацииЯчейки", Истина);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыРазрешитьРедактирование(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОсновныеДействияФормыРазрешитьРедактирование", Истина);
	
	Если РольДоступна("РольКнопкиРазрешитьРедактированиеЗаявки")Тогда
		
		//Добавим проверку на выставленные документы и пользователей
		Если ЗапретРедактрованияЗаявкиСВыписаннымиДокументами() Тогда
			Возврат;
		КонецЕсли;
		
		КомментарийС = "";
		//Комментарий при расширенном редактировании
		Если НЕ Филиал = Справочники.Филиалы.Тула Тогда
			КомментарийС = ВвестиКомментарий();
		КонецЕсли;	

		ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь") ,ТекДата(), Ссылка, Ссылка.АО_СтатусыЗаявки, СокрЛП("Расширенное редактирование: " + КомментарийС));
		Попытка
			//ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//Нет необходимости записывать по полной процедуре записи и проводить - док не изменен, т.к. он был недоступен
			ЭтотОбъект.ОбменДанными.Загрузка = Истина;
			ЭтотОбъект.Записать();
			ЭтотОбъект.ОбменДанными.Загрузка = Ложь;
			РеквизитыДоступны();	
			рфЮГ_РазрешитьРедактированиеТекущийСтатус = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

Процедура РеквизитыДоступны()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РеквизитыДоступны", Истина);
	
	ЭтаФорма.ТолькоПросмотр = Ложь;
	//Если была эмуляция, то снимает то, что было закрыто
	ЮГ_ЭмуляцияТолькоПросмотр(Ложь);
	
	ЭлементыФормы.ЮГ_ДатаМонтажа.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

Процедура КнДобавитьФайлыНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнДобавитьФайлыНажатие", Истина);
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ПутьКФайламТиф;
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	//Добавим в фильтр LEN
	Фильтр = "Файлы Tif,Len(*.tif*,*.len)|*.tif*;*.len";     //Пример строки: "Текстовый документ(*.txt)|*.txt|Табличный документ(*.mxl)|*.mxl"
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Если МассивФайлов.Количество() > 0 Тогда
			
			мЮГ_ДобавитьФайлыТиф(МассивФайлов);
			
			мЮГ_ОбработкаТЧ_СодержаниеЗаказаПоДлинеШиринеДляФинпака();
			
			Записать();
			
		КонецЕсли; 
	Иначе
		Предупреждение(НСтр("ru = 'Файл(ы) не выбран!'; en = 'File(s) not selected!'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнОткрытьПапкуФайловЗаказаНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнОткрытьПапкуФайловЗаказаНажатие", Истина);
	
	Если ЗначениеЗаполнено(ПутьКФайлам) Тогда
		ЗапуститьПриложение("explorer " + СокрЛП(СтрЗаменить(ПутьКФайлам, Символы.НПП,"")));
	КонецЕсли;
КонецПроцедуры

Процедура КнОткрытьПапкуФайловЗаказа1Нажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнОткрытьПапкуФайловЗаказа1Нажатие", Истина);
	
	Если ЗначениеЗаполнено(ПутьКФайламТиф) Тогда 
		ЗапуститьПриложение("explorer.exe /select, " + СокрЛП(СтрЗаменить(ПутьКФайламТиф, Символы.НПП,"")));
	КонецЕсли;
КонецПроцедуры

Процедура ТипФотополимераНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТипФотополимераНачалоВыбора", Истина);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если Контрагент.НовыеСепарации Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера КАК ТипФотополимера
			|ИЗ
			|	Справочник.Контрагенты.ОграниченияКонтрагентаПроцессы КАК КонтрагентыОграниченияКонтрагентаПроцессы
			|ГДЕ
			|	КонтрагентыОграниченияКонтрагентаПроцессы.Ссылка = &Ссылка
			|	И КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера <> &ПустаяСсылка"
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтрагентыОграниченияКонтрагента.ТипФотополимера КАК ТипФотополимера
			|ИЗ
			|	Справочник.Контрагенты.ОграниченияКонтрагента КАК КонтрагентыОграниченияКонтрагента
			|ГДЕ
			|	КонтрагентыОграниченияКонтрагента.Ссылка = &Ссылка
			|	И КонтрагентыОграниченияКонтрагента.ТипФотополимера <> &ПустаяСсылка";
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", Контрагент);
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.Номенклатура.ПустаяСсылка());
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		СписокНоменклатуры = Новый СписокЗначений;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНоменклатуры.Добавить(ВыборкаДетальныеЗаписи.ТипФотополимера);
		КонецЦикла;
		Если НЕ СписокНоменклатуры.Количество() = 0 Тогда
			СтандартнаяОбработка = Ложь;
			ФФорма = Справочники.Номенклатура.ПолучитьФормуВыбора("ФормаСписка");
			ФФорма.ЭлементыФормы.Список.ИерархическийПросмотр = Ложь;
			ФФорма.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;	
			ФФорма.Отбор.Ссылка.Значение      = СписокНоменклатуры;
			ФФорма.Отбор.Ссылка.Использование = Истина;
			ПВыбор = ФФорма.ОткрытьМодально();
            Если
                ПВыбор <> Неопределено И НЕ ПВыбор.ПометкаУдаления
            Тогда
				Если НЕ рфЮГ_РазрешитьРедактированиеТекущийСтатус Тогда
					ТипФотополимераОчистка(Элемент, Ложь);
				КонецЕсли; 
				Элемент.Значение = ПВыбор;
                Если ПВыбор.Услуга И ЗначениеЗаполнено(МонтажНаАстролон) Тогда   //перенесено as_bb1c_  02.03.2020 22:30:49
                    Сообщить("Монтаж на астролон вместе с цветопробой не используется", СтатусСообщения.Внимание);
                    ЭтотОбъект.МонтажНаАстролон = Справочники.Номенклатура.ПустаяСсылка();
                КонецЕсли;
                Цена    = 0;
                Сумма   = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ПолеВвода5НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолеВвода5НачалоВыбора", Истина);
	
    СтандартнаяОбработка = Ложь;
    Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
        Предупреждение("Заполните  Контрагента", 2);
        Возврат;  
    Иначе
        Если Контрагент.НовыеСепарации Тогда
            Предупреждение("Для Контрагента с установленным флагом Новые сепарации это поле не заполняется!", 2);
            Возврат;
        КонецЕсли;
    КонецЕсли;
    Если НЕ ЗначениеЗаполнено(ТипФотополимера) Тогда
        Предупреждение("Заполните тип фотополимера", 2);
        Возврат;
    КонецЕсли;
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Контрагент",         Контрагент);
    Запрос.УстановитьПараметр("ТипФотополимера",    ТипФотополимера);
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   КонтрагентыОграниченияКонтрагента.ТипФотополимера КАК ТипФотополимера,
    |   КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
    |   КонтрагентыОграниченияКонтрагента.Печать КАК Печать,
    |   КонтрагентыОграниченияКонтрагента.Экспонирование КАК Экспонирование,
    |   КонтрагентыОграниченияКонтрагента.Микроструктура КАК Микроструктура,
    |   КонтрагентыОграниченияКонтрагента.Комментарий
    |ПОМЕСТИТЬ ФотополимерыДляРекомбинации
    |ИЗ
    |   Справочник.Контрагенты.ОграниченияКонтрагента КАК КонтрагентыОграниченияКонтрагента
    |ГДЕ
    |   КонтрагентыОграниченияКонтрагента.Ссылка = &Контрагент
    |   И КонтрагентыОграниченияКонтрагента.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
    |   И КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры = ЗНАЧЕНИЕ(Справочник.ЛиниатурыОптима.ПустаяСсылка)
    |   И КонтрагентыОграниченияКонтрагента.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
    |   И КонтрагентыОграниченияКонтрагента.Экспонирование = ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
    |   И КонтрагентыОграниченияКонтрагента.Микроструктура = ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка)
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   КонтрагентыОграниченияКонтрагента.ТипФотополимера КАК ТипФотополимера,
    |   КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
    |   КонтрагентыОграниченияКонтрагента.Печать КАК Печать,
    |   КонтрагентыОграниченияКонтрагента.Экспонирование КАК Экспонирование,
    |   КонтрагентыОграниченияКонтрагента.Микроструктура КАК Микроструктура,
    |   КонтрагентыОграниченияКонтрагента.Комментарий
    |ПОМЕСТИТЬ ВсеОстальноеДляРекомбинации
    |ИЗ
    |   Справочник.Контрагенты.ОграниченияКонтрагента КАК КонтрагентыОграниченияКонтрагента
    |ГДЕ
    |   КонтрагентыОграниченияКонтрагента.Ссылка = &Контрагент
    |   И КонтрагентыОграниченияКонтрагента.ТипФотополимера = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
    |   И (КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ЛиниатурыОптима.ПустаяСсылка)
    |           ИЛИ КонтрагентыОграниченияКонтрагента.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
    |           ИЛИ КонтрагентыОграниченияКонтрагента.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
    |           ИЛИ КонтрагентыОграниченияКонтрагента.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   КонтрагентыОграниченияКонтрагента.ТипФотополимера КАК ТипФотополимера,
    |   КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
    |   КонтрагентыОграниченияКонтрагента.Печать КАК Печать,
    |   КонтрагентыОграниченияКонтрагента.Экспонирование КАК Экспонирование,
    |   КонтрагентыОграниченияКонтрагента.Микроструктура КАК Микроструктура,
    |   КонтрагентыОграниченияКонтрагента.Комментарий
    |ПОМЕСТИТЬ ТаблицаДляОтбораПоТипуФотополимера
    |ИЗ
    |   Справочник.Контрагенты.ОграниченияКонтрагента КАК КонтрагентыОграниченияКонтрагента
    |ГДЕ
    |   КонтрагентыОграниченияКонтрагента.Ссылка = &Контрагент
    |   И КонтрагентыОграниченияКонтрагента.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
    |   И (КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ЛиниатурыОптима.ПустаяСсылка)
    |           ИЛИ КонтрагентыОграниченияКонтрагента.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
    |           ИЛИ КонтрагентыОграниченияКонтрагента.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
    |           ИЛИ КонтрагентыОграниченияКонтрагента.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |   ФотополимерыДляРекомбинации.ТипФотополимера,
    |   ВсеОстальноеДляРекомбинации.ГорячаяПапкаЛиниатуры,
    |   ВсеОстальноеДляРекомбинации.Печать,
    |   ВсеОстальноеДляРекомбинации.Экспонирование,
    |   ВсеОстальноеДляРекомбинации.Микроструктура,
    |   ВсеОстальноеДляРекомбинации.Комментарий
    |ИЗ
    |   ФотополимерыДляРекомбинации КАК ФотополимерыДляРекомбинации,
    |   ВсеОстальноеДляРекомбинации КАК ВсеОстальноеДляРекомбинации
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ТаблицаДляОтбораПоТипуФотополимера.Комментарий,
    |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера,
    |   ТаблицаДляОтбораПоТипуФотополимера.ГорячаяПапкаЛиниатуры КАК Линиатура,
    |   ТаблицаДляОтбораПоТипуФотополимера.Печать,
    |   ТаблицаДляОтбораПоТипуФотополимера.Экспонирование,
    |   ТаблицаДляОтбораПоТипуФотополимера.Микроструктура
    |ИЗ
    |   ТаблицаДляОтбораПоТипуФотополимера КАК ТаблицаДляОтбораПоТипуФотополимера
    |ГДЕ
    |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера = &ТипФотополимера";
    Фрм = ПолучитьФорму("ФормаВыбораСтроки");
    Фрм.ЭлементыФормы.ТаблицаВыбора.Значение = Запрос.Выполнить().Выгрузить();
    Фрм.ЭлементыФормы.ТаблицаВыбора.Значение.Колонки.Комментарий.Ширина = 30;
    Фрм.ЭлементыФормы.ТаблицаВыбора.СоздатьКолонки();
    Если Фрм.ЭлементыФормы.ТаблицаВыбора.Значение.Количество() > 0 Тогда
        ВыбСтрокаОграничений = Фрм.ОткрытьМодально();
        Если
            ВыбСтрокаОграничений <> Неопределено
            И
            ВыбСтрокаОграничений.Количество() > 0
        Тогда
            ЭтотОбъект.ЛиниатураОптима  = ВыбСтрокаОграничений.Получить(0).Линиатура;
            ЭтотОбъект.Экспонирование   = ВыбСтрокаОграничений.Получить(0).Экспонирование;
            ЭтотОбъект.Печать           = ВыбСтрокаОграничений.Получить(0).Печать;
			ЭтотОбъект.мПечатьПриИзменении();
            ЭтотОбъект.Микроструктура   = ВыбСтрокаОграничений.Получить(0).Микроструктура;
			ЭтотОбъект.Линиатура		= ВыбСтрокаОграничений.Получить(0).Линиатура.Линиатура;//СправочникСсылка.ЛиниатурыОптима.Линиатура
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

Функция ВсеНеобходимыеПоляЗаполнены()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ВсеНеобходимыеПоляЗаполнены", Истина);
	
	Отказ = Ложь;
	ТекстСообщение = "";
	ТД = Новый ТекстовыйДокумент;
	Если ДатаОтгрузки < ДатаИзготовления Тогда
		ТекстСообщение = "Дата отгрузки меньше даты изготовления ";
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаИзготовления) и ЭтоНовый() и ДатаИзготовления < НачалоДня(ТекущаяДата()) Тогда
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Дата изготовления меньше текущей даты", ТекстСообщение + "
		|Дата изготовления меньше текущей даты");
		Отказ = Истина;
	КонецЕсли;	
	Если ЗначениеЗаполнено(ДатаОтгрузки)и ЭтоНовый() и ДатаОтгрузки < НачалоДня(ТекущаяДата()) Тогда
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Дата отгрузки меньше текущей даты", ТекстСообщение + "
		|Дата отгрузки меньше текущей даты");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОтгрузки)и не ЭтоНовый() и ДатаОтгрузки < НачалоДня(Дата) Тогда
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Дата отгрузки меньше  даты документа", ТекстСообщение + "
		|Дата отгрузки меньше  даты документа");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаИзготовления) и не ЭтоНовый() и ДатаИзготовления < НачалоДня(Дата) Тогда
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Дата изготовления меньше  даты документа", ТекстСообщение + "
		|Дата изготовления меньше  даты документа");
		Отказ = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Дата""", ТекстСообщение + "
		|Не заполнено поле ""Дата""");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СпособОплаты) Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Способ оплаты"".", ТекстСообщение + "
		|Не заполнено поле ""Способ оплаты"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Доработка)  Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Доработка"".", ТекстСообщение + "
		|Не заполнено поле ""Доработка"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Печать) И Не ОС_Астролон Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Печать"".", ТекстСообщение + "
		|Не заполнено поле ""Печать"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Микроструктура)И Не ОС_Астролон Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Микроструктура"".", ТекстСообщение + "
		|Не заполнено поле ""Микроструктура"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Экспонирование)И Не ОС_Астролон Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Экспонирование"".", ТекстСообщение + "
		|Не заполнено поле ""Экспонирование"".");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Организация"".", ТекстСообщение + "
		|Не заполнено поле ""Организация"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НазваниеЗаказа) Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""НазваниеЗаказа"".", ТекстСообщение + "
		|Не заполнено поле ""НазваниеЗаказа"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Контрагент"".", ТекстСообщение + "
		|Не заполнено поле ""Контрагент"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипФотополимера)И Не ОС_Астролон Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Тип фотополимера"".", ТекстСообщение + "
		|Не заполнено поле ""Тип фотополимера"".");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Время) и ЗначениеЗаполнено(ДатаИзготовления) и ДатаОтгрузки = ДатаИзготовления Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Время"".", ТекстСообщение + "
		|Не заполнено поле ""Время"".");
	КонецЕсли;
	
	Если (ОС_Производство = Перечисления.ОС_Производство.Москва ИЛИ ОС_Производство = Перечисления.ОС_Производство.Пенза) И НЕ ЗначениеЗаполнено(Линиатура) И Не ОС_Астролон Тогда
		Отказ = Истина;
		ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "Не заполнено поле ""Линиатура"".", ТекстСообщение + "
		|Не заполнено поле ""Линиатура"".");
	КонецЕсли;
	
	Если НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.МакетГотов И НЕ АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.СданаВАрхив Тогда
		Если ОбщееКоличествоМонтажа > 0 Тогда
			Если ДеньНедели(ТекущаяДата()+60*60*24) > 6 Тогда
				БлижайшееВремяОтгрузкиАстролона = ?(ДеньНедели(ТекущаяДата()+60*60*24)=6, НачалоДня(ТекущаяДата()+ 60*60*24*3), НачалоДня(ТекущаяДата()+ 60*60*24*2)); 
			Иначе
				БлижайшееВремяОтгрузкиАстролона = НачалоДня(ТекущаяДата()+ 60*60*24);
			КонецЕсли;
			Если ДатаОтгрузки < БлижайшееВремяОтгрузкиАстролона И Не РольДоступна("Бухгалтер") Тогда
				Предупреждение("Дата отгрузки меньше необходимой даты для изготовления Астролона, исправьте дату отгрузки",0);
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если ДатаОтгрузки < НачалоДня(ТекущаяДата()) И Не РольДоступна("Бухгалтер") Тогда
				Предупреждение("Дата отгрузки меньше текущей даты исправьте дату отгрузки",0);
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	//Изменено условие с проверкой заполнения СдатьВ_ОДП
	Если
		ЗначениеЗаполнено(ДатаИзготовления)
		И
		ДатаОтгрузки = ДатаИзготовления
		И
		//?(ЗначениеЗаполнено(СдатьВ_ОДП),(Час(СдатьВ_ОДП)*60*60 + Минута(СдатьВ_ОДП)*60+ Секунда(СдатьВ_ОДП) < Час(ТекущаяДата())*60*60 + Минута(ТекущаяДата())*60 + Секунда(ТекущаяДата())), Истина)
		//И
		(
			ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Корректоры"
			ИЛИ
			ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Менеджеры"
			ИЛИ
			ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Технологи"
			ИЛИ
			ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа"
			ИЛИ
			ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Приемка"
			ИЛИ
			ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Дизайнеры"
		)
	Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Время для ОДП не достаточно!! Записать? Ответив ДА Вы осознанно нарушаете технологию", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			ТекстСообщение = ?(ТекстСообщение = "", ТекстСообщение + "ОДП не успеет - Измените время!!", ТекстСообщение + "
				|ОДП не успеет - Измените время!!");
		КонецЕсли;																								
	КонецЕсли;
	
	Контрагент_233 = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыАстролонПлощадьПропустить.Ссылка
	|ИЗ
	|	Справочник.КонтрагентыАстролонПлощадьПропустить КАК КонтрагентыАстролонПлощадьПропустить";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент_233.Добавить(ВыборкаДетальныеЗаписи.Ссылка.Контрагент);
	КонецЦикла;
	
	Если  ОбщаяПлощадьМонтажа > 0 
		И
		ЗначениеЗаполнено(ДатаОтгрузки)
		И НЕ РольДоступна("АО_ДляДокументаоборота")
		//И НЕ ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Корректоры")
		//И НЕ ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Дизайнеры")
		И Контрагент_233.НайтиПоЗначению(Контрагент) = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АО_ЗаявкаПокупателя.ОбщаяПлощадьМонтажа КАК ОбщаяПлощадьМонтажа
		|ИЗ
		|	Документ.АО_ЗаявкаПокупателя КАК АО_ЗаявкаПокупателя
		|ГДЕ
		|	АО_ЗаявкаПокупателя.ДатаОтгрузки = &ДатаОтгрузки
		|	И АО_ЗаявкаПокупателя.Контрагент В(&Контрагент)
		|ИТОГИ
		|	СУММА(ОбщаяПлощадьМонтажа)
		|ПО
		|	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
		Запрос.УстановитьПараметр("Контрагент", Контрагент_233);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		//Если ОбщаяПлощадьМонтажа >= 35.1 Или ( не ВыборкаОбщийИтог.ОбщаяПлощадьМонтажа = Неопределено и ВыборкаОбщийИтог.ОбщаяПлощадьМонтажа - ОбщаяПлощадьМонтажаПриОткрытии + ОбщаяПлощадьМонтажа  >= 35.1) Тогда 
		//	//Предупреждение("Общая площадь на указанную дату отгрузки превышает 35.1 кв.м - измените дату отгрузки");
		//	//Отказ = Истина;
		//	//Возврат;
		//КонецЕсли;
	КонецЕсли;
	Если Дата >= Дата(2013,12,19) и ( НЕ ЗначениеЗаполнено(ДатаИзготовления) Или НЕ ЗначениеЗаполнено(ДатаОтгрузки)) Тогда 
		Предупреждение("ДатаОтгрузки или ДатаИзготовления не заполнены");
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		Сообщить(ТекстСообщение);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции	

//////////////////////////////////////////////////////
// ГРУППА ОТПРАВКИ НА РИП                           //
//////////////////////////////////////////////////////

//Параметр прикреплен в значении "Ложь" снимает проверку на наличие обработанных файлов
Процедура КнОтправитьНаРИПНажатие(Элемент, Прикреплен = Неопределено, ОтправленПередCat_Linux = Ложь)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнОтправитьНаРИПНажатие", Истина);
	
	//КГГ 2021 10 19+
	Если НЕ ЗначениеЗаполнено(МонтажНаАстролон) И КоличествоФорм = 0 Тогда
		Сообщить("Необходимо заполнить количество форм.");
		Возврат;
	КонецЕсли;
	//КГГ 2021 10 19-
	
	Если ОтправленПередCat_Linux = Неопределено Тогда
		ОтправленПередCat_Linux = Ложь;
	КонецЕсли; 
	
	Если ПараметрыПроизводстваНеСоответствуютОграничениямКонтрагента() Тогда
        Возврат;
	КонецЕсли;	
	Если ТаблицаФайловПС.Количество() = 0 Тогда
	
		Предупреждение("Нет файлов для риповки!");
		Возврат;
	
	КонецЕсли;
	
	Если НЕ ЮГ_ПроверитьДисторсию() Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОтправленПередCat_Linux И ЭтаФорма.Модифицированность Тогда
		Предупреждение("Для отправки на риповку документ должен быть записан!");
		Возврат;
	КонецЕсли; 
	
	СчетчикCaT = Ложь;
	
	Если тНоваяРиповка И ОС_ИспользоватьСепарации_РеквизитФормы Тогда
		ПутьКФайламТифТек =  АО_ПСМ.ВернутьПутьВыходнойПапкиСтехнологией(Ссылка);
		//ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(ПутьКФайламТифТек);
		
		НоваяСтрокаЛогФайлТехИнфо = "";
		Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(НомерЗаказа) И ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ТипФотополимера) И ЗначениеЗаполнено(Печать) И ЗначениеЗаполнено(Микроструктура) И ЗначениеЗаполнено(Экспонирование) Тогда
			НоваяСтрокаЛогФайлТехИнфо = АО_ПСМ.ПробелыНаТире(
				Формат(Дата, "ДФ=dd.MM.yy")                                                                                             + ";"
				+ НомерЗаказа                                                                                                           + ";"
				+ ?(ЗначениеЗаполнено(Контрагент.ОС_НаименованиеДляПапок), Контрагент.ОС_НаименованиеДляПапок, Контрагент.Наименование) + ";"
				+ СокрЛП(ТипФотополимера.ЦеноваяГруппа)                                                                                 + ";"
				+ СокрЛП(ТипФотополимера.Наименование)                                                                                  + ";"
				+ Печать                                                                                                                + ";"
				+ Микроструктура                                                                                                        + ";"
				+ СпособВыводаФорм                                                                                                      + ";"
				+ ?(Контрагент.ОС_СрезатьТехническуюИнформацию, "CUT", "")                                                              + ";"
				+ Экспонирование                                                                                                        + ";"
				+ ?(Контрагент.ОС_КороткийНомерПодОбрезку, "short", "")                                                                 + ";"
			);
		КонецЕсли;
		Если СтрокаЛогФайлТехИнфо <> НоваяСтрокаЛогФайлТехИнфо Тогда
			Если НоваяСтрокаЛогФайлТехИнфо = "" Тогда
				ОтложенныеЗаданияУдалитьФайлы(ПутьКФайламТифТек + "\info.txt");
			Иначе
				ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(ПутьКФайламТифТек, НоваяСтрокаЛогФайлТехИнфо);
			КонецЕсли;
		КонецЕсли;
		
		
		ПутьКФайламТиф = ПутьКФайламТифТек;
		Записать();
		
		//НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
		//НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламТиф";
		//НовоеИзменениеРеквизита.НовоеЗначение = ПутьКФайламТифТек;
		
		Если НЕ ЗначениеЗаполнено(ОС_Стратегия) Тогда
			Сообщить("Заполните стратегию!");
			Возврат;
		КонецЕсли;	
		
		//Если процесс заполнен, а углы не читали то получаем данные из процесса
		Если (ЗначениеЗаполнено(ОС_Процесс) ИЛИ ЗначениеЗаполнено(Ограничения)) Тогда 	//ОС_Сепарации.Количество() = 0 И 
			Если НЕ Контрагент.НовыеСепарации Тогда
				ОС_НоваяРиповка.СформироватьXML(Ссылка);
			Иначе
				ОС_НоваяРиповка.СформироватьXMLЛиниатура(Ссылка);
			КонецЕсли;			
			Рипование = Истина;
		Иначе
			Сообщить("Заполните процесс, или получите углы из файлов");
			Возврат;
		КонецЕсли;	
	Иначе
		
		Прикреплен = ?(Прикреплен = Неопределено, Истина, Ложь);
		
		ПутьКФайламАрхива = "";
		
		Слеш = ?(Найти(ПутьКФайлам,"//"),"/","\");
		
		ПапкаЗаказа = ПутьКФайлам
		+ Слеш + "PS" + Слеш ;
		Рипование = Истина;
		
		Если   ЛиниатураОптима = Справочники.ЛиниатурыОптима.ПустаяСсылка()
			или  Печать = Перечисления.АО_ВидыПечати.ПустаяСсылка()  Тогда
			
			Предупреждение(" не выбрана линиатура  или  способ печати.
			|       Операция не выполнена! ");
			Рипование = Ложь;
			
		КонецЕсли;	
		
		Если Прикреплен Тогда	
			Для каждого ст из ТаблицаФайловПС Цикл
				
				ФайлПоИмени = Новый Файл(ст.ПолноеИмяФайлаПС);
				ФайлСуществует = ФайлПоИмени.Существует();
				Если не ФайлСуществует  Тогда 
					Предупреждение (" в папке "+ПапкаЗаказа+" нет файла "+ст.ТранслитерационноеИмя);
					Рипование = Ложь;
				КонецЕсли;	
				
			КонецЦикла;
		КонецЕсли;
		
			//++Проверка соответствует ли технологии существующий путь к тиф
		ФайлПоИмени = Новый Файл(ПутьКфайламТиф);
		ФайлСуществует = ФайлПоИмени.Существует();

		Если ФайлСуществует Тогда
		Иначе
			бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнОтправитьНаРИПНажатие", Истина);
			Сообщить("Некорректный Путь к файлам Тиф: " + ПутьКфайламТиф + ": каталог не найден. Риповка прекращена!");
			Рипование = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Рипование = Истина Тогда
		тз = Новый таблицазначений;	
		тз.Колонки.Добавить("ИмяФайлаПС");
		тз.Колонки.Добавить("ПолноеИмяФайлаПС");
		тз.Колонки.Добавить("ТранслитерационноеИмя");
		тз.Колонки.Добавить("ПолноеИмяИсходногоФайла");
		
		тз.Колонки.Добавить("Файл");
		
		НайденныеСтроки = ТаблицаФайловПС.НайтиСтроки(Новый структура("Риповать",Истина));
		
		Для каждого ст из НайденныеСтроки цикл
			строчка = тз.Добавить();
			ЗаполнитьЗначенияСвойств(строчка, ст);
		КонецЦикла;
		
		ЭтотОбъект.ФоновоеЗаданиеЗавершить = Ложь;
		
		НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмРипуется;
		Рипуется = Истина;
		Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
			Сообщить("Статус заявки не может быть изменен КнОтправитьНаРИПНажатие!",СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Если тНоваяРиповка И ОС_ИспользоватьСепарации_РеквизитФормы Тогда
			НаборЗаписей = РегистрыСведений.ОС_ФайлыНаРиповке_Новое.СоздатьНаборЗаписей();
			Отбор = НаборЗаписей.Отбор;
			Отбор["Заявка"].Использование = Истина;
			Отбор["Заявка"].Значение = Ссылка;
			Отбор["Заявка"].ВидСравнения  = ВидСравнения.Равно;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].Заявка = Ссылка;
				НаборЗаписей[0].Дата   = ТекущаяДата();
				
				НаборЗаписей.Записать();
			Иначе
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Заявка = Ссылка;
				НоваяСтрока.Дата   = ТекущаяДата();
				
				НаборЗаписей.Записать();
			КонецЕсли;	
			
		Иначе	
			ПараметрыФоновогоЗадания = Новый Массив;
			ПараметрыФоновогоЗадания.Добавить(тз);
			ПараметрыФоновогоЗадания.Добавить(ЭтотОбъект.Ссылка);
			ПараметрыФоновогоЗадания.Добавить(Прикреплен);
			
			ФоновыеЗадания.Выполнить("АО_ПСМ.ОтследитьОтрипованныеФайлы", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, "ЛовляРИПованныхФайлов");
		КонецЕсли;
		
		ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Кнопка2Нажатие(Элемент)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Кнопка2Нажатие", Истина);
	
	ЗапуститьПриложение("explorer " + ПутьКФайлам);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////
//     ПРИКРЕПЛЕНИЕ PS,PDF,LEN - файлов
/////////////////////////////////////////////////////////////////

//////////////////////////////////////////
// Добавление PS,PDF,LEN - файлов
// Добавление файлов без чтение PS, если параметр "Прикрепление" - Ложь
Процедура ДобавитьФайлы(Прикрепление)       
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДобавитьФайлы", Истина);
	
	Если ПустаяСтрока(ЭтотОбъект.Путькфайлам) или ЭтотОбъект.Путькфайлам = "" Тогда
		Сообщить("Заявка не записана , путь к структуре файлов не найден");
		Возврат;
	КонецЕсли;	
	
	// Режим рипования через АЕ должен выключать прикрепление, независимо от заданного параметра
	Если ОС_ИспользоватьСепарации_РеквизитФормы Тогда
		Прикрепление = Ложь;
	КонецЕсли;	
	
	Слеш ="\";
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если глЗначениеПеременной("глТекущийПользователь").Родитель = Справочники.Пользователи.НайтиПоКоду("015                                               ") //Приемка 
		ИЛИ глЗначениеПеременной("глТекущийПользователь").Родитель = Справочники.Пользователи.НайтиПоКоду("005                                               ") //ООЗ
		Тогда 
		ДиалогОткрытияФайла.Каталог = ПутьКФайлам+ Слеш +"PS" + Слеш;
	Иначе
		ДиалогОткрытияФайла.Каталог = ПутьКФайлам;
	КонецЕсли;	
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	//Фильтр = "Файлы Pdf,Ps,Eps,Len,Ai(*.Ps,*.Pdf,*.eps,*.len,*.ai)|*.Pdf;*.Ps;*.eps;*.len;*.ai";
	Фильтр = "Файлы Pdf,Ps,Eps,Len(*.Ps,*.Pdf,*.eps,*.len)|*.Pdf;*.Ps;*.eps;*.len";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		
		Если МассивФайлов.Количество() > 0 Тогда
			Возвр = ЭтотОбъект.мДобавитьФайлы(МассивФайлов, Прикрепление, ОС_ИспользоватьСепарации_РеквизитФормы, Ложь);
			Если ТипЗнч(Возвр) = Тип("Строка") И Найти(Возвр, "Есть большие файлы") > 0 Тогда
				Сообщить(Возвр);
				Ответ = Вопрос("Для прикрепления файла используйте кнопку: ""Добавить без прикрепления"". Загрузить большие файлы без прикрепления?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда 
					ЭтотОбъект.мДобавитьФайлы(МассивФайлов, Прикрепление, ОС_ИспользоватьСепарации_РеквизитФормы, Истина);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;			
	
КонецПроцедуры

Процедура КоманднаяПанель6ДобавитьСПрикреплением(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КоманднаяПанель6ДобавитьСПрикреплением", Истина);
	
	ДобавитьФайлы(Истина);
КонецПроцедуры

Процедура ТабличноеПоле2ПередУдалением(Элемент, Отказ)
	ФайлПоИмени = Новый Файл(Элемент.текущаястрока.ПолноеИмяФайлаПС);
	ФайлСуществует = ФайлПоИмени.Существует();
	Если ФайлСуществует Тогда 
		бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТабличноеПоле2ПередУдалением 2", Истина);
		//УдалитьФайлы(Элемент.текущаястрока.ПолноеИмяФайлаПС);
		ОтложенныеЗаданияУдалитьФайлы(Элемент.текущаястрока.ПолноеИмяФайлаПС);
	КонецЕсли;
	//ЭтотОбъект.Записать();
КонецПроцедуры

Процедура ТабличноеПоле2ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТабличноеПоле2ПриВыводеСтроки", Истина);
	
	Если Не ДанныеСтроки.СтатусФайлаПС = Перечисления.СтатусыРипованныхФайлов.OK Тогда 
		ОформлениеСтроки.ЦветФона = WebЦвета.Розовый;
		Если НЕ ДанныеСтроки.Риповать = Истина Тогда
			ДанныеСтроки.Риповать = Истина;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.СтатусФайлаПС = Перечисления.СтатусыРипованныхФайлов.OK Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.БледноЗеленый;
		Если ДанныеСтроки.Риповать = Истина Тогда
			ДанныеСтроки.Риповать = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПоле2ПриАктивизацииСтроки(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТабличноеПоле2ПриАктивизацииСтроки", Истина);
	
	Элемент.ОбновитьСтроки();
КонецПроцедуры

Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КонтрагентОчистка", Истина);
	
	ТипПродукта             = Справочники.АО_ТипыПродуктов.ПустаяСсылка();
    КомментарийПоОтгрузке   = "";
	ТипФотополимера     = Справочники.Номенклатура.ПустаяСсылка();
	ЛиниатураОптима     = Справочники.ЛиниатурыОптима.ПустаяСсылка();
	Ограничения         = Справочники.ОС_ПроцессыЛиниатура.ПустаяСсылка();
	Экспонирование      = Перечисления.ЗначенияЭкспонирования.ПустаяСсылка();
	Микроструктура      = Перечисления.ЗначенияМикроструктуры.ПустаяСсылка();
	Печать              = Перечисления.АО_ВидыПечати.ПустаяСсылка();
	ЭтотОбъект.мПечатьПриИзменении();
    ОС_Стратегия        = Справочники.ОС_Стратегии.ПустаяСсылка();
	Линиатура			= "";
КонецПроцедуры

Процедура ТипФотополимераОчистка(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТипФотополимераОчистка", Истина);
	
	ЛиниатураОптима     = Справочники.ЛиниатурыОптима.ПустаяСсылка();
	Ограничения         = Справочники.ОС_ПроцессыЛиниатура.ПустаяСсылка();
	Экспонирование      = Перечисления.ЗначенияЭкспонирования.ПустаяСсылка();
	Микроструктура      = Перечисления.ЗначенияМикроструктуры.ПустаяСсылка();
	Печать              = Перечисления.АО_ВидыПечати.ПустаяСсылка();
	ЭтотОбъект.мПечатьПриИзменении();
    ОС_Стратегия        = Справочники.ОС_Стратегии.ПустаяСсылка();
	Линиатура			= "";
КонецПроцедуры

Процедура ПолеВвода5Очистка(Элемент, СтандартнаяОбработка)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолеВвода5Очистка", Истина);
	
	Ограничения         = Справочники.ОС_ПроцессыЛиниатура.ПустаяСсылка();
	Экспонирование      = Перечисления.ЗначенияЭкспонирования.ПустаяСсылка();
	Микроструктура      = Перечисления.ЗначенияМикроструктуры.ПустаяСсылка();
	Печать              = Перечисления.АО_ВидыПечати.ПустаяСсылка();
	ЭтотОбъект.мПечатьПриИзменении();
    ОС_Стратегия        = Справочники.ОС_Стратегии.ПустаяСсылка();
	Линиатура			= "";
КонецПроцедуры

Процедура КнОткрытьПапкуФайловЗаказа2Нажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнОткрытьПапкуФайловЗаказа2Нажатие", Истина);
	
	Если ЗначениеЗаполнено(ПутьКФайламАрхива) Тогда 
		ЗапуститьПриложение("explorer " + ПутьКФайламАрхива+"\");
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КонтрагентАвтоПодборТекста", Истина);
	
	Если СтрДлина(Текст)>= 2 Тогда
		Запрос = новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.Наименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &текст
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Ссылка В ИЕРАРХИИ (&ГР1)";
		
		Запрос.УстановитьПараметр("текст","%"+Текст+"%"); 
		Запрос.УстановитьПараметр("ГР1",Справочники.Контрагенты.НайтиПоКоду("000001056")); 
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		Список = новый СписокЗначений;
		для каждого эл из ВыборкаДетальныеЗаписи Цикл 
			Список.Добавить(эл.Ссылка);	
		КонецЦикла;	
		Элемент.СписокВыбора = Список;		
		ВыбранныйЭлемент = ВыбратьИзСписка(Список, Элемент, Список.НайтиПоЗначению(Элемент.Значение));
		Если ВыбранныйЭлемент <> Неопределено Тогда
			Элемент.Значение = ВыбранныйЭлемент.Значение;
			КонтрагентПриИзменении(Элемент);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	Если не Элемент.СписокВыбора.Количество()=0 Тогда
		Сп = Новый СписокЗначений;
		Элемент.СписокВыбора = Сп;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыРазрешитьредактированиеВрАБОТУ(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОсновныеДействияФормыРазрешитьредактированиеВрАБОТУ", Истина);
	
	Если РольДоступна("РольКнопкиРазрешитьРедактированиеЗаявки")Тогда
		
		//Добавим проверку на выставленные документы и пользователей
		Если ЗапретРедактрованияЗаявкиСВыписаннымиДокументами() Тогда
			Возврат;
		КонецЕсли;
		
		//Комментарий при возврате в работу
		КомментарийС = Неопределено;
		Если НЕ Филиал = Справочники.Филиалы.Тула Тогда
			КомментарийС = ВвестиКомментарий();
		КонецЕсли;	
		Если КомментарийС = Неопределено Тогда
			КомментарийС = "";
		КонецЕсли; 
		
		Если НЕ ЕстьРазрешениеОтправитьНаНовыйСтатус(Перечисления.АО_СтатусыЗаявки.ОмВРаботе) Тогда
			Возврат;
		КонецЕсли; 
		
		ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь") ,ТекущаяДата(), Ссылка, Перечисления.АО_СтатусыЗаявки.ОмВРаботе, " Переведено в работу: " + КомментарийС + " ");
		АО_ОбщийМодуль.СтеретьДанныеПоЗаявкеВИсторииСрочнойЗаявки(Ссылка);
		ЭтотОбъект.АО_СтатусыЗаявки = Перечисления.АО_СтатусыЗаявки.ОмВРаботе;
		
		Если ЗначениеЗаполнено(ПутьКФайламАрхива) Тогда
			ОтложенныеЗаданияУдалитьФайлы(ПутьКФайламАрхива);
			//ПутьКФайламАрхива = "";
			НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
			НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламАрхива";
			НовоеИзменениеРеквизита.НовоеЗначение = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКФайламНаВывод) Тогда
			ОтложенныеЗаданияУдалитьФайлы(ПутьКФайламНаВывод);
			//ПутьКФайламНаВывод = "";
			НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
			НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламНаВывод";
			НовоеИзменениеРеквизита.НовоеЗначение = "";
		КонецЕсли;
		
		ОтложенныеЗаданияЗаписатьВФормеЗакрыть();			
	КонецЕсли;
КонецПроцедуры

Функция ЕстьДоступКФайлам(Путь) //Сделать это рекурсивно для всей иерархии
	Файл = Новый Файл(Путь);
	Если Файл.Существует() Тогда
		Попытка
			Файл.УстановитьВремяИзменения(Файл.ПолучитьВремяИзменения());
		Исключение
			///тра ля ля
		КонецПопытки;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура УслугиНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.УслугиНоменклатураНачалоВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Услуга,
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Услуга";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокНоменклатуры = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокНоменклатуры.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Если Не СписокНоменклатуры.Количество() = 0 Тогда
		ФФорма = Справочники.Номенклатура.ПолучитьФормуВыбора("ФормаСписка");
		ФФорма.ЭлементыФормы.Список.ИерархическийПросмотр = Ложь;
		ФФорма.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;	
		ФФорма.Отбор.Ссылка.Значение      = СписокНоменклатуры;
		ФФорма.Отбор.Ссылка.Использование = Истина;
		ПВыбор = ФФорма.ОткрытьМодально();
		Если НЕ ПВыбор = Неопределено Тогда 
			Элемент.Значение = ПВыбор;
		КонецЕсли;
	КонецЕсли;
	
	УслугиНоменклатураПриИзменении(Элемент)
	
КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КонтрагентНачалоВыбора", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.Ссылка В ИЕРАРХИИ(&ГР)";
	
	Запрос.УстановитьПараметр("ГР", Справочники.Контрагенты.НайтиПоКоду("000001056"));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СписокКонтрагентов = Новый СписокЗначений;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокКонтрагентов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Если Не СписокКонтрагентов.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ФФорма = Справочники.Контрагенты.ПолучитьФормуВыбора("ФормаВыбора");
		ФФорма.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;	
		ФФорма.Отбор.Ссылка.Значение      = СписокКонтрагентов;
		ФФорма.Отбор.Ссылка.Использование = Истина;
		ПВыбор = ФФорма.ОткрытьМодально();
		Если ПВыбор <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КтоДляКого.Контрагент,
			|	КтоДляКого.Организация
			|ИЗ
			|	РегистрСведений.КтоДляКого КАК КтоДляКого";
			Результат = Запрос.Выполнить();
			ВДЗ = Результат.Выбрать();
			Пока ВДЗ.Следующий() Цикл
                Если ПВыбор.ПринадлежитЭлементу(ВДЗ.Контрагент) ИЛИ ПВыбор = ВДЗ.Контрагент Тогда
        			Элемент.Значение    = ПВыбор;
					Организация         = ВДЗ.Организация;
					КонтрагентПриИзменении(Элемент);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИсторияСрочная(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОсновныеДействияФормыИсторияСрочная", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияРаботыСоСрочнойЗаявкой.Период КАК Период,
	|	ИсторияРаботыСоСрочнойЗаявкой.Ссылка,
	|	ИсторияРаботыСоСрочнойЗаявкой.Статус,
	|	ИсторияРаботыСоСрочнойЗаявкой.Комментарий КАК Комментарий,
	|	ИсторияРаботыСоСрочнойЗаявкой.Пользователь,
	|	ИсторияРаботыСоСрочнойЗаявкой.ДатаОповещения,
	|	ИсторияРаботыСоСрочнойЗаявкой.РезультатВыбора,
	|	ИсторияРаботыСоСрочнойЗаявкой.ПереведенВОчереднойСтатус
	|ИЗ
	|	РегистрСведений.ИсторияРаботыСоСрочнойЗаявкой КАК ИсторияРаботыСоСрочнойЗаявкой
	|ГДЕ
	|	ИсторияРаботыСоСрочнойЗаявкой.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		Табдок.Очистить();
		
		Макет = ЭтотОбъект.ПолучитьМакет("ИсторияСрочная");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьИстория = Макет.ПолучитьОбласть("История");
		
		ОбластьШапка.Параметры.Ссылка = ЭтотОбъект.Ссылка;
		ТабДок.Вывести(ОбластьШапка);
		
		Для каждого стр Из Результат Цикл
			ОбластьИстория.Параметры.Заполнить(стр);
			ТабДок.Вывести(ОбластьИстория);
		КонецЦикла; 
		
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.Показать();	 
	Иначе
		Предупреждение("Нет истории.", 5, "Ошибка"); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОС_ПроизводствоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОС_ПроизводствоНачалоВыбораИзСписка", Истина);
	
    Элемент.СписокВыбора = ЮГ_ОбщийМодуль.ПолучитьСписокДействующихЭлементовПеречисления(Элемент.Значение);
КонецПроцедуры


//контроль просроченной задолженности
Функция СтопОтгрузка()
	
	Перем СтруктураВозврата;
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СтопОтгрузка", Истина);
	
	Если НЕ Контрагент.ОС_КонтролироватьПДЗ Тогда
		Возврат Ложь;
	КонецЕсли;	
	СтруктураВозврата = АО_ОбщийМодуль.ЮГ_ПолучитьСведенияОПросроченномДолгеКонтрагентаСервер(Организация, Контрагент, ТекущаяДата(), Истина);
	Если СтруктураВозврата.ЕстьПросроченный Тогда
		Возврат Истина;
	Иначе
		Если СтруктураВозврата.ЕстьНапоминание Тогда
			//Если не отправили из АО_ОбщийМодуль.ЮГ_ПолучитьСведенияОПросроченномДолгеКонтрагентаСервер, то отправляем здесь
		КонецЕсли; 
	КонецЕсли; 
	Возврат Ложь;
КонецФункции	

///////////////////////////////////////////////
// Процедуры и функции проверки заполнения   //
///////////////////////////////////////////////

Функция ТабличныеЧастиЗаполнены(ТаблицаЕстьНезаполненные)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТабличныеЧастиЗаполнены", Истина);
	
	Если ТипЗнч(ТаблицаЕстьНезаполненные) = Тип("ТаблицаЗначений") Тогда
		Сообщить("Заявка не может быть передана на вывод по причине:", СтатусСообщения.Важное);
		ПризнакСодерж = ЛОЖЬ;
		НомерСодерж = 0;
		ПризнакМонтаж = ЛОЖЬ;
		НомерМонтаж = 0;
		ПризнакУслуги = ЛОЖЬ;
		НомерУслуги =0;
		Счетчик = 0;
		Для каждого СтрокаТаблицы ИЗ ТаблицаЕстьНезаполненные Цикл
			Счетчик = Счетчик + 1;
			//Выведем незаполненные ячейки по вкладке "Параметры печати"	
			Если СтрокаТаблицы.Таблица = "Содержание" Тогда
				Если НЕ ПризнакСодерж Тогда
					Сообщить("Во вкладке ""Параметры печати"": ");
					ПризнакСодерж = Истина;
				КонецЕсли;
				Если НЕ НомерСодерж = СтрокаТаблицы.НомерСтроки Тогда
					Сообщить("в строке " + СтрокаТаблицы.НомерСтроки + " не заполнены: ");
					НомерСодерж = СтрокаТаблицы.НомерСтроки;
				КонецЕсли;
				Если НЕ Счетчик = ТаблицаЕстьНезаполненные.Количество() Тогда
					Сообщить(СтрокаТаблицы.Колонка + ", ");
				Иначе	
					Сообщить(СтрокаТаблицы.Колонка + ". ");
				КонецЕсли;
				//Выведем незаполненные ячейки по вкладке "Монтаж на астрролон"	
			ИначеЕсли СтрокаТаблицы.Таблица = "Монтаж" Тогда
				Если  НЕ ПризнакМонтаж Тогда 
					Сообщить("Во вкладке ""Монтаж на астрролон"": ");
					ПризнакМонтаж = Истина;
				КонецЕсли;
				Если НЕ НомерМонтаж = СтрокаТаблицы.НомерСтроки Тогда
					Сообщить("в строке " + СтрокаТаблицы.НомерСтроки + " не заполнены: ");
					НомерМонтаж = СтрокаТаблицы.НомерСтроки;
				КонецЕсли;
				Если НЕ Счетчик = ТаблицаЕстьНезаполненные.Количество() Тогда
					Сообщить(СтрокаТаблицы.Колонка + ", ");
				Иначе	
					Сообщить(СтрокаТаблицы.Колонка + ". ");
				КонецЕсли;				
				//Выведем незаполненные ячейки по вкладке "Услуги"	
			ИначеЕсли СтрокаТаблицы.Таблица = "Услуги" Тогда
				Если НЕ ПризнакУслуги Тогда 
					Сообщить("Во вкладке ""Услуги"": ");
					ПризнакУслуги = Истина;
				КонецЕсли;
				Если НЕ НомерУслуги = СтрокаТаблицы.НомерСтроки Тогда
					Сообщить("в строке " + СтрокаТаблицы.НомерСтроки + " не заполнены: ");
					НомерУслуги = СтрокаТаблицы.НомерСтроки;
				КонецЕсли;
				
				Если НЕ Счетчик = ТаблицаЕстьНезаполненные.Количество() Тогда
					Сообщить(СтрокаТаблицы.Колонка + ", ");
				Иначе	
					Сообщить(СтрокаТаблицы.Колонка + ". ");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		Возврат Ложь;
	Иначе	
		Возврат Истина;
	КонецЕсли;
КонецФункции // ТабличныеЧастиЗаполнены()

Функция ВыполнитьПроверкуОтправкиНаВывод()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ВыполнитьПроверкуОтправкиНаВывод", Истина);
	
	КоличествоТиф = НайтиФайлы(ПутьКФайламТиф, "*.tif").Количество();
	КоличествоЗаказ = СодержаниеЗаказа.Итог("Количество");
	Если СчетчикCaT Тогда
		 МножительКоличества = 1;
	Иначе
		 МножительКоличества = 2;
	КонецЕсли;
	Если КоличествоТиф <> МножительКоличества * КоличествоЗаказ Тогда
		Предупреждение("Количество форм в содержании заказа и количество файлов  в папке тиф не совпадают");
		Возврат Ложь;
	КонецЕсли;
	
	//Проверим на совпадение каоличества форм в содержании и кол-ва файлов для копирования 19.10
	Если НЕ СодержаниеЗаказа.Итог("Количество") = ТаблицаФайловТиф.Количество() Тогда
		Предупреждение("Количество форм в содержании заказа и количество файлов для копирования не совпадает! Отправка на вывод отменена.");
		Сообщить("В заявке " + Ссылка + " Количество форм в содержании заказа и количество файлов для копирования не совпадает! Отправка на вывод отменена.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВсеНеобходимыеПоляЗаполнены() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ОС_ТолькоТовары И НЕ ОС_Услуги Тогда
	ТаблицаЕстьНезаполненные = АО_ОбщийМодуль.ЕстьНеЗаполненыеЯчейкиТабличныхЧастей(Ссылка,ОС_астролон);
	Если ТипЗнч(ТаблицаЕстьНезаполненные) = Тип("Булево") И ТаблицаЕстьНезаполненные Тогда
		Сообщить("Заполните табличную часть ""Параметры печати""!");
		Возврат Ложь;
	КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТабличныеЧастиЗаполнены(ТаблицаЕстьНезаполненные) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ОС_Производство = Перечисления.ОС_Производство.Москва ИЛИ ОС_Производство = Перечисления.ОС_Производство.Пенза Тогда
		СтруктураВозврата = мПроверкаФормНаНаличиеТиповГравера();
		Если СтруктураВозврата.УровеньОшибки > 0 Тогда	//Были ошибки
			Если СтруктураВозврата.УровеньОшибки = 2 Тогда
				РезультатПроверки = "Ошибки проверки типов граверов для форм:" + СтруктураВозврата.ТекстОшибок;
				Сообщить(РезультатПроверки);
				ТекстРезюме = "Отправка заявки на вывод невозможна!";
				Сообщить(ТекстРезюме, СтатусСообщения.ОченьВажное);
				Предупреждение("Есть ошибки проверки типов граверов для форм! " + ТекстРезюме);
				Возврат Ложь;
			Иначе	// = 1
				РезультатПроверки = "Информация о проверке типов граверов для форм:" + СтруктураВозврата.ТекстОшибок;
				Сообщить(РезультатПроверки);
				//Ошибки некритичные - перевод статуса разрешен
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Контрагент.ОС_УказыватьДоработкуВТЧ И Доработка = Справочники.РепроВидыДоработок.НайтиПоКоду("000000006") Тогда //С Доработкой
		Если СодержаниеЗаказа.Найти(Истина, "ОС_Доработка") = Неопределено Тогда
			Предупреждение("Отметьте строки с доработкой в содержании заказа");
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
		Предупреждение("Заполните адрес доставки");
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;                                    
КонецФункции // ВыполнитьПроверкуОтправкиНаВывод()              


///////////////////////////////////////////////
// Процедуры и функции работы с файлами      //
///////////////////////////////////////////////

//Для Тулы копируем везде
//Функция выполняет копирование 
//Для Прочее в папку Заказа,
//Для Тулы в Папку Архива и папку Вывода/Тула
//Предварительное копирование - только в папку заказа с названием из папки Output
Функция СкопированыФайлы(Прочее = Ложь, Тула = Ложь, ПредварительноеКопирование = Ложь)
	
	ТекущееЗадание = "";
	Если ЭтотОбъект.ТаблицаФайловТиф.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	КомментФилиала = "Перевод в статус ""На вывод""  отменен.";

	Лен = Ложь; //В зависимости от значения Лен работаем с массивом файлов МасФайловЛЕН или МасФайлов
	Если ВРег(Прав(ЭтотОбъект.ТаблицаФайловТиф[0].ИмяФайлаТиф,3)) = "LEN" Тогда
		Лен = Истина;
	КонецЕсли;
	
	КорневойКаталог = ПутьКФайлам;
	Слеш = ?(Найти(КорневойКаталог,"//"),"/","\");
	ПозСлеш = ФС_СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(ПутьКФайламТиф,Слеш);
	НазваниеПапкиЗаказа = Прав(ПутьКФайламТиф,СтрДлина(ПутьКФайламТиф)- ПозСлеш);
	НазваниеПапкиЗаказа = СтрЗаменить(НазваниеПапкиЗаказа ," ","-");
	НазваниеПапкиЗаказа = ?(Ссылка.ТехническийКомментарий="",НазваниеПапкиЗаказа,НазваниеПапкиЗаказа+" "+БезСпецсимволов(Ссылка.ТехническийКомментарий));
	
	ОжидаемыйКаталог = новый файл(ПутьКФайламТиф);
	
	Если Не ОжидаемыйКаталог.Существует() Тогда  // проверка на наличие папки в \server\outputtiff\***
		Сообщить(КомментФилиала + " Не найден каталог,  : "+ПутьКФайламТиф);	
		Возврат Ложь;
	КонецЕсли;
	
	МасФайлов = НайтиФайлы(ПутьКФайламТиф,"*.tif*");
	МасФайловЛЕН = НайтиФайлы(ПутьКФайламТиф,"*.len");
	Если МасФайлов.Количество()= 0 
		И МасФайловЛЕН.Количество() = 0 Тогда // если копировать на вывод нечего тогда отказ
		Сообщить(КомментФилиала + " Нет файлов ""*.tif"" и ""*.len"" в каталоге , : "+ ПутьКФайламТиф);
		Возврат Ложь;
	КонецЕсли;
	//Запомним для сравнения количества скопированных файлов
	КоличествоФайловTiffLen = ?(Лен, МасФайловЛЕН.Количество(), МасФайлов.Количество());
	
	//Определим является ли копирование из папки Output, или нет.
	Если Найти(ПутьКФайламТиф, "\\Server\rip\outputTiff") = 0 Тогда
		КопированиеИЗОутПут = Ложь;
	Иначе
		КопированиеИЗОутПут = Истина;
	КонецЕсли;
	
	//Проверка на копирование из папки ТИФ&ЛЕН
	Если КопированиеИЗОутПут Тогда
		ПутьВПапкеЗаказа = СтрЗаменить(ПутьКФайламТиф, "\\Server\rip\outputTiff", КорневойКаталог);
		//Если НЕ КопированиеФайлов(ПутьВПапкеЗаказа, Слеш, ?(Лен, МасФайловЛЕН, МасФайлов), Ложь) Тогда
		//	Возврат Ложь;
		//КонецЕсли;
		//ТекущееЗадание = КопированиеФайлов(ПутьВПапкеЗаказа, Слеш, ?(Лен, МасФайловЛЕН, МасФайлов), ТекущееЗадание);
		НайденКаталог = Новый Файл(ПутьВПапкеЗаказа);
		Если НЕ НайденКаталог.Существует() Тогда
			#Если Сервер Тогда
				ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталог(ПутьВПапкеЗаказа, ТекущееЗадание);
			#Иначе
				ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталогНаКлиенте(ПутьВПапкеЗаказа, ТекущееЗадание);
			#КонецЕсли
		КонецЕсли;
		
		Для Каждого НФайл ИЗ ?(Лен, МасФайловЛЕН, МасФайлов) Цикл
			НовоеИмяФайла = НФайл.Имя;
			#Если Сервер Тогда
				ТекущееЗадание = ОтложенныеЗаданияСкопироватьФайлы(НФайл.ПолноеИмя, ПутьВПапкеЗаказа + Слеш + НовоеИмяФайла, ТекущееЗадание);
			#Иначе
				ТекущееЗадание = ОтложенныеЗаданияСкопироватьФайлыНаКлиенте(НФайл.ПолноеИмя, ПутьВПапкеЗаказа + Слеш + НовоеИмяФайла, ТекущееЗадание);
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;	
	
	//Файлы для производство прочее копируются только в папку заказа
	Если НЕ Прочее И НЕ ПредварительноеКопирование Тогда
		КаталогПроизводства = АО_ОбщийМодуль.ПолучитьКорневойКаталогПоНазначения(,Перечисления.НазначенияКаталогов.Производство, ЭтотОбъект.ОС_Производство);
		КорневойКаталог = ?(НЕ КаталогПроизводства = Неопределено, КаталогПроизводства, АО_ОбщийМодуль.ПолучитьКорневойКаталогПоНазначения(, Перечисления.НазначенияКаталогов.Производство, Перечисления.ОС_Производство.Москва));
		КомментФилиала = " Перевод в статус ""На вывод""  отменен.";
		
		Слеш = ?(Найти(КорневойКаталог,"//"),"/","\");
		ДатаВывода = Формат(ТекущаяДата(),"ДФ=yy-MM-dd");
		Если ЗначениеЗаполнено(Ссылка.ТипФотополимера.ЦеноваяГруппа) Тогда
			ТолщинаПолимера = СокрЛП(СтрЗаменить(Ссылка.ТипФотополимера.ЦеноваяГруппа, ".", "_"));
		Иначе
			ТолщинаПолимера = "Не определена";
		КонецЕсли;
		
		//Добавим условие для Лен-файлов
		Если НЕ Лен Тогда
			//Ищем в папке на вывод файлы по именам прикрепленным к заявке
			МасФайлов = Новый Массив;
			Для Каждого ПрикрепленныйФайл ИЗ ТаблицаФайловТиф Цикл
				//Проверка на наличие в папке прикрепленных к заявке файлов
				Если НайтиФайлы(ПутьКФайламТиф,ПрикрепленныйФайл.ИмяФайлаТиф+".*").Количество() = 0 Тогда
					
					Сообщить(КомментФилиала + " Нет указанного файла " + ПрикрепленныйФайл.ИмяФайлаТиф 
					+ "  в каталоге , : "+ПутьКФайламТиф);
					
					Возврат Ложь;
				КонецЕсли;	
				МасФайлов.Добавить(НайтиФайлы(ПутьКФайламТиф,ПрикрепленныйФайл.ИмяФайлаТиф+".*")[0]);
			КонецЦикла;
		Иначе
			МасФайлов =НайтиФайлы(ПутьКФайламТиф, "*.len");
			
		КонецЕсли;
		
		Если МасФайлов.Количество()= 0 Тогда // если копировать на вывод нечего тогда отказ
			Сообщить(КомментФилиала + " Нет файлов в каталоге , : "+ПутьКФайламТиф);
			Возврат Ложь;
		КонецЕсли;
		//Запомним для сравнения количества скопированных файлов
		КоличествоФайловАрхив = МасФайлов.Количество();
		
		//Заменена ЛиниатураОптима на Линиатура на ЛиниатураОптима.Линиатура на Линиатура 
		ПутьАрхив = КорневойКаталог + Слеш + "архив" + Слеш + ДатаВывода + Слеш + ТолщинаПолимера + Слеш + НазваниеПапкиЗаказа+"_" + Линиатура + "_" + КоличествоФайловАрхив;
		
		ПутьАрхив = СтрЗаменить(ПутьАрхив, ",", ".");
		
		//Запишем путь к архиву в заявку
		//ПутьКФайламАрхива = ПутьАрхив;
		НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
		НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламАрхива";
		НовоеИзменениеРеквизита.НовоеЗначение = ПутьАрхив;
		
		НайденКаталог = Новый Файл(ПутьАрхив);
		Если НЕ НайденКаталог.Существует() Тогда
			ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталог(ПутьАрхив, ТекущееЗадание);
		КонецЕсли;
		
		Для Каждого НФайл ИЗ МасФайлов Цикл
			НовоеИмяФайла = АдаптироватьИмяФайлаПередКопированием(НФайл.Имя,НФайл.Расширение);
			ТекущееЗадание = ОтложенныеЗаданияСкопироватьФайлы(НФайл.ПолноеИмя, ПутьАрхив + Слеш + НовоеИмяФайла, ТекущееЗадание);
		КонецЦикла;
		
		//Проверка на копирование из папки ТИФ&ЛЕН
		Если КопированиеИЗОутПут Тогда
			ТекущееЗадание = ОтложенныеЗаданияУдалитьФайлы(путькфайламтиф, ТекущееЗадание);
			НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
			НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламТиф";
			НовоеИзменениеРеквизита.НовоеЗначение = ПутьВПапкеЗаказа;
		КонецЕсли;
		
	//Файлы для производство прочее копируются только в папку заказа
	Иначе  //Если НЕ Прочее
		//Проверка на копирование из папки ТИФ&ЛЕН
		Если КопированиеИЗОутПут Тогда
			ТекущееЗадание = ОтложенныеЗаданияУдалитьФайлы(путькфайламтиф, ТекущееЗадание);
			//Попытка
			//	бб1с_Логирование.ЗаписатьВЛог("\\Server\RIP\outputTiff 6", путькфайламтиф, Ложь);
			//	УдалитьФайлы(путькфайламтиф);
			//	Сообщить("  удален каталог : "+путькфайламтиф); 
			//Исключение
			//	Если Вопрос("не удалось удалить каталог с файлами :"+путькфайламтиф+"перевести в статус <На Вывод> ?",	РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда 
			//		Возврат Ложь;
			//	КонецЕсли;
			//КонецПопытки;
			//ПутьКФайламТиф = ПутьВПапкеЗаказа;
			НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
			НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламТиф";
			НовоеИзменениеРеквизита.НовоеЗначение = ПутьВПапкеЗаказа;
		КонецЕсли;
	КонецЕсли; 
	
	//Запишем Измененные при копировании имена файлов 
	Для Каждого СтрокаИмени ИЗ СоответствиеИменДляКопирования Цикл
		Если СтрокаИмени.Значение = СтрокаИмени.Ключ Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаТЧ = ТаблицаФайловТиф.Найти(мПолучитьИмяФайлаИзстрокиБезРасширения(СтрокаИмени.Ключ), "ИмяФайлаТиф");
		Если НЕ СтрокаТЧ = Неопределено Тогда 
			СтрокаТЧ.ИмяФайлаТиф = мПолучитьИмяФайлаИзстрокиБезРасширения(СтрокаИмени.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	//Если НЕ Прочее Тогда
	//	АО_ПСМ.СоздатьЛогФайлТехИНФО(Строка(ПутьАрхив),ссылка);
	//	//ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(ПутьАрхив);
	//КонецЕсли;

	Возврат Истина;
	
КонецФункции

//Вынесем процедуру копирования отдельно
//Функция КопированиеФайлов(ПутьКуда, Слеш, МасФайлов, ТекущееЗадание = "", ЭтоПродакшн = Ложь)
//	
//	НайденКаталог = Новый Файл(ПутьКуда);
//	Если НЕ НайденКаталог.Существует() Тогда
//		#Если Сервер Тогда
//			ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталог(ПутьКуда, ТекущееЗадание);
//		#Иначе
//			ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталогНаКлиенте(ПутьКуда, ТекущееЗадание);
//		#КонецЕсли
//	КонецЕсли;
//	
//	Для Каждого НФайл ИЗ МасФайлов Цикл
//		Если НЕ ЭтоПродакшн Тогда
//			НовоеИмяФайла = НФайл.Имя;
//		Иначе
//			НовоеИмяФайла = АдаптироватьИмяФайлаПередКопированием(НФайл.Имя,НФайл.Расширение);
//		КонецЕсли;
//		#Если Сервер Тогда
//			ТекущееЗадание = ОтложенныеЗаданияСкопироватьФайлы(НФайл.ПолноеИмя, ПутьКуда + Слеш + НовоеИмяФайла, ТекущееЗадание);
//		#Иначе
//			ТекущееЗадание = ОтложенныеЗаданияСкопироватьФайлыНаКлиенте(НФайл.ПолноеИмя, ПутьКуда + Слеш + НовоеИмяФайла, ТекущееЗадание);
//		#КонецЕсли
//	КонецЦикла;
//	
//	//СДЕЛАТЬ ВОЗВРАТ ТЕКУЩЕГО ЗАДАНИЯ
//	Возврат Истина;
//	
//	
//	
//	
//	
//	//КомментФилиала = " Перевод в статус ""На вывод""  отменен.";
//	//СоздатьКаталог(ПутьКуда);
//	//	ОжидаемыйФайл = новый файл(ПутьКуда);
//	//	Если Не    ОжидаемыйФайл.Существует() Тогда
//	//		Сообщить(КомментФилиала + " Не создан каталог : "+ПутьКуда );
//	//		Возврат Ложь;
//	//	Иначе 		
//	//		Сообщить("  создан каталог : "+ПутьКуда );
//	//	КонецЕсли;
//	//	
//	//	Для Каждого НФайл ИЗ МасФайлов Цикл
//	//        Если ЭтоПродакшн <> Истина Тогда
//	//            НовоеИмяФайла = НФайл.Имя;
//	//		Иначе
//	//		НовоеИмяФайла = АдаптироватьИмяФайлаПередКопированием(НФайл.Имя,НФайл.Расширение);
//	//        КонецЕсли; 
//	//		КопироватьФайл(НФайл.ПолноеИмя, ПутьКуда + Слеш + НовоеИмяФайла);
//	//		
//	//		ОжидаемыйФайл1 = новый файл(ПутьКуда + Слеш + НовоеИмяФайла);
//	//		Если Не    ОжидаемыйФайл1.Существует() Тогда
//	//			
//	//			Сообщить(КомментФилиала + " После копирование не найден : "+ПутьКуда + Слеш + НовоеИмяФайла);
//	//			УдалитьФайлы(ПутьКуда);
//	//			Возврат Ложь;
//	//		Иначе
//	//			Сообщить("записан файл: "+ПутьКуда + Слеш + НовоеИмяФайла); 
//	//		КонецЕсли;
//	//		
//	//	КонецЦикла;
//	//
//	//	Возврат Истина;
//		
//КонецФункции // КопированиеФайлов()


///////////////////////////////////////////////
// Прчее                                     //
///////////////////////////////////////////////

///////////////////////////////////////////////
// ПРЕТЕНЗИЯ                                 //
///////////////////////////////////////////////

//Коноровский А.В. 03.08.2015 18:18:52 +++
//Обязательны указание причин при установке СРЦ "Счет не выставлять"
Процедура СпособРасчетаЦеныПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СпособРасчетаЦеныПриИзменении", Истина);
	
	СтандартнаяОбработка = Ложь;
	Если  НЕ Элемент.Значение = Перечисления.РепроСпособРасчетаЦены.ПустаяСсылка() Тогда
		//Условие для всех СРЦ
		~ОткрытьПричины:
		Форма = ЭтотОбъект.ПолучитьФорму("ПричиныСчетНеВыставлять");
		Форма.ОткрытьМодально();
		Если НЕ ЗначениеЗаполнено(СчетНеВыставлятьПричина) Тогда
			Предупреждение("Заполните расширенное описание причины!");
			Перейти ~ОткрытьПричины;
		КонецЕсли;	
		Если ПричиныСчетНеВыставлять.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ПричиныСчетНеВыставлять[0].Причина) Тогда
			Предупреждение("Заполните причину не выставления счета!");
			Перейти ~ОткрытьПричины;
		КонецЕсли;
		Если ОтделыСчетНеВыставлять.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ОтделыСчетНеВыставлять[0].Отдел) Тогда
			Предупреждение("Заполните отдел!");
			Перейти ~ОткрытьПричины;
		КонецЕсли;	
		//Добавить создание Претензии
	КонецЕсли;
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			//Проверка на заказ-родитель
			Если ЗначениеЗаполнено(ОС_ЗаказРодитель) Тогда
				Попытка
					Записать();
					//Изменение алгоритма - запись связи в регистр сведений
					НаборЗаписей = РегистрыСведений.ОС_СвязьЗаказаовРодительДочерний.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ЗаказРодитель.Установить(ОС_ЗаказРодитель);
					НаборЗаписей.Прочитать();
					Если НЕ НаборЗаписей.Количество() = 0 Тогда
						ЭтаЗаявкаУжеУстановленаДочерней = Ложь;
						ИнойДочернийЗаказ = Неопределено;
						Для каждого Запись Из НаборЗаписей Цикл
							Если Запись.ДочернийЗаказ = ЭтотОбъект.Ссылка Тогда
								ЭтаЗаявкаУжеУстановленаДочерней = Истина;
								Прервать;
							КонецЕсли; 
							ИнойДочернийЗаказ = Запись.ДочернийЗаказ;
						КонецЦикла; 
						Если НЕ ЭтаЗаявкаУжеУстановленаДочерней Тогда
							Предупреждение("У заказа-родителя уже установлен иной дочерний заказ: " + ИнойДочернийЗаказ + "!");
							Элемент.Значение = Перечисления.РепроСпособРасчетаЦены.ПустаяСсылка();
							Возврат;
						КонецЕсли; 
					Иначе 	
						НоваяСтрока = НаборЗаписей.Добавить();
						НоваяСтрока.ЗаказРодитель = ОС_ЗаказРодитель;
						НоваяСтрока.ДочернийЗаказ = Ссылка;
					КонецЕсли;
					НаборЗаписей.Записать();
					
					Сообщить("Установлена связь с заказом-родителем: " + ОС_ЗаказРодитель);
				Исключение
					Сообщить("Не удалось установить связь с родительским заказаом по причине: " + ОписаниеОшибки());
					Элемент.Значение = Перечисления.РепроСпособРасчетаЦены.ПустаяСсылка();
					Возврат;
				КонецПопытки;
				
				ОткрытьПретезию();
				
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры

Процедура ОС_ЗаказРодительПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОС_ЗаказРодительПриИзменении", Истина);
	
	Если ЗначениеЗаполнено(ОС_ЗаказРодитель) Тогда
		Попытка
		    ЗаказРодительО = ОС_ЗаказРодитель.ПолучитьОбъект();
			ЗаказРодительО.ОС_ДочернийЗаказ = Ссылка;
		 	ЗаказРодительО.Записать();
		Исключение
		    Сообщить("Не удалось отметить заказ: " + Ссылка + ", как ""Дочерний"" у заказа: " + ОС_ЗаказРодитель);
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

//Снимем признак "Срочный" для производства "Прочее"
Процедура ОС_ПроизводствоПриИзменении(Элемент)//, ИзЭлемента = Истина
	
	//Если ИзЭлемента = Неопределено Тогда
	//	ИзЭлемента = Истина;
	//КонецЕсли; 
	//
	//Если ИзЭлемента <> Ложь Тогда
	//	Если ОС_Производство = Перечисления.ОС_Производство.Прочее Тогда
	//		Срочный = Ложь;
	//	КонецЕсли; 
	//КонецЕсли; 
	ЭлементыФормы.ЮГ_ПроизводствоПрочее.Видимость = (ОС_Производство = Перечисления.ОС_Производство.Прочее);
	ПроверитьПроизводство();
	
КонецПроцедуры

//Сделаем проверку на Производство = "Прочее" - ??
Процедура СрочныйПриИзменении(Элемент, ИзЭлемента = Истина)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СрочныйПриИзменении", Истина);
	
	мСрочныйПриИзменении(ИзЭлемента);
	
КонецПроцедуры

//Убрать непечатаемые символы вначале текста
Процедура ПолеВвода1ПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолеВвода1ПриИзменении", Истина);
	
	Если НЕ Элемент.Значение = "" Тогда
		АО_ОбщийМодуль.УдалитьЛидирующиеПереходы(Элемент.Значение);
	КонецЕсли;
КонецПроцедуры

//Убрать непечатаемые символы вначале текста
Процедура ПримечанияПоЗаказуПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПримечанияПоЗаказуПриИзменении", Истина);
	
	Если НЕ Элемент.Значение = "" Тогда
		АО_ОбщийМодуль.УдалитьЛидирующиеПереходы(Элемент.Значение);
	КонецЕсли;
КонецПроцедуры

// Проверяет возможность редактирования заявки с выписанными документами
// Возвращаемое значение:
//   <Тип.Вид>   - <Булево, Если нельзя редактировать - Истина, если можно - Ложь>
//
Функция ЗапретРедактрованияЗаявкиСВыписаннымиДокументами()
		
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЗапретРедактрованияЗаявкиСВыписаннымиДокументами", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаякиДокументыКонтрагентов.СчетФактуры
	|ИЗ
	|	РегистрСведений.ЗаякиДокументыКонтрагентов КАК ЗаякиДокументыКонтрагентов
	|ГДЕ
	|	ЗаякиДокументыКонтрагентов.Заявка = &Заявка
	|	И НЕ ЗаякиДокументыКонтрагентов.СчетФактуры = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() 
		И НЕ (СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Беляев Павел"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Покровский А.В."
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Никитин Андрей"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Трунов Алексей"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Строкова"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Фомичева Ирина"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Пилка Ирина Михайловна"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "1С")
		Тогда
		Сообщить("У вас нет прав на редактирование документа по которому сформированы документы!");
		Возврат ИСТИНА;
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции // ЗапретРедактрованияЗаявкиСВыписаннымиДокументами()

// <Описание функции>
// Проверяет возможность редактирования заявки с выписанными документами без изменения других реквизитов
// Возвращаемое значение:
//   <Тип.Вид>   - <Булево, Если можно редактировать - Истина, если  нельзя - Ложь>
//
Функция РедактрованиеЗаявкиСВыписаннымиДокументами()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РедактрованиеЗаявкиСВыписаннымиДокументами", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаякиДокументыКонтрагентов.СчетФактуры
	|ИЗ
	|	РегистрСведений.ЗаякиДокументыКонтрагентов КАК ЗаякиДокументыКонтрагентов
	|ГДЕ
	|	ЗаякиДокументыКонтрагентов.Заявка = &Заявка
	|	И НЕ ЗаякиДокументыКонтрагентов.СчетФактуры = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() 
		И (СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Беляев Павел"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Покровский А.В."
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Строкова"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Фомичева Ирина"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "Пилка Ирина Михайловна"
		ИЛИ СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование) = "1С")
		Тогда
		Сообщить("Изменен контрагент без изменения реквизитов заявки");
		Возврат ИСТИНА;
	КонецЕсли;
	
	Возврат ЛОЖЬ;
	
КонецФункции

//Действия при установки признака заказа - "Услуги"
Процедура ТолькоУслугиПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТолькоУслугиПриИзменении", Истина);
	
	Если ОС_Услуги Тогда
		Ответ = Вопрос("Данные по флексформам будут очищены! Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Установка признака ""Услуги""");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СодержаниеЗаказа.Очистить();
			СодержаниеМонтажа.Очистить();
			СводныйЗаказ.Очистить();
			ОбновлениеОтображенияЭлементовФормы();
			Если НЕ ЗначениеЗаполнено(ДатаОтгрузки) Тогда
				ДатаОтгрузки = ТекущаяДата();
				ЭтотОбъект.Срочный = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

///////////////////////////////////////////////
// Процедуры и функции работы со строками    //
///////////////////////////////////////////////

Процедура ДействияФормыОС_ДобавитьКомментарий(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыОС_ДобавитьКомментарий", Истина);
	
	тмпКомментарий = ЭтотОбъект.ПолучитьФорму("ФормаВводаКомментария2").ОткрытьМодально();
	Если тмпКомментарий = "" Тогда
		Возврат;
	КонецЕсли;

	ПримечанияПоЗаказу = ПримечанияПоЗаказу + Символы.ПС + тмпКомментарий;
	НовыйСтатусЗаявки = АО_СтатусыЗаявки;	
	Комментарий = "Добавлен комментарий:"  + Символы.ПС + тмпКомментарий;
	ЭтотОбъект.мИзменитьСтатус(глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("глТекущийПользователь") ,АО_ОбщийМодуль.ТекДата(), Ссылка, НовыйСтатусЗаявки, Комментарий);    
	Попытка
		Записать();
	Исключение
		Сообщить("Не удалось записать заявку " + Ссылка + " по причине: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

//Процедура создает претензию и отправляет письмо о создании претензии
Процедура ОткрытьПретезию()

	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОткрытьПретезию", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Претенз.Ссылка
	|ИЗ
	|	Документ.Претензия КАК Претенз
	|ГДЕ
	|	Претенз.Заявка = &Заявка
	|	И НЕ Претенз.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Заявка", ОС_ЗаказРодитель);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда  
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВыборкаДетальныеЗаписи.Ссылка.ПолучитьФорму("ФормаДокумента3").Открыть();
		КонецЦикла;
	Иначе
		ПретензияО = Документы.Претензия.СоздатьДокумент();
		ПретензияО.Заполнить(ОС_ЗаказРодитель);
		Попытка
		
			ПретензияО.Записать();
		    Сообщить("Создан документ: " + ПретензияО);
		Исключение
		    Сообщить("Не удалось записать претензию: " + ПретензияО + ". По причине: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		//Если ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ОтправлятьПочтуИзТестовойБазы) 	
		//	Тогда
		//	Если СформированыДокументы() Тогда
		//	КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(ПретензияО.Подразделение) Тогда
		//		Подразделение = ПретензияО.Подразделение;
		//		Запрос = Новый Запрос;
		//		Запрос.Текст = 
		//		"ВЫБРАТЬ
		//		|	ОС_ПочтаРуководителейПодразделений.Email
		//		|ИЗ
		//		|	РегистрСведений.ОС_ПочтаРуководителейПодразделений КАК ОС_ПочтаРуководителейПодразделений
		//		|ГДЕ
		//		|	ОС_ПочтаРуководителейПодразделений.Подразделение = &Подразделение";
		//		
		//		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		//		
		//		РезультатЗапроса = Запрос.Выполнить();
		//		
		//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//		
		//		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		//			ОтправитьПисьмоОПретензииПодразделению(ПретензияО.Ссылка, Подразделение, ВыборкаДетальныеЗаписи.Email);
		//		КонецЕсли;
		//		
		//	КонецЕсли;	
		//	
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьПретезию()

Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КонтрагентОкончаниеВводаТекста", Истина);
	
	Возврат;
	
	Если СтрДлина(Текст)>= 2 Тогда
		Запрос = новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.Наименование
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &текст
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Ссылка В ИЕРАРХИИ (&ГР1)";
		
		Запрос.УстановитьПараметр("текст","%"+Текст+"%"); 
		Запрос.УстановитьПараметр("ГР1",Справочники.Контрагенты.НайтиПоКоду("000001056")); 
		
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
		Список = новый СписокЗначений;
		для каждого эл из ВыборкаДетальныеЗаписи Цикл 
			Список.Добавить(эл.Ссылка);	
		КонецЦикла;	
		Элемент.СписокВыбора = Список;		
		ВыбранныйЭлемент = ВыбратьИзСписка(Список, Элемент, Список.НайтиПоЗначению(Элемент.Значение));
		Если ВыбранныйЭлемент <> Неопределено Тогда
			Элемент.Значение = ВыбранныйЭлемент.Значение;
			КонтрагентПриИзменении(Элемент);
			
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	Если не Элемент.СписокВыбора.Количество()=0 Тогда
		Сп = Новый СписокЗначений;
		Элемент.СписокВыбора = Сп;
	КонецЕсли;

КонецПроцедуры

Процедура ОС_ЗаказРодительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОС_ЗаказРодительНачалоВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
	Если ЕстьСвязьСРодителем(Ссылка) Тогда 
		Ответ = Вопрос("У заказа уже установлен родительский заказ! Отменить существующую связь?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Отмена);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	ОчиститьСвязьСРодителем(Ссылка);
		//Иначе 
			Возврат;
		//КонецЕсли;
	КонецЕсли;
	Форма = УстановитьОтборПоКонтрагенту();
	Элемент.Значение = Форма.ОткрытьМодально();
	ОС_ЗаказРодительПриИзменении(Элемент);
КонецПроцедуры

Процедура ОС_ДочернийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОС_ДочернийЗаказНачалоВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
	Если ЕстьСвязьСДочерним(Ссылка) Тогда 
		
		Ответ = Вопрос("У заказа уже установлен дочерний заказ! Отменить существующую связь?", РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Отмена);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	ОчиститьСвязьСДочерним(Ссылка);
		//Иначе 
			Возврат;
		//КонецЕсли;
		
	КонецЕсли;
	Форма = УстановитьОтборПоКонтрагенту();
	Элемент.Значение = Форма.ОткрытьМодально();
	
КонецПроцедуры

Функция УстановитьОтборПоКонтрагенту()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.УстановитьОтборПоКонтрагенту", Истина);
	
	Форма = Документы.АО_ЗаявкаПокупателя.ПолучитьФормуВыбора("ФормаВыбора");
	Форма.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
	Форма.Отбор.Контрагент.Значение = Контрагент;
	Форма.Отбор.Контрагент.Использование = Истина;
	Возврат Форма;
КонецФункции // УстановитьОтборПоКонтрагенту()

Функция ЕстьПретензия()
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЕстьПретензия", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Претенз.Ссылка
	|ИЗ
	|	Документ.Претензия КАК Претенз
	|ГДЕ
	|	Претенз.Заявка = &Заявка
	|	И НЕ Претенз.ПометкаУдаления
	|	И НЕ Претенз.Заявка = ЗНАЧЕНИЕ(Документ.АО_ЗаявкаПокупателя.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	Результат = Запрос.Выполнить();
	
    Возврат НЕ Результат.Пустой();
КонецФункции // ЕстьПретензия()

//Подбор от 4 цифр номера заказа
Процедура ОС_ЗаказАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОС_ЗаказАвтоПодборТекста", Истина);
	
	Если СтрДлина(Текст)>= 4 Тогда
		Список = ПолучитьСписокЗаказовПоНомеру(Текст);
		Если Список.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		Элемент.СписокВыбора = Список;		
		ВыбранныйЭлемент = ВыбратьИзСписка(Список, Элемент, Список.НайтиПоЗначению(Элемент.Значение));
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ОС_ЗаказРодитель = ВыбранныйЭлемент.Значение;
			ОС_ЗаказРодительПриИзменении(Элемент);
			Обновить();
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

//Получим список заказов по номеру
Функция ПолучитьСписокЗаказовПоНомеру(Текст)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолучитьСписокЗаказовПоНомеру", Истина);
	
	Список = новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АО_ЗаявкаПокупателя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АО_ЗаявкаПокупателя КАК АО_ЗаявкаПокупателя
	|ГДЕ
	|	АО_ЗаявкаПокупателя.Номер ПОДОБНО &Номер
	|	И НЕ АО_ЗаявкаПокупателя.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Номер", "%"+Текст+"%");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Список;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	
	для каждого эл из ВыборкаДетальныеЗаписи Цикл 
		Список.Добавить(эл.Ссылка);	
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокЗаказовПоНомеру()

Функция ЕстьСвязьСДочерним(Заявка)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЕстьСвязьСДочерним", Истина);
	
	НаборЗаписей = РегистрыСведений.ОС_СвязьЗаказаовРодительДочерний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказРодитель.Установить(Заявка);
	НаборЗаписей.Прочитать();
	Возврат  НЕ НаборЗаписей.Количество() = 0;
	
КонецФункции // ЕстьСвязьСДочерним()

Функция ЕстьСвязьСРодителем(Заявка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЕстьСвязьСРодителем", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОС_СвязьЗаказаовРодительДочерний.ЗаказРодитель
		|ИЗ
		|	РегистрСведений.ОС_СвязьЗаказаовРодительДочерний КАК ОС_СвязьЗаказаовРодительДочерний
		|ГДЕ
		|	ОС_СвязьЗаказаовРодительДочерний.ДочернийЗаказ = &ДочернийЗаказ";
	
	Запрос.УстановитьПараметр("ДочернийЗаказ", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();
	
КонецФункции // ЕстьСвязьСДочерним()

Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.УслугиНоменклатураПриИзменении", Истина);
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.Услуги.ТекущиеДанные.Примечание) Тогда
	    ЭлементыФормы.Услуги.ТекущиеДанные.Примечание = НазваниеЗаказа;
	КонецЕсли;	
	
	ТекущаяСтрока = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Внимание! Не указан контрагент. Установка цены из регистра невозможна!", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
    
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	Репро_ЦеныСрезПоследних.ВидПродукции КАК ВидПродукции,
    |	Репро_ЦеныСрезПоследних.Цена,
    |	Репро_ЦеныСрезПоследних.Доработка КАК Доработка,
    |	Репро_ЦеныСрезПоследних.Микроструктура КАК Микроструктура,
    |	Репро_ЦеныСрезПоследних.Валюта КАК ВалютаЦены
    |ИЗ
    |	РегистрСведений.Репро_Цены.СрезПоследних(
    |			,
    |			Контрагент = &Контрагент
    |				И Номенклатура = &Номенклатура
    |				И Валюта = &Валюта) КАК Репро_ЦеныСрезПоследних
    |
    |УПОРЯДОЧИТЬ ПО
    |	ВидПродукции УБЫВ,
    |	Микроструктура,
    |	Доработка";
    
    Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
    Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
    Запрос.УстановитьПараметр("Валюта", Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов);
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента) Тогда
		ТекстСообщения = "Для контрагента не указан основной договор.";
	КонецЕсли; 
	ЮГ_ВалютаВзаиморасчетов = Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если НЕ ЗначениеЗаполнено(ЮГ_ВалютаВзаиморасчетов) Тогда
		ЮГ_ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли; 
	Если ТекстСообщения <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Валюта = &Валюта", "Истина");
	КонецЕсли; 
    
    ТаблРезультат = Запрос.Выполнить().Выгрузить();
    
	Если ТаблРезультат.Количество() > 0 Тогда
		
		СтрокаТабл = ТаблРезультат[0];
		ТекущаяСтрока.Цена = СтрокаТабл.Цена;
		ТекущаяСтрока.ВалютаЦены = СтрокаТабл.ВалютаЦены;
		Если ТекущаяСтрока.Количество = 0 Тогда
			ТекущаяСтрока.Количество = 1;
		КонецЕсли; 
		Если ТекстСообщения <> "" Тогда
			Сообщить("Внимание! " + ТекстСообщения + " Отбор цены произведен без учета валюты!", СтатусСообщения.Внимание);
		КонецЕсли; 
		
		Если ТаблРезультат.Количество() > 1 Тогда
			ТекстСообщения = "Установлена цена из регистра по:
			| - ВидПродукции = " + СтрокаТабл.ВидПродукции + "
			| - Микроструктура = " + СтрокаТабл.Микроструктура + "
			| - Доработка = " + СтрокаТабл.Доработка + "
			| - Валюта = " + СтрокаТабл.ВалютаЦены
			;
			Сообщить(ТекстСообщения);
		КонецЕсли; 
		
		УслугиКоличествоПриИзменении(Неопределено);
		
	Иначе
		
		Сообщить("Для контрагента и номенклатуры услуг не найдена цена!", СтатусСообщения.Важное);
		
    КонецЕсли; 
	
КонецПроцедуры

Процедура ОС_ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОС_ТоварыНоменклатураНачалоВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ?(Филиал = Справочники.Филиалы.Москва, "ФормаВыбораТоварыМосква", "ФормаВыбораТоварыТула");
	Форма = Справочники.Номенклатура.ПолучитьФормуВыбора(ФормаВыбора);
	Элемент.Значение = Форма.ОткрытьМодально();
КонецПроцедуры

Процедура ОС_ТоварыНоменклатураПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОС_ТоварыНоменклатураПриИзменении", Истина);
	
	Если НЕ Элемент.Значение.ПринадлежитЭлементу(Справочники.Номенклатура.НайтиПоКоду("00000000001")) Тогда
		Сообщить("Номенклатура должна быть из папки """ + Справочники.Номенклатура.НайтиПоКоду("00000000001").Наименование + """");
		Элемент.Значение = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;	
КонецПроцедуры

Процедура ПереключитьНаСепарации()
	
	ДоступностьCat = ?(ОС_ИспользоватьСепарации_РеквизитФормы, тCaT_Linux, Ложь);
	
	ЭлементыФормы.Ограничения.Видимость           	= ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ПолеВвода5.Видимость            	= НЕ ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ПодрезатьПоСепарациям.Доступность = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ПодрезатьПоКомпозиту.Доступность  = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ПрибавитьТехПоле.Доступность      = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.Инверсия.Доступность              = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.Уголки.Доступность                = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.Зеркальность.Доступность          = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ТекстоваяИнформация.Доступность   = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ПоворотПоЧасовой.Доступность      = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ПрПрочее.Доступность              = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.CaT.Доступность                   = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.ОтриповатьCaT.Доступность         = ОС_ИспользоватьСепарации_РеквизитФормы;
	ЭлементыФормы.CaT_Уголки.Доступность            = ДоступностьCat;
	ЭлементыФормы.CaT_Поворот.Доступность           = ДоступностьCat;
	ЭлементыФормы.ПанельCatNew.Доступность 			= ДоступностьCat;
	
КонецПроцедуры // ПереключитьНаСепарации()

Процедура ЗаполнитьПоНазваниюЗаказаНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЗаполнитьПоНазваниюЗаказаНажатие", Истина);
	
	Заполн = Ложь;
	Для каждого Стр ИЗ СодержаниеЗаказа Цикл
		Если ЗначениеЗаполнено(Стр.НазваниеЗаказа) Тогда
			Заполн= Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Если Заполн Тогда
		Если Вопрос("Название будет перезаполнено в каждой строке, вы уверены?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			Для каждого Стр ИЗ СодержаниеЗаказа Цикл
				Стр.НазваниеЗаказа = НазваниеЗаказа;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для каждого Стр ИЗ СодержаниеЗаказа Цикл
			Стр.НазваниеЗаказа = НазваниеЗаказа;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаОткрытияПапкиКонтрагентаНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнопкаОткрытияПапкиКонтрагентаНажатие", Истина);
	
	Если ЗначениеЗаполнено(ЭлементыФормы.ПутьКФайламКонтрагента.Значение) Тогда
		ЗапуститьПриложение("explorer " + ЭлементыФормы.ПутьКФайламКонтрагента.Значение);
	КонецЕсли;	
КонецПроцедуры

Функция ВернутьПутьВыходнойПапкиСтехнологией()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ВернутьПутьВыходнойПапкиСтехнологией", Истина);
	
	Если  Экспонирование = Перечисления.ЗначенияЭкспонирования.Default Тогда 
		
		Технология ="_";
	Иначе 
		Технология =  ?(ЗначениеЗаполнено(Экспонирование),"_"+Строка(Экспонирование),"_");
		
	КонецЕсли;
	
	// потом микроструктура
	Если ЗначениеЗаполнено(Микроструктура) Тогда 
		
		Если Микроструктура = Перечисления.ЗначенияМикроструктуры.Default_2540 Тогда 
			Технология = Технология +"_";
		Иначе 
			Технология = Технология +?(ЗначениеЗаполнено(Микроструктура) ,"_"+Строка(Микроструктура),"_")  
		КонецЕсли;
	Иначе 
		Технология = Технология +"_";
		
	КонецЕсли;
	
	ПапкаСФайламиТиф = Формат(ТекущаяДата(),"ДФ=dd.MM.yy")+ 
		"_" + Формат(Число(Номер),"ЧГ = 100")+ 
		"_" + АО_ПСМ.ПробелыНаТире(?(ЗначениеЗаполнено(Контрагент.ОС_НаименованиеДляПапок), Контрагент.ОС_НаименованиеДляПапок, Контрагент.Наименование)) +
		"_" + АО_ПСМ.ПробелыНаТире(СокрЛП(ТипФотополимера.ЦеноваяГруппа)) +
		"_" + АО_ПСМ.ПробелыНаТире(СокрЛП(ТипФотополимера.Наименование)) +
		"_" + АО_ПСМ.ПробелыНаТире(Печать) +
		"_" + АО_ПСМ.ПробелыНаТире(Технология);
	ПапкаСФайламиТиф = СтрЗаменить(ПапкаСФайламиТиф, ",", ".");
	Возврат ПутьКФайлам + "\"+  ПапкаСФайламиТиф;
	
КонецФункции

Процедура ДействияФормыРазбитьЗаказ(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДействияФормыРазбитьЗаказ", Истина);
	
	Если ЭтаФорма.Модифицированность Тогда
		Предупреждение("Перед разбиением Заявки ее необходимо записать.");
		Возврат;
	КонецЕсли; 
	Если Вопрос("После разбиения эта Заявка будет закрыта. Продолжить?", РежимДиалогаВопрос.ОКОтмена) <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.АО_ЗаявкаПокупателя.СоздатьДокумент();
	НовыйЗаказ.Дата = ТекущаяДата();
	НовыйЗаказ.Контрагент = Контрагент;
	//Заполняем адрес доставки
	Если Контрагент <> Неопределено и Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		ЗапросНаАдресДоставки = новый Запрос;
		ЗапросНаАдресДоставки.Текст =
		"ВЫБРАТЬ
		|	АдресаДоставки.АдресДоставки
		|ИЗ
		|	РегистрСведений.АдресаДоставки КАК АдресаДоставки
		|ГДЕ
		|	АдресаДоставки.Контрагент = &Контрагент";
		ЗапросНаАдресДоставки.УстановитьПараметр("Контрагент", Контрагент);
		РезультатАдресДоставки = ЗапросНаАдресДоставки.Выполнить().Выгрузить();
		Если РезультатАдресДоставки.Количество() = 1 Тогда
			НовыйЗаказ.АдресДоставки = РезультатАдресДоставки[0].АдресДоставки;
		КонецЕсли;
	КонецЕсли;
	НовыйЗаказ.Организация = Организация;
	НовыйЗаказ.ТипФотополимера = ТипФотополимера;
	НовыйЗаказ.ЛиниатураОптима = ЛиниатураОптима;
	НовыйЗаказ.Микроструктура = Микроструктура;
	НовыйЗаказ.Экспонирование = Экспонирование;
	НовыйЗаказ.Печать = Печать;
	НовыйЗаказ.НазваниеЗаказа = НазваниеЗаказа;
	НовыйЗаказ.ДатаОтгрузки = ДатаОтгрузки;
	НовыйЗаказ.АдресДоставки = АдресДоставки;
	НовыйЗаказ.Время = Время;
	НовыйЗаказ.ДатаУтверждения = ДатаУтверждения;
	НовыйЗаказ.ДатаИзготовления = ДатаИзготовления;
	НовыйЗаказ.Срочный = ЭтотОбъект.Срочный;
	НовыйЗаказ.Доработка = Доработка;
	НовыйЗаказ.СпособОплаты = СпособОплаты;
	НовыйЗаказ.Филиал = Филиал;
	НовыйЗаказ.КомментарийКонтрагентаОДП = КомментарийКонтрагентаОДП;
	НовыйЗаказ.КомментарийКонтрагентаПроизводство = КомментарийКонтрагентаПроизводство;
	НовыйЗаказ.КомментарийКонтрагентЛогистика = КомментарийКонтрагентЛогистика;
	НовыйЗаказ.КомментарийПоОтгрузке = КомментарийПоОтгрузке;
	НовыйЗаказ.ЮГ_КомментарийДляПриемки = ЮГ_КомментарийДляПриемки;
	НовыйЗаказ.КомментарийКДоставке = "Доставку необходимо совместить с родительским заказом №" + Номер;
	НовыйЗаказ.Обработал_Заказ = Обработал_Заказ;
	НовыйЗаказ.ТехническийКомментарий = "Материнский заказ: № " + Номер;
	НовыйЗаказ.ИнформацияДляПроизводства = "Материнский заказ: № " + Номер;
	НовыйЗаказ.Линиатура = Линиатура;
	НовыйЗаказ.РодительскийНомер = Номер;
	НовыйЗаказ.ЗаказПринял = глЗначениеПеременной("глТекущийПользователь");
	НовыйЗаказ.мУстановкаВ_НовомДокументеНастроекCaT_ПоУмолчанию();
	НовыйЗаказ.ОС_Производство = ОС_Производство;
	
	НовыйЗаказ.РаппортПечати = ЭтотОбъект.РаппортПечати;
	НовыйЗаказ.НаправлениеПечати = ЭтотОбъект.НаправлениеПечати;
	НовыйЗаказ.ФВал = ЭтотОбъект.ФВал;
	НовыйЗаказ.Лента = ЭтотОбъект.Лента;
	НовыйЗаказ.Дисторция = ЭтотОбъект.Дисторция;
	НовыйЗаказ.ЮГ_ДисторсияИз1С = ЭтотОбъект.ЮГ_ДисторсияИз1С;
	
	НовыйЗаказ.Записать();
	ЭтотОбъект.мУстановкаВ_НовомДокументеНастроекCaT_ПриКопировании(НовыйЗаказ.Ссылка);
	НовыйЗаказ.Прочитать();
	Если КомментарийКДоставке <> "" Тогда
		КомментарийКДоставке = КомментарийКДоставке + Символы.ПС + "Доставку необходимо совместить с дочерним заказом №" + НовыйЗаказ.Номер;
	Иначе
		КомментарийКДоставке = "Доставку необходимо совместить с дочерним заказом №" + НовыйЗаказ.Номер;
	КонецЕсли;
	
	Записать();	
	
	Набор = РегистрыСведений.ОС_РазбитыеЗаказы.СоздатьНаборЗаписей();
	Набор.Отбор.Подчиненный.Установить(НовыйЗаказ.Ссылка);
	НоваяЗапись = Набор.Добавить();
	НоваяЗапись.Основной = Ссылка;
	НоваяЗапись.Подчиненный = НовыйЗаказ.Ссылка;
	Набор.Записать();
	
	
	Форма = НовыйЗаказ.ПолучитьФорму("ФормаДокумента");
	
	Форма.Открыть();
	
	СвязьУстановлена = ЗаказРазбит();
	
	ЭлементыФормы.ОС_РазбитыйЗаказ.Значение = СвязьУстановлена;
	
	ЭлементыФормы.ОС_РазбитыйЗаказ.Доступность = РольДоступна("ОС_Бухгалтер") И СвязьУстановлена;
	ТехническийКомментарий = "Дочерний заказ: № " + НовыйЗаказ.Номер;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

//НоваяВерсия
Функция СоздатьЗаказРепропарк()
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СоздатьЗаказРепропарк", Истина); //2021 05 31
	
	Pid = ПолучитPidПолимера();
	Exp = ПолучитьКодДляРепропарка(Экспонирование);
	Mikr = ПолучитьКодДляРепропарка(Микроструктура, Ложь);
	НетСоответствияПараметров = Ложь;
	Если Pid = Неопределено Тогда
		Сообщить("Не установлено соответствие Фотополимера: " + ТипФотополимера + " ОптимасмАрт в базе Репропарк. Перевод на Вывод отменен.");
	    НетСоответствияПараметров = Истина;
	КонецЕсли;
	Если Exp = Неопределено Тогда
		Сообщить("Не установлено соответствие Экспонирования: " + Экспонирование + " ОптимасмАрт в базе Репропарк. Перевод на Вывод отменен.");
	    НетСоответствияПараметров = Истина;
	КонецЕсли;
	Если Mikr = Неопределено Тогда
		Сообщить("Не установлено соответствие Микроструктуры: " + Микроструктура + " ОптимасмАрт в базе Репропарк. Перевод на Вывод отменен.");
	    НетСоответствияПараметров = Истина;
	КонецЕсли;
	
	Если НетСоответствияПараметров Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Подключиться() Тогда
		Сообщить("Не установлено соединение с базой Репропарк. Перевод на Вывод отменен.");
	    Возврат Ложь;
	КонецЕсли;	
	
	Сервер = "lk.repropark.ru";// Сервер сайта (lk.repropark.ru)
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	ДатаСтрока = "&date_due=" + Формат(?(Срочный, ТекущаяДата(), ТекущаяДата() + 24*60*60), "ДФ='yyyy-MM-dd ЧЧ:мм:сс'");
	
	СтрокаПараметровСоздания = "/api/order/add?auth_key=" + КлючСессии; 
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&title=" + 
	ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + "_" +
	НазваниеЗаказа;//Заголовок
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&pid=" + Pid; //Ид полимера в базе Репропарк 	
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + ДатаСтрока;// Дата отгрузки 
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&comment="  + ИнформацияДляПроизводства;// Коментарий
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&LineOptima=" + Линиатура;//Линиатура
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&colorproof="  + Строка(0);//Цветопроба
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&urgent="      + Строка(?(Срочный, 1, 0));//Срочный
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&Print=" + НРег(Печать); //Печать
	ИсходнаяТаблица = ЗначениеВСтрокуВнутр(СодержаниеЗаказа.Выгрузить());
	СтрокаПередачиТаблицы = СтрЗаменить(ИсходнаяТаблица, "#", "35символ");
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&tabl_koment=" + СтрокаПередачиТаблицы; //Преобразуем таблицу Содержания заказа в строку
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&exp=" + Exp; //КАВ Передаем код для репропарка
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&mikr=" + Mikr; //Вторым параметром понимаем, что нужен порядок Микроструктуры
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&rasterline=179"; //Нужный ничегонезначащий параметр
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&uniq_key=" + Ссылка.УникальныйИдентификатор(); //Нужный ничегонезначащий параметр
	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&improvement=" + ?(Контрагент.ОС_Спеццена = Перечисления.ОС_Спеццены.Спеццена1, 1, 0); //Спеццена, если выбрана у контрагента - 1, иначе - 0
	Если ЭтотОбъект.ОС_Производство = Перечисления.ОС_Производство.Прочее И ЭтотОбъект.ЮГ_ПроизводствоПрочее = Перечисления.ЮГ_ПроизводствоПрочее.Липецк Тогда
		СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&id_double=" + "Lipetsk"; //Липецк
	//ИначеЕсли ЭтотОбъект.ОС_Производство = Перечисления.ОС_Производство.Прочее И ЭтотОбъект.ЮГ_ПроизводствоПрочее = Перечисления.ЮГ_ПроизводствоПрочее.Пенза Тогда
	//	СтрокаПараметровСоздания = СтрокаПараметровСоздания + "&id_double=" + "Penza"; //Пенза
	КонецЕсли; 
	
	
	Ресурс = СтрокаПараметровСоздания + "&version=v0003"; // Запрос к сайту с параметрами так как Через отправку Файла HTTPСоединение команда не пройдет.
	
	ЕстьФайлы = Истина;
	
	Лен = Ложь;
	Если ВРег(Прав(ЭтотОбъект.ТаблицаФайловТиф[0].ИмяФайлаТиф,3)) = "LEN" Тогда
		Лен = Истина;
	КонецЕсли;
	
	Если НЕ Лен Тогда
		//Ищем в папке на вывод файлы по именам прикрепленным к заявке
		МасФайлов = Новый Массив;
		Для Каждого ПрикрепленныйФайл ИЗ ТаблицаФайловТиф Цикл
			//Проверка на наличие в папке прикрепленных к заявке файлов
			Если НайтиФайлы(ПутьКФайламТиф,ПрикрепленныйФайл.ИмяФайлаТиф+".*").Количество() = 0 Тогда
				
				Сообщить(" Нет указанного файла " + ПрикрепленныйФайл.ИмяФайлаТиф 
				+ "  в каталоге , : "+ПутьКФайламТиф);
				
				Возврат Ложь;
			КонецЕсли;	
			МасФайлов.Добавить(НайтиФайлы(ПутьКФайламТиф,ПрикрепленныйФайл.ИмяФайлаТиф+".*")[0]);
		КонецЦикла;
	Иначе
		МасФайлов =НайтиФайлы(ПутьКФайламТиф, "*.len");
	КонецЕсли;
	
	Если МасФайлов.Количество()= 0 Тогда // если копировать на вывод нечего тогда отказ
		Сообщить(" Нет файлов ""*.tif"" и ""*.len"" в каталоге , : "+ ПутьКФайламТиф);
		ЕстьФайлы = Ложь;
	КонецЕсли;
	КоличествоФайловTiffLen =  МасФайлов.Количество();
	
	Если ЕстьФайлы Тогда
		//Файл для загрузки
		ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
		
		//Коноровский А.В. 20.07.2017 13:01:21 +++
		Если (Филиал = Справочники.Филиалы.Тула) И (ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ФормироватьАрхивНаСервере)) Тогда
			ПапкаТемп = Новый Файл("\\FS\Zakaz\Temp");
			Если Не ПапкаТемп.Существует() Тогда
				СоздатьКаталог("\\FS\Zakaz\Temp");
			КонецЕсли;
			
			ИмяФайлаОтправкиНачало = СтрЗаменить(ИмяФайлаОтправкиНачало, "C:\Users\1c\AppData\Local\Temp", "\\FS\Zakaz\Temp");
		КонецЕсли;
		
		//Коноровский А.В. 20.07.2017 13:12:16 +++
		ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
		УровеньЖурналаРегистрации.Информация, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, "Начало формирования архива");
		
		ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI, Символы.ПС, Ложь);
		
		ИмяФайлаДляЗагрузки = ПолучитьИмяВременногоФайла("zip");
		
		Если (Филиал = Справочники.Филиалы.Тула) И (ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ФормироватьАрхивНаСервере)) Тогда
			ИмяФайлаДляЗагрузки = СтрЗаменить(ИмяФайлаДляЗагрузки, "C:\Users\1c\AppData\Local\Temp", "\\FS\Zakaz\Temp");
		КонецЕсли;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайлаДляЗагрузки);
		Сч = 0;
		Для Каждого НФайл ИЗ МасФайлов Цикл
			ЗаписьZIP.Добавить(НФайл.ПолноеИмя);
			Сч = Сч + 1;
		КонецЦикла;
		Если НЕ КоличествоФайловTiffLen = Сч Тогда
			Сообщить("Количество файлов в заявке: " + КоличествоФайловTiffLen + " и в передаваемом файле: " + Сч + " не совпадает!");
			Возврат Ложь;
		КонецЕсли;	
		ЗаписьZIP.Записать();
		
		ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
		УровеньЖурналаРегистрации.Информация, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, 
		"Конец формирования архива");
		
		Файл = Новый Файл(ИмяФайлаДляЗагрузки);
		Если Файл.Размер() = 0 Тогда
			Сообщить("Файл передачи пустой!");
			Возврат Ложь;
		КонецЕсли;	
		ИмяФайлаДляСервера = Файл.Имя;
		РасширениеФайлаДляСервера = Сред(Файл.Расширение, 2);
		//++ Отправка файла
		Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		//---Папки-----------------------
		ПапкаВременныхФайлов = КаталогВременныхФайлов();
		
		Если (Филиал = Справочники.Филиалы.Тула) И (ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ФормироватьАрхивНаСервере)) Тогда
			ПапкаВременныхФайлов = СтрЗаменить(ПапкаВременныхФайлов, "C:\Users\1c\AppData\Local\Temp", "\\FS\Zakaz\Temp");
		КонецЕсли;
		
		ИмяФайлаОтвета = ПапкаВременныхФайлов + Boundary + ".tmp";
		ИмяФайлаОтправки = ПапкаВременныхФайлов + Boundary + ".txt";
		//---Папки-----------------------
		МассивФайловДляОбъединения = Новый Массив;	
		
		//Определяем раздел двоичных данных
		ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary);
		//Указываем имя файла для сервера
		//На сервере оно появится в массиве $_FILES['files[]']['filename']
		ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""files[]""; filename=""" + ИмяФайлаДляСервера + """");
		//Указываем тип передаваемых данных.
		//С таким же успехом в Content-Type можно указать application/x-octet-stream или application/x-zip-compressed
		ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: application/x-zip-compressed");
		ФайлОтправкиНачало.ЗаписатьСтроку("");
		//---ДвоичныеДанные-----------------------
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
		ИмяФайлаДляЗагрузкиВременный = ПолучитьИмяВременногоФайла(РасширениеФайлаДляСервера);
		
		Если (Филиал = Справочники.Филиалы.Тула) И (ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ФормироватьАрхивНаСервере)) Тогда
			ИмяФайлаДляЗагрузкиВременный = СтрЗаменить(ИмяФайлаДляЗагрузкиВременный, "C:\Users\1c\AppData\Local\Temp", "\\FS\Zakaz\Temp");
		КонецЕсли;
		
		КопироватьФайл(ИмяФайлаДляЗагрузки, ИмяФайлаДляЗагрузкиВременный);
		МассивФайловДляОбъединения.Добавить(ИмяФайлаДляЗагрузкиВременный);
		
		ФайлОтправкиНачало.Закрыть();//Дубль
		
		//Дубль
		ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
		
		Если (Филиал = Справочники.Филиалы.Тула) И (ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ФормироватьАрхивНаСервере)) Тогда
			ИмяФайлаОтправкиКонец = СтрЗаменить(ИмяФайлаОтправкиКонец, "C:\Users\1c\AppData\Local\Temp", "\\FS\Zakaz\Temp");
		КонецЕсли;
		
		ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь);
		
		//Завершение раздела двоичных данных
		ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary);
		
		//Завершение сообщения для сервера
		ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary + "--");
		
		ФайлОтправкиКонец.Закрыть();
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
		
		//Теперь сформированные фрагменты сообщения для сервера объединяем в один файл
		ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
		
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type","multipart/form-data;boundary=" + Boundary);
		
		HTTP = ПолучитьHTTPСоединение();
		
		ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
		УровеньЖурналаРегистрации.Информация, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, "Начало отправки");
		
		Попытка
			
			HTTP.ОтправитьДляОбработки(ИмяФайлаОтправки, Ресурс, ИмяФайлаОтвета,ЗаголовокHTTP);//Получаем результат создания где поле ID Уникальный номер заказа на сайте.
			
		Исключение
			Сообщить("Не удалось создать заказ по причине: " + ОписаниеОшибки());
			ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, 
			"Ошибка отправки заказа в РП: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
		УровеньЖурналаРегистрации.Информация, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, "Конец отправки");
		
		ЧтениеФайла = новый ЧтениеJSON;
		ЧтениеФайла.ОткрытьФайл(ИмяФайлаОтвета);
		ДанныеКлюча = ПрочитатьJSON(ЧтениеФайла);
		Попытка
			
			Id_Заказа = ДанныеКлюча.response.order.id;
			
		Исключение
			Id_Заказа = "";
		КонецПопытки;
		Если Id_Заказа = "" Тогда
			Сообщить("НЕ УДАЛОСЬ ЗАПИСАТЬ ЗАЯВКУ НА САЙТЕ!!! Id_Заказа = """"");
			ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, "Ошибка отправки заказа в РП: Id_Заказа = """"");
			Возврат Ложь;
		КонецЕсли;
		
		//УдалитьФайлы(ЗаписьZIP);
		ОтложенныеЗаданияУдалитьФайлы(ЗаписьZIP);

	Иначе
		//Заявки без файлов не отправляются!
		Сообщить("Не удалось найти файлов заказа! Отправка на вывод отменена.");
		ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
		УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, "Не удалось найти файлов заказа! " + Id_Заказа);
		Возврат Ложь;
	КонецЕсли;	
	//-- Отправка файла
	ОС_НомерРепропарк = Id_Заказа;
	Сообщить("В базе Репропарк создан заказ номер: " + Id_Заказа);
	
	ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.СозданиеЗаказа", 
		УровеньЖурналаРегистрации.Информация, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, 
		"Создана заявка в РП: " + Id_Заказа);

	Если Сред(СтрокаСоединенияИнформационнойБазы(), СтрДлина(СтрокаСоединенияИнформационнойБазы()) - 5, 4) = "work" 
		//Проверка на разрешения отправки из тестовой базы
		ИЛИ ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ОтправлятьПочтуИзТестовойБазы) Тогда
		ОтправитьПисьмоВРепропарк(Id_Заказа);
		ОтправитьПисьмоЛогистам();
	КонецЕсли;
	
	//КГГ - филиал "Тула" уже не существует
	//Если (Филиал = Справочники.Филиалы.Тула) И (ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ФормироватьАрхивНаСервере)) Тогда
	//	Попытка
	//		
	//		УдалитьФайлы(ПапкаВременныхФайлов);
	//		
	//	Исключение
	//		
	//	КонецПопытки;
	//КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СоздатьЗаказРепропарк()

Функция Подключиться()

	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Подключиться", Истина);
	
	Сервер = "lk.repropark.ru";// Сервер сайта (lk.repropark.ru)
	Ресурс = "/api/login?email=" + "566@repropark.ru" +"&password=" + "566gf_KL4" +"&version=v0003" ; // Запрос к сайту с параметрами так как Через отправку Файла HTTPСоединение команда не пройдет.
	
	//ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	//Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	//Новый СертификатыУдостоверяющихЦентровWindows());
	
	HTTP = ПолучитьHTTPСоединение(); //HTTPСоединение("lk.repropark.ru",7443,,,,,ssl1); - тест
											//HTTPСоединение("lk.repropark.ru",,,,,,ssl1); - боевая
	ФайлЗапроса = ПолучитьИмяВременногоФайла();

	ТекстовыйФайл = Новый ТекстовыйДокумент; // чтобы получить ответ от сайта необходимо что то отправить (вот тут и отправляем файл"tmp") ни какой логической нагрузки это не несет
	ТекстовыйФайл.УстановитьТекст("1");
	ТекстовыйФайл.Записать(ФайлЗапроса, КодировкаТекста.UTF8);
	
    ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	HTTP.ОтправитьДляОбработки(ФайлЗапроса, Ресурс, ФайлРезультата);// Получаем обратный файл ответа от сайта где записан ключ сессии
	
	ЧтениеФайла = новый ЧтениеJSON;
	ЧтениеФайла.ОткрытьФайл(ФайлРезультата);
	ДанныеКлюча = ПрочитатьJSON(ЧтениеФайла);
	
	Если ДанныеКлюча.success Тогда //Проверка прошла ли регистрация (success: true "Авторизация прошла" False:"Авторизация не прошла по каким либо причинам" 
		КлючСессии =  ДанныеКлюча.response.auth_key;
		
		Попытка
			бб1с_Логирование.ЗаписатьВЛог("КлючСессии", КлючСессии);
		Исключение
		КонецПопытки;
		
		УдалитьФайлы(ФайлЗапроса);
		
		ЗаписьЖурналаРегистрации ("ОбращенияКСервисуРепропарк.Авторизация", 
		УровеньЖурналаРегистрации.Информация, Метаданные.Документы.АО_ЗаявкаПокупателя, Ссылка, 
		"Авторизация прошла, ключ сессии: " + Строка(КлючСессии));
		
		Возврат Истина;
	Иначе
		Сообщить("Авторизация не прошла! КЛЮЧ НЕ ПОЛУЧЕН!!!");
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

//Функция для создания заказов в Репропарк
Функция ПолучитPidПолимера()

	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолучитPidПолимера", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОС_СоответствиеПолимеровОптимаРепропарк.Pid
		|ИЗ
		|	РегистрСведений.ОС_СоответствиеПолимеровОптимаРепропарк КАК ОС_СоответствиеПолимеровОптимаРепропарк
		|ГДЕ
		|	ОС_СоответствиеПолимеровОптимаРепропарк.ТипФотополимера = &ТипФотополимера";
	
	Запрос.УстановитьПараметр("ТипФотополимера", ТипФотополимера);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Pid;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитPidПолимера()

Функция ПолучитьКодДляРепропарка(Значение, Экспонирование = Истина)

	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолучитьКодДляРепропарка", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыДляРепропарка.Код
		|ИЗ
		|	РегистрСведений.ОС_ЭкспонированиеДляРепропарка КАК ПараметрыДляРепропарка
		|ГДЕ
		|	ПараметрыДляРепропарка.Экспонирование = &Значение";
	
	Запрос.УстановитьПараметр("Значение", Значение);
	Если Не Экспонирование Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Экспонирование", "Микроструктура");
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Код;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьПорядокПеречисления()

Процедура ОтправитьПисьмоВРепропарк(Id_Заказа)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтправитьПисьмоВРепропарк", Истина);
	//
	//// Поскольку все получатели к удалению выполнять процедуру безсмыслено
	//Возврат;
	//
	//ИсходящееПисьмо = Новый ИнтернетПочтовоеСообщение;
	//ИсходящееПисьмо.Отправитель =  "auto@optimasmart.ru";
	//ИсходящееПисьмо.Тема = "Создан заказ  ОптимасмАрт с номером: " + Id_Заказа; 
	//
	//тмпТекст = "Проверьте, пожалуйста заказ с названием: " + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + "_" +
	//	НазваниеЗаказа + Символы.ПС + Символы.ПС
	//	+"Автоматическая рассылка www.optimasmart.ru";
	//ИсходящееПисьмо.Тексты.Добавить(тмпТекст);
	//ИсходящееПисьмо.Получатели.Очистить();
	//
	//Попытка
	//	
	//	ОС_ОтправкаПочты.ОтправитьПисьмо(ИсходящееПисьмо);
	//	
	//Исключение
	//	
	//КонецПопытки;

КонецПроцедуры

Процедура ОтправитьПисьмоЛогистам()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтправитьПисьмоЛогистам", Истина);
	
	//ИсходящееПисьмо = Новый ИнтернетПочтовоеСообщение;
	//ИсходящееПисьмо.Отправитель =  "auto@optimasmart.ru";
	//ИсходящееПисьмо.Тема = "В Репропарк отправлен заказ: " + ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка) + "_" +
	//НазваниеЗаказа
	//+ " Клиент: " + Контрагент.Наименование;
	//
	//ТекстНач = 
	//	"Дата отгрузки:" + Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy") + Символы.ПС
	//	+ ?(Срочный, "СРОЧНЫЙ"  + Символы.ПС, "");
	//ИсходящееПисьмо.Тексты.Добавить(ТекстНач);
	//
	//тмпТекст = "Толщина форм: " + ТипФотополимера.ЦеноваяГруппа + Символы.ПС 
	//	+"Количество Форм: " + ОбщееКоличество + Символы.ПС
	//	+"Размеры Форм: " + Символы.ПС;
	//Для каждого Строчка ИЗ СодержаниеЗаказа Цикл
	//	тмпТекст = тмпТекст + "Длина: " + Строчка.Длина + ", Ширина: " + Строчка.Ширина + ", Количество: " + Строчка.Количество + ", Площадь: " + Строчка.Площадь + Символы.ПС;
	//КонецЦикла;	
	//
	//тмпТекст = тмпТекст +"Автоматическая рассылка www.optimasmart.ru";
	//ИсходящееПисьмо.Тексты.Добавить(тмпТекст);
	//ИсходящееПисьмо.Получатели.Очистить();
	////Для проверки работы
	//ИсходящееПисьмо.Получатели.Добавить("commerce@optimasmart.ru");
	//ИсходящееПисьмо.Получатели.Добавить("lg@optimasmart.ru");
	//
	//Попытка
	//	
	//	ОС_ОтправкаПочты.ОтправитьПисьмо(ИсходящееПисьмо);
	//	
	//Исключение
	//	
	//КонецПопытки;

	Если ОтложенныеЗадания.Найти(Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоЛогистам, "Тип") = Неопределено Тогда
		Сеансы       = ПолучитьСеансыИнформационнойБазы();
		НомерСеанса  = НомерСеансаИнформационнойБазы();
		ТекущийСеанс = Неопределено;
		Для Каждого Сеанс Из Сеансы Цикл
			Если Сеанс.НомерСеанса = НомерСеанса Тогда
				ТекущийСеанс = Сеанс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
		Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
		НовоеЗадание = ОтложенныеЗадания.Добавить();
		НовоеЗадание.НомерЗадания 		= "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
		НовоеЗадание.ВыполнятьПосле 	= "";
		НовоеЗадание.ВыполнятьНаСервере = Истина;
		НовоеЗадание.ИмяКомпьютера 		= ИмяКомпьютера;
		НовоеЗадание.НомерСеанса		= Идентификатор;
		НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
		НовоеЗадание.Тип 				= Перечисления.ОтложенныеЗаданияТипы.ОтправитьПисьмоЛогистам;
		НовоеЗадание.СтрокаПараметров 	= "";
		Сообщить("Отправка письма логистам отложена до момента записи Заявки");
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьHTTPСоединение()

	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолучитьHTTPСоединение", Истина);
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	Новый СертификатыУдостоверяющихЦентровWindows());

	Если ОС_РазрешениеДействий.ДействиеРазрешено(Перечисления.ОС_ДействияПользователя.ОтправлятьЗаказыРПВТестовуюБазу) Тогда
		Возврат Новый HTTPСоединение("lk.repropark.ru",7443,,,,,ssl1);
	Иначе
		Возврат Новый HTTPСоединение("lk.repropark.ru",,,,,,ssl1);
	КонецЕсли;	

КонецФункции // ПолучитьHTTPСоединение()

Процедура ОсновныеДействияФормыРасходныйОрдерНаТовары(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОсновныеДействияФормыРасходныйОрдерНаТовары", Истина);
	
	РТУ = АО_ОбщийМодуль.ПолучитьРеализацииПоЗаявкам(Ссылка, Истина, Ложь);
	Если РТУ = Неопределено Тогда
		Сообщить("Документы не выписаны. Печать невозможна!");
		Возврат;
	КонецЕсли;
	Если РТУ.Количество() > 1 Тогда
		Сообщить("Найдено две реализации на данную заявку. Обратитесь в бухгалтерию.");
		Пока РТУ.Следующий() Цикл
			Сообщить(РТУ.Ссылка);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	Если РТУ.Следующий() Тогда
		РТУО = РТУ.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	ТабДок = РТУО.ПечатьДокумента();
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.Напечатать();
КонецПроцедуры

Процедура ОсновныеДействияФормыЦветныеРаспечатки(Кнопка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОсновныеДействияФормыЦветныеРаспечатки", Истина);
	
	ПечатьРаспечаток(Истина);
КонецПроцедуры

Функция ВвестиКомментарий(ВозвратПриемки = Ложь)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ВвестиКомментарий", Истина);
	
	Если НЕ ВозвратПриемки Тогда
		Возврат ПолучитьОбщуюФорму("ОС_ФормаВводаКомментария").ОткрытьМодально();	
	Иначе	
		Возврат ПолучитьОбщуюФорму("ОС_ФормаВводаКомментария_ВозвратПриемки").ОткрытьМодально();	
	КонецЕсли;

КонецФункции // ВвестиКомментарий()

Процедура СоздатьПапкуОутпутНажатие(Элемент)
	Если Ссылка = Документы.АО_ЗаявкаПокупателя.ПустаяСсылка() Тогда
		Сообщить("ОШИБКА! Создание папки output невозможно до записи документа");
	ИначеЕсли НЕ ЗначениеЗаполнено(ПутьКФайлам) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит ПутьКФайлам, невозможно создать папку output");
	ИначеЕсли НЕ ЗначениеЗаполнено(Дата) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит Дата, невозможно создать папку output");
	ИначеЕсли НЕ ЗначениеЗаполнено(НомерЗаказа) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит НомерЗаказа, невозможно создать папку output");		
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит Контрагент, невозможно создать папку output");		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТипФотополимера) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит ТипФотополимера, невозможно создать папку output");		
	ИначеЕсли НЕ ЗначениеЗаполнено(Печать) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит Печать, невозможно создать папку output");		
	ИначеЕсли НЕ ЗначениеЗаполнено(Микроструктура) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит Микроструктура, невозможно создать папку output");		
	ИначеЕсли НЕ ЗначениеЗаполнено(Экспонирование) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит Экспонирование, невозможно создать папку output");
	ИначеЕсли Вопрос("ВНИМАНИЕ! После создания папки Output документ будет записан и закрыт. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		НоваяСтрокаЛогФайлТехИнфо = АО_ПСМ.ПробелыНаТире(
			Формат(Дата, "ДФ=dd.MM.yy")                                                                                             + ";"
			+ НомерЗаказа                                                                                                           + ";"
			+ ?(ЗначениеЗаполнено(Контрагент.ОС_НаименованиеДляПапок), Контрагент.ОС_НаименованиеДляПапок, Контрагент.Наименование) + ";"
			+ СокрЛП(ТипФотополимера.ЦеноваяГруппа)                                                                                 + ";"
			+ СокрЛП(ТипФотополимера.Наименование)                                                                                  + ";"
			+ Печать                                                                                                                + ";"
			+ Микроструктура                                                                                                        + ";"
			+ СпособВыводаФорм                                                                                                      + ";"
			+ ?(Контрагент.ОС_СрезатьТехническуюИнформацию, "CUT", "")                                                              + ";"
			+ Экспонирование                                                                                                        + ";"
			+ ?(Контрагент.ОС_КороткийНомерПодОбрезку, "short", "")                                                                 + ";"
		);
		ПутьКФайламТифТек = АО_ПСМ.ВернутьПутьВыходнойПапкиСтехнологией(Ссылка);
		Если СтрокаЛогФайлТехИнфо <> НоваяСтрокаЛогФайлТехИнфо Тогда
			ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(ПутьКФайламТифТек, НоваяСтрокаЛогФайлТехИнфо);
		Иначе
			ОтложенныеЗаданияСоздатьКаталог(ПутьКФайламТифТек);
		КонецЕсли;
		НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
		НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламТиф";
		НовоеИзменениеРеквизита.НовоеЗначение = ПутьКФайламТифТек;
	    ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	КонецЕсли;
КонецПроцедуры

Функция ЗаказРазбит()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОС_РазбитыеЗаказы.Основной
		|ИЗ
		|	РегистрСведений.ОС_РазбитыеЗаказы КАК ОС_РазбитыеЗаказы
		|ГДЕ
		|	ОС_РазбитыеЗаказы.Основной = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОС_РазбитыеЗаказы.Основной
		|ИЗ
		|	РегистрСведений.ОС_РазбитыеЗаказы КАК ОС_РазбитыеЗаказы
		|ГДЕ
		|	ОС_РазбитыеЗаказы.Подчиненный = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции // ЗаказРазбит()

Функция ПолучитьСписокОтбораПоКодуДоработок()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПолучитьСписокОтбораПоКодуДоработок", Истина);
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить("000000001");
	СписокОтбора.Добавить("000000006");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Репро_Цены.Доработка.Код КАК КодДоработки
	|ИЗ
	|	РегистрСведений.Репро_Цены КАК Репро_Цены
	|ГДЕ
	|	Репро_Цены.Контрагент = &Контрагент
	|	И НЕ Репро_Цены.Доработка.Код В (""000000001"", ""000000006"")";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОтбора.Добавить(Выборка.КодДоработки);
	КонецЦикла;	
	Возврат СписокОтбора;
КонецФункции	

Процедура ДоработкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ДоработкаНачалоВыбора", Истина);
	
	Если Истина Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.РепроВидыДоработок.ПолучитьФормуВыбора(, Элемент);
		ЭлементОтбораПоКоду = ФормаВыбора.Отбор.Код;
		Если ЭлементОтбораПоКоду <> Неопределено Тогда
			ЭлементОтбораПоКоду.ВидСравнения = ВидСравнения.ВСписке; 
			ЭлементОтбораПоКоду.Значение = ПолучитьСписокОтбораПоКодуДоработок();
			ЭлементОтбораПоКоду.Использование = Истина;
		КонецЕсли;	
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Код.Доступность = Ложь; 
	    ФормаВыбора.Открыть(); 	
	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьДочернийЗаказ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АО_ЗаявкаПокупателя.Ссылка
	|ПОМЕСТИТЬ Дочки
	|ИЗ
	|	Документ.АО_ЗаявкаПокупателя КАК АО_ЗаявкаПокупателя
	|ГДЕ
	|	НЕ АО_ЗаявкаПокупателя.ОС_ЗаказРодитель = ЗНАЧЕНИЕ(Документ.АО_ЗаявкаПокупателя.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дочки.Ссылка КАК СсылкаДочка,
	|	АО_ЗаявкаПокупателя.Ссылка КАК СсылкаРодитель
	|ИЗ
	|	Дочки КАК Дочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АО_ЗаявкаПокупателя КАК АО_ЗаявкаПокупателя
	|		ПО Дочки.Ссылка.ОС_ЗаказРодитель = АО_ЗаявкаПокупателя.Ссылка
	|			И (АО_ЗаявкаПокупателя.ОС_ДочернийЗаказ = ЗНАЧЕНИЕ(Документ.АО_ЗаявкаПокупателя.ПустаяСсылка))
	|			И (Дочки.Ссылка.ОС_ЗаказРодитель = &Родитель)
	|ГДЕ
	|	НЕ АО_ЗаявкаПокупателя.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Родитель", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОС_ДочернийЗаказ = ВыборкаДетальныеЗаписи.СсылкаДочка;
		Попытка
		
			Записать();
		
		Исключение
		
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

Процедура Об_ОборудованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Об_ОборудованиеНачалоВыбора", Истина);
	
 	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Об_Производство) Тогда
		Предупреждение("Выберите производство");
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Группа", Об_Производство);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оборудование.Ссылка
	|ИЗ
	|	Справочник.Оборудование КАК Оборудование
	|ГДЕ
	|	Оборудование.Ссылка В ИЕРАРХИИ(&Группа)
	|	И НЕ Оборудование.ЭтоГруппа";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ФормаВыбора = Справочники.Оборудование.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФормаВыбора.Отбор.Ссылка.Значение.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура Об_ПроцессПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Об_ПроцессПриИзменении", Истина);
	
	ОбновитьДанныеИзПроцесса(3);
КонецПроцедуры

Процедура Об_ПроцессНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Об_ПроцессНачалоВыбораИзСписка", Истина);
	
	ЭлементыФормы.Об_Процесс.СписокВыбора.Очистить();
	Для Каждого СтрокаТаблицы Из Об_Оборудование.Процессы Цикл
		ЭлементыФормы.Об_Процесс.СписокВыбора.Добавить(СтрокаТаблицы.НазваниеПроцесса);
	КонецЦикла;
КонецПроцедуры

Процедура Об_ПроизводствоПриИзменении(Элемент)
	ОбновитьДанныеИзПроцесса(1);
КонецПроцедуры

Процедура Об_ПроизводствоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Об_ПроизводствоНачалоВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Оборудование.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	Для Каждого СтрокаТаблицы Из Контрагент.ДоступныеПроизводства Цикл
		ФормаВыбора.Отбор.Ссылка.Значение.Добавить(СтрокаТаблицы.Производство);
	КонецЦикла;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура РаботыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РаботыПриВыводеСтроки", Истина);
	
	тмпКоличествоНормочасов = ПолучитьКоличествоНормочасов(ДанныеСтроки);
	ОформлениеСтроки.Ячейки.КоличествоНормочасов.ОтображатьТекст = Истина;
	ОформлениеСтроки.Ячейки.КоличествоНормочасов.Текст = тмпКоличествоНормочасов;
	
КонецПроцедуры

Процедура РаботыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РаботыПриПолученииДанных", Истина);
	
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура РаботыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РаботыПередНачаломДобавления", Истина);
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		Форма = Справочники.ОС_ВидыРабот.ПолучитьФорму("ФормаПодбора");
		Форма.РежимВыбора = Истина;
		Форма.ВладелецФормы = ЭлементыФормы.Работы;
		Форма.Открыть();
	КонецЕсли;	
КонецПроцедуры

Процедура РаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РаботыОбработкаВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
	НоваяСтрока = ДокументОбъект.Работы.Добавить();
	НоваяСтрока.Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	НоваяСтрока.ВидРаботы = ВыбранноеЗначение;
	НоваяСтрока.ВремяДобавленияРаботы = ТекущаяДата();
	НоваяСтрока.Статус = АО_ОбщийМодуль.ПолучитьТекущийСтатусЗаявки(Ссылка, ТекущаяДата());
	НоваяСтрока.ВремяСтатуса = АО_ОбщийМодуль.ПолучитьВремяТекущийСтатусЗаявки(Ссылка, ТекущаяДата());
КонецПроцедуры

Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РаботыПриНачалеРедактирования", Истина);
	
    Если НЕ флМожноАдминистрироватьРаботы Тогда 
		Возврат;
	КонецЕсли;	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.Исполнитель = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
КонецПроцедуры

Процедура РаботыПередУдалением(Элемент, Отказ)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.РаботыПередУдалением", Истина);
	
	Отказ = НЕ флМожноАдминистрироватьРаботы ;
КонецПроцедуры

Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.АдресДоставкиНачалоВыбора", Истина);
	
    Форма = РегистрыСведений.АдресаДоставки.ПолучитьФорму("ФормаВыбора");
    Форма.РежимВыбора = Истина;
    Форма.ОтборКонтрагент = Контрагент;
    ВыбАдрес = Форма.ОткрытьМодально();
    Если ЗначениеЗаполнено(ВыбАдрес) Тогда
        Элемент.Значение = ВыбАдрес;
    КонецЕсли; 
    
КонецПроцедуры

Процедура ОграниченияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОграниченияНачалоВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
    Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
        Предупреждение("Заполните Контрагента", 2);
        Возврат;  
    Иначе
        Если НЕ Контрагент.НовыеСепарации Тогда
            Предупреждение("Для Контрагента с НЕ установленным флагом Новые сепарации это поле не заполняется!", 2);
            Возврат;
        КонецЕсли;
    КонецЕсли;
    Если НЕ ЗначениеЗаполнено(ТипФотополимера) Тогда
        Предупреждение("Заполните тип фотополимера", 2);
        Возврат;  
    КонецЕсли; 
	
	ТаблВыбораОграничений = ЭтотОбъект.мПолучитьТаблВыбораОграничений();
	
	Фрм = ПолучитьФорму("ФормаВыбораСтроки");
    Фрм.ЭлементыФормы.ТаблицаВыбора.Значение = ТаблВыбораОграничений.Скопировать();
    Фрм.ЭлементыФормы.ТаблицаВыбора.Значение.Колонки.Комментарий.Ширина = 30;
	//Фрм.ЭлементыФормы.ТаблицаВыбора.Значение.Колонки.Вставить(2, "Стратегия");
	//Для Каждого Стр Из Фрм.ЭлементыФормы.ТаблицаВыбора.Значение Цикл
	//    Стр.Стратегия = Стр.Линиатура.Стратегия;
	//КонецЦикла;
    Фрм.ЭлементыФормы.ТаблицаВыбора.СоздатьКолонки();
    Если Фрм.ЭлементыФормы.ТаблицаВыбора.Значение.Количество() > 0 Тогда
        ВыбСтрокаОграничений = Фрм.ОткрытьМодально();
        Если
            ВыбСтрокаОграничений <> Неопределено
            И
            ВыбСтрокаОграничений.Количество() > 0
        Тогда
            ЭтотОбъект.Ограничения      = ВыбСтрокаОграничений.Получить(0).Линиатура;
            ЭтотОбъект.ОС_Стратегия     = ВыбСтрокаОграничений.Получить(0).Стратегия;
            ЭтотОбъект.Экспонирование   = ВыбСтрокаОграничений.Получить(0).Экспонирование;
            ЭтотОбъект.Печать           = ВыбСтрокаОграничений.Получить(0).Печать;
			ЭтотОбъект.мПечатьПриИзменении();
            ЭтотОбъект.Микроструктура   = ВыбСтрокаОграничений.Получить(0).Микроструктура;
			ЭтотОбъект.Линиатура		= Строка(ВыбСтрокаОграничений.Получить(0).Линиатура.Ruling);//СправочникСсылка.ОС_ПроцессыЛиниатура.Ruling
			
			ЮГ_ТаблВрем = ОС_НоваяРиповка.ЮГ_ПолучитьТЧСепарацииПоПроцессуЛиниатура(ЭтотОбъект.Ограничения);
			ЭтотОбъект.ОС_Сепарации.Загрузить(ЮГ_ТаблВрем);
			
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НаВыводПослеИзготовлен()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.НаВыводПослеИзготовлен", Истина);
	
	Если НЕ ЗначениеЗаполнено(НомерЗаказа) Тогда
		НомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	КонецЕсли;

	Попытка
		ЭтотОбъект.Записать();
	Исключение
		Возврат;
	КонецПопытки;
	//Оставлены процедуры проверки. Предоплата и ПДЗ оставлены в текущей процедуре	

	//Сначала проверяем СРЦ, если есть, других проверок по оплате не делаем. 
	//Если нет СРЦ проверяем Предоплату, затем ПДЗ.
		
	//МОСКВА
	
	//Проверка на СРЦ Доп контроль заполнения
	Если ЭтотОбъект.Срочный Тогда	// (Пользователь,ОтветДа, Ссылка, Статус, Комментарий)
		АО_ОбщийМодуль.СменитьСтатусСрочной(глЗначениеПеременной("глТекущийПользователь"), Истина , Ссылка, Перечисления.СрочныеСтатусы.ПереданВПроизводствоИзОДП, Комментарий,Ложь);
	КонецЕсли;
	
	//ТУЛА	
		
	//Запишем имеющиеся Jpegи в папку контрагента
	//Раньше JPEGи копировались ещё до вызова текущей процедуры, теперь ставится отложенное задание.
	//СкопироватьJpegи();
	

	//Требуется реинжиниринг: перенести переводы статусов в функции и пометсить все процедуры в транзакцию с попыткой записи заявки	
	//Установим статус "На вывод"
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмНаВывод;
	ЭтотОбъект.ОтправилНаВывод = глЗначениеПеременной("глТекущийПользователь");
	ЭтотОбъект.Отправил_НаВывод = глЗначениеПеременной("глТекущийПользователь");
	Если НЕ ЗначениеЗаполнено(Обработал_Заказ) Тогда
		Обработал_Заказ = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	ЭтотОбъект.ДатаНаВывод = ТекДата();
	
	СтруктураВозвратаПечатьРаспечаток = ПечатьРаспечаток(Истина);
	
	Комментарий = СтруктураВозвратаПечатьРаспечаток.Информация;
		
	Если НЕ СтатусПереведен(НовыйСтатусЗаявки, Комментарий) Тогда
		Сообщить("Статус заявки не может быть изменен НаВыводПослеИзготовлен!",СтатусСообщения.Важное);
		//Удалим файлы из архива на вывод
		//Попытка
			//УдалитьФайлы(ПутьКФайламАрхива);
			//Сообщить("  удален каталог : "+ПутьКФайламАрхива);
			
			//Записать();
		ОтложенныеЗаданияУдалитьФайлы(ПутьКФайламАрхива);
			//ПутьКФайламАрхива = "";
		НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
		НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламАрхива";
		НовоеИзменениеРеквизита.НовоеЗначение = "";
			
		//Исключение	
		//	Сообщить("Не удалось удалить каталог с файлами :"+ПутьКФайламАрхива+" удалите его вручную"); 
		//КонецПопытки;
	Иначе
		
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МонтажНаАстролон) Тогда
		ДатаРазница = ДатаОтгрузки - ДатаИзготовления;
		Если СтараяФормаАстролона Тогда
			СохранитьАстролон(,Истина);
		Иначе
			СохранитьАстролонНовая(,Истина);
		КонецЕсли;
		Если ДатаРазница < 86400*2 Тогда;
			ЭтотОбъект.Срочный = Истина;
			АО_ОбщийМодуль.СменитьСтатусСрочной(глЗначениеПеременной("глТекущийПользователь"), Истина , Ссылка, Перечисления.СрочныеСтатусы.ПереданВПроизводствоИзОДП, Комментарий,Ложь);
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Процедура ОтправитьПочтуБухгалтерииПриРазбитомЗаказе()
//	
//	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтправитьПочтуБухгалтерииПриРазбитомЗаказе", Истина);	
//	
//КонецПроцедуры

Процедура ПодрезатьПоСепарациямПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПодрезатьПоСепарациямПриИзменении", Истина);
	
	Если ПодрезатьПоКомпозиту = Истина Тогда
		ПодрезатьПоКомпозиту = Ложь;
	КонецЕсли
КонецПроцедуры

Процедура CaTНажатие(Элемент)
	
	//CaT_Linux {
	Если тCaT_Linux Тогда
		
		Если НЕ ЕстьРазрешениеОтправитьНаНовыйСтатус(Перечисления.АО_СтатусыЗаявки.ЮГ_ВыполняетсяCaT) Тогда
			Возврат;
		КонецЕсли; 
		
		Ответ = Вопрос("Подтвердите отправку файлов на CaT:", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли; 
		//Записываем везде статус ЮГ_ВыполняетсяCaT - начало
		НовыйСтатус = Перечисления.АО_СтатусыЗаявки.ЮГ_ВыполняетсяCaT;
		Если Не СтатусПереведенБезПроведения(НовыйСтатус) Тогда
			Сообщить("Статус заявки не может быть изменен CaTНажатие!");
			Возврат;
		КонецЕсли;
		АО_ПСМ.ЮГ_ИнициализацияПодготовкиCaT_Linux(ЭтотОбъект.Ссылка, Ложь, Истина);	//ПрямаяОтправкаНаCaT_Linux
		Сообщить("" + ЭтотОбъект.Ссылка + " отправлена на CaT_Linux.");
		
		ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
		
		Возврат;
	КонецЕсли; 
	//CaT_Linux }
		
	//CaT_РиповкаПлюсCaT_Linux = Истина;	// Ставим отметку в Заявке, что выполняется CaT, чтобы после его выполнения проставился статус ЮГ_ВыполненCaT, а не Отрипован	//Зарезервировано
	
	Если НЕ ЕстьРазрешениеОтправитьНаНовыйСтатус(Перечисления.АО_СтатусыЗаявки.ОмРипуется) Тогда
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОграниченияОчистка(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОграниченияОчистка", Истина);
	
	ЛиниатураОптима     = Справочники.ЛиниатурыОптима.ПустаяСсылка();
    Экспонирование      = Перечисления.ЗначенияЭкспонирования.ПустаяСсылка();
    Микроструктура      = Перечисления.ЗначенияМикроструктуры.ПустаяСсылка();
    Печать              = Перечисления.АО_ВидыПечати.ПустаяСсылка();
	ЭтотОбъект.мПечатьПриИзменении();
    ОС_Стратегия        = Справочники.ОС_Стратегии.ПустаяСсылка();
	Линиатура			= "";
	ЭтотОбъект.ОС_Сепарации.Очистить();
КонецПроцедуры

Функция ЮГ_ПолучитьСлэшИДобавитьКонцевойЕслиНет(ПутьДляДобавления)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_ПолучитьСлэшИДобавитьКонцевойЕслиНет", Истина);
	
    Слэш = "\";
    Если Найти(ПутьДляДобавления, Слэш) = 0 Тогда
        Слэш = "/"; //Значит, интернет-нотация
    КонецЕсли; 
    Если Прав(ПутьДляДобавления, 1) <> "/" И Прав(ПутьДляДобавления, 1) <> "\" Тогда
        ПутьДляДобавления = ПутьДляДобавления + Слэш;
	КонецЕсли; 
	Возврат Слэш;
КонецФункции
 
Функция ЮГ_ПолучитьСлэшИУдалитьКонцевойЕслиЕсть(ПутьДляДобавления)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_ПолучитьСлэшИУдалитьКонцевойЕслиЕсть", Истина);
	
	Слэш = "\";
    Если Найти(ПутьДляДобавления, Слэш) = 0 Тогда
        Слэш = "/"; //Значит, интернет-нотация
    КонецЕсли; 
    Если Прав(ПутьДляДобавления, 1) = "/" ИЛИ Прав(ПутьДляДобавления, 1) = "\" Тогда
        ПутьДляДобавления = Лев(ПутьДляДобавления, СтрДлина(ПутьДляДобавления) - 1);
    КонецЕсли; 
	Возврат Слэш;
КонецФункции

//Чтобы брать из локальной папки пользователя переносим на клиент
Процедура ИмпортИзDFSНажатие(Элемент)
	ПутьДФС = "C:\FILES\Output\PatcherRedo";
	Каталог = Новый Файл(ПутьДФС);
	Если НЕ Каталог.Существует() Тогда
		Предупреждение("Отсутствует каталог с расположением 'C:\FILES\Output\PatcherRedo'!");
		Возврат;
	КонецЕсли;
	МассивФайловЛен = НайтиФайлы(ПутьДФС, "*" + Прав(Номер, 6) + "*.len", Истина);
	МассивФайловХТМ	= НайтиФайлы(ПутьДФС, "*" + Прав(Номер, 6) + "*.htm", Истина);
	МассивФайловАЦМ = НайтиФайлы(ПутьДФС, "*" + Прав(Номер, 6) + "*.acm", Истина);
	МассивФайловТИФ = НайтиФайлы(ПутьДФС, "*" + Прав(Номер, 6) + "*.tif", Истина);
	МассивФайловДПГ = НайтиФайлы(ПутьДФС, "*" + Прав(Номер, 6) + "*.jpg", Истина);
	Если
		МассивФайловЛен.Количество() = 0
		И
		МассивФайловХТМ.Количество() = 0
		И
		МассивФайловАЦМ.Количество() = 0
		И
		МассивФайловТИФ.Количество() = 0
		И
		МассивФайловДПГ.Количество() = 0
	Тогда
		Предупреждение("Отсутствуют файлы с номером " + Прав(Номер, 6) + " в папке 'C:\FILES\Output\PatcherRedo'!");
		Возврат;
	КонецЕсли;
	Сообщить(
		"Обнаружены файлы:" + Символы.ПС + 
		"LEN - " + МассивФайловЛен.Количество() + Символы.ПС + 
		"htm - " + МассивФайловХТМ.Количество() + Символы.ПС + 
		"acm - " + МассивФайловАЦМ.Количество() + Символы.ПС + 
		"tif - " + МассивФайловТИФ.Количество() + Символы.ПС + 
		"jpg - " + МассивФайловДПГ.Количество()
	);
	Ответ = Вопрос("Подтвердите импорт файлов из DFS:", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	ТекущееЗадание = "";
	ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталогНаКлиенте(ПутьКФайлам + "/print", ТекущееЗадание);
	//Если МассивФайловХТМ.Количество() > 0 И МассивФайловАЦМ.Количество() > 0 Тогда
	//	ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталогНаКлиенте(ПутьКФайлам + "/print/tmp", ТекущееЗадание);
	//КонецЕсли;
	ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталогНаКлиенте(ПутьКФайлам + "/tmp", ТекущееЗадание);
	ТекущееЗадание = ОтложенныеЗаданияСоздатьКаталогНаКлиенте(ПутьКФайлам + "/len", ТекущееЗадание);
	Для Каждого Файл Из МассивФайловХТМ Цикл
		ТекущееЗадание = ОтложенныеЗаданияПереместитьФайлНаКлиенте(Файл.ПолноеИмя, ПутьКФайлам + "/tmp/" + МассивФайловАЦМ.Получить(0).ИмяБезРасширения + ".htm", ТекущееЗадание);
	КонецЦикла;
	Для Каждого Файл Из МассивФайловАЦМ Цикл
		ТекущееЗадание = ОтложенныеЗаданияПереместитьФайлНаКлиенте(Файл.ПолноеИмя, ПутьКФайлам + "/print/" + Файл.Имя, ТекущееЗадание);
    КонецЦикла;
    Для Каждого Файл Из МассивФайловЛен Цикл
		ТекущееЗадание = ОтложенныеЗаданияПереместитьФайлНаКлиенте(Файл.ПолноеИмя, ПутьКФайлам + "/len/" + Файл.Имя, ТекущееЗадание);
	КонецЦикла;
    Для Каждого Файл Из МассивФайловТИФ Цикл
		ТекущееЗадание = ОтложенныеЗаданияПереместитьФайлНаКлиенте(Файл.ПолноеИмя, ПутьКФайлам + "/print/" + Файл.Имя, ТекущееЗадание);
	КонецЦикла;
    Для Каждого Файл Из МассивФайловДПГ Цикл
		ТекущееЗадание = ОтложенныеЗаданияПереместитьФайлНаКлиенте(Файл.ПолноеИмя, ПутьКФайлам + "/print/" + Файл.Имя, ТекущееЗадание);
	КонецЦикла;
	Папки = НайтиФайлы("C:\FILES\", "*");
	Для Каждого Папка Из Папки Цикл
		Если НЕ Папка.ЭтоКаталог() Тогда
			ОтложенныеЗаданияУдалитьФайлыНаКлиенте(Папка.ПолноеИмя, ТекущееЗадание);
		КонецЕсли;
	КонецЦикла;
	Папки = НайтиФайлы("C:\FILES\Output\PatcherRedo", "*");
	Для Каждого Папка Из Папки Цикл
		ОтложенныеЗаданияУдалитьФайлыНаКлиенте(Папка.ПолноеИмя, ТекущееЗадание);
	КонецЦикла;
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
КонецПроцедуры

Процедура LennToTiffНажатие(Элемент)
	Если Ссылка = Документы.АО_ЗаявкаПокупателя.ПустаяСсылка() Тогда
		Сообщить("ОШИБКА! Lenn To Tiff невозможно до записи документа");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПутьКФайлам) Тогда
		Сообщить("ОШИБКА! У текущего документа не заполнен реквизит ПутьКФайлам, невозможно Lenn To Tiff");
		Возврат;
	ИначеЕсли НЕ ЕстьРазрешениеОтправитьНаНовыйСтатус(Перечисления.АО_СтатусыЗаявки.ОмРипуется) Тогда
		Сообщить("ОШИБКА! Нет разрешения на перевод в статус ОмРипуется");
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Подтвердите Lenn To Tiff:", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	ПутьКФайламТифТек = АО_ПСМ.ВернутьПутьВыходнойПапкиСтехнологией(Ссылка);
	НоваяСтрокаЛогФайлТехИнфо = "";
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(НомерЗаказа) И ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ТипФотополимера) И ЗначениеЗаполнено(Печать) И ЗначениеЗаполнено(Микроструктура) И ЗначениеЗаполнено(Экспонирование) Тогда
		НоваяСтрокаЛогФайлТехИнфо = АО_ПСМ.ПробелыНаТире(
			Формат(Дата, "ДФ=dd.MM.yy")                                                                                             + ";"
			+ НомерЗаказа                                                                                                           + ";"
			+ ?(ЗначениеЗаполнено(Контрагент.ОС_НаименованиеДляПапок), Контрагент.ОС_НаименованиеДляПапок, Контрагент.Наименование) + ";"
			+ СокрЛП(ТипФотополимера.ЦеноваяГруппа)                                                                                 + ";"
			+ СокрЛП(ТипФотополимера.Наименование)                                                                                  + ";"
			+ Печать                                                                                                                + ";"
			+ Микроструктура                                                                                                        + ";"
			+ СпособВыводаФорм                                                                                                      + ";"
			+ ?(Контрагент.ОС_СрезатьТехническуюИнформацию, "CUT", "")                                                              + ";"
			+ Экспонирование                                                                                                        + ";"
			+ ?(Контрагент.ОС_КороткийНомерПодОбрезку, "short", "")                                                                 + ";"
		);
	КонецЕсли;
	Если СтрокаЛогФайлТехИнфо <> НоваяСтрокаЛогФайлТехИнфо Тогда
		Если НоваяСтрокаЛогФайлТехИнфо = "" Тогда
			ОтложенныеЗаданияУдалитьФайлы(ПутьКФайламТифТек + "\info.txt");
		Иначе
			ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(ПутьКФайламТифТек, НоваяСтрокаЛогФайлТехИнфо);
		КонецЕсли;
	КонецЕсли;
	НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
	НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламТиф";
	НовоеИзменениеРеквизита.НовоеЗначение = ПутьКФайламТифТек;
	
	КорневойКоталог = "\\FS2\xml\to_DFS\";
	НомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка);
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайла = НомерЗаказа + "_DFS2TIFF.XML ";
	ЗаписьXML.ОткрытьФайл(КорневойКоталог + "\" + ИмяФайла);

	ЗаписьXML.ЗаписатьОбъявлениеXML(); //<?xml version="1.0"?>.
	ЗаписьXML.ЗаписатьНачалоЭлемента("FileForRip");
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("User1C");
	ЗаписьXML.ЗаписатьТекст(Строка(Пользователи.ТекущийПользователь()));               
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderID");
	ЗаписьXML.ЗаписатьТекст(НомерЗаказа);               
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderIDName");
	ЗаписьXML.ЗаписатьТекст(НомерЗаказа + "_" + Контрагент.ОС_НомерПоРеестру);               
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderIDFolder");
	ЗаписьXML.ЗаписатьТекст(Строка(ПутьКФайлам));               
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Folder2Rip");
	ЗаписьXML.ЗаписатьТекст(Строка(ПутьКФайлам)+"\len\");               
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("FolderOutput");
	ЗаписьXML.ЗаписатьТекст(Строка(ПутьКФайламТиф));               
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Customer");
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerID");
	ЗаписьXML.ЗаписатьТекст(Строка(Контрагент.ОС_НомерПоРеестру));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerName");
	ЗаписьXML.ЗаписатьТекст(Строка(Контрагент.Наименование));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomersJobReference");
	ЗаписьXML.ЗаписатьТекст(Строка("NONE"));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
		  
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмРипуется;
	Рипуется = Истина;
	Если Не СтатусПереведен(НовыйСтатусЗаявки) Тогда
		Сообщить("Статус заявки не может быть изменен РипованиеLenTif!");
		//Возврат;
	КонецЕсли;
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
КонецПроцедуры

Процедура ПодставитьПараметрыООЗ()
	
бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПодставитьПараметрыООЗ", Истина);
	
 Если ПараметрыСеанса.ТекущийПользователь.Родитель.Наименование = "Отдел обработки заказа" Тогда
	 ДатаИзготовления = НачалоДня(ТекущаяДата());
	 мЮГ_УстановитьЮГ_ДатаМонтажа(Истина);
	 СрочныйПриИзменении(Неопределено, Ложь);
	 //АдресДоставки = Контрагент.Адрес;  
 КонецЕсли;
КонецПроцедуры

Процедура РиповатьВDFSНажатие(Элемент)
	Если НЕ ЕстьРазрешениеОтправитьНаНовыйСтатус(Перечисления.АО_СтатусыЗаявки.ОмРипуется) Тогда
		Возврат;
	КонецЕсли;
	СчетчикCaT = Истина;
	Если ТаблицаФайловПС.Количество() = 0 Тогда
		Предупреждение("Нет файлов для риповки!");
		Возврат;
	КонецЕсли;
	Если НЕ ЮГ_ПроверитьДисторсию() Тогда
		Возврат;
	КонецЕсли;
	//Автозаполнение таблицы с размерами и цветом астралона
	//Ищем xml-файл
	ФайлыXML = НайтиФайлы("\\FS2\xml\to_1C\StatusRIP\", НомерЗаказа + "_" + Контрагент.ОС_НомерПоРеестру.Код + "_Size_" + "*");
	Если ФайлыXML.Количество() > 0 Тогда
		СодержаниеМонтажа.Очистить();
		Для Каждого ФайлXML из ФайлыXML Цикл 
			Парсер = Новый ЧТениеXML();
			Парсер.ОткрытьФайл(ФайлXML.ПолноеИмя);
			СтрокаМонтажа = СодержаниеМонтажа.Добавить();
			ИмяУзла = "";
			Пока Парсер.Прочитать() Цикл
				Если Парсер.Имя <> "" И Парсер.Имя <> "#text" Тогда
					ИмяУзла = Парсер.Имя;
				КонецЕсли;
				
				Если ИмяУзла <> "" И Парсер.Значение <> "" тогда
					Если ИмяУзла = "vSize" Тогда 
						СтрокаМонтажа.Длина = Число(Парсер.Значение);
					ИначеЕсли ИмяУзла = "hSize" Тогда
						СтрокаМонтажа.Ширина = Число(Парсер.Значение);
					ИначеЕсли ИмяУзла = "Ink" Тогда
						СтрокаМонтажа.Цвет = Парсер.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Парсер.Закрыть();
		КонецЦикла;
	КонецЕсли;

	ПутьКФайламТифТек = АО_ПСМ.ВернутьПутьВыходнойПапкиСтехнологией(Ссылка);
	//ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(ПутьКФайламТифТек);
	
	ПутьКФайламТиф = ПутьКФайламТифТек;
	Записать();
	
	//НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
	//НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламТиф";
	//НовоеИзменениеРеквизита.НовоеЗначение = ПутьКФайламТифТек;

	Если тНоваяРиповка И ОС_ИспользоватьСепарации_РеквизитФормы Тогда
		ПапкаЗаказа = Новый Файл(ПутьКФайламТифТек);
		Если Не ПапкаЗаказа.Существует() Тогда
			Попытка
				СоздатьКаталог(ПутьКФайламТифТек);
			Исключение
				Сообщить("Не удалось создать папку " + ПутьКФайламТифТек + " по причине: " + ОписаниеОшибки());
				Возврат;
			КонецПопытки;
		КонецЕсли;	
		Записать();
				
		Если НЕ ЗначениеЗаполнено(ОС_Стратегия) Тогда
			Сообщить("Заполните стратегию!");
			Возврат;
		КонецЕсли;	
		//Если процесс заполнен, а углы не читали то получаем данные из процесса
		Если (ЗначениеЗаполнено(ОС_Процесс) ИЛИ ЗначениеЗаполнено(Ограничения)) Тогда	//ОС_Сепарации.Количество() = 0 И 
			Если НЕ Контрагент.НовыеСепарации Тогда
				ОС_НоваяРиповка.СформироватьXML(Ссылка, Истина);
			Иначе
				ОС_НоваяРиповка.СформироватьXMLЛиниатура(Ссылка, Истина);
			КонецЕсли;			
			Рипование = Истина;
		Иначе
			Сообщить("Заполните процесс, или получите углы из файлов");
			Возврат;
		КонецЕсли;	
	Иначе
		
		Прикреплен = ?(Прикреплен = Неопределено, Истина, Ложь);
		
		ПутьКФайламАрхива = "";
		
		Слеш = ?(Найти(ПутьКФайлам,"//"),"/","\");
		
		ПапкаЗаказа = ПутьКФайлам
		+ Слеш + "PS" + Слеш ;
		Рипование = Истина;
		
		Если   ЛиниатураОптима = Справочники.ЛиниатурыОптима.ПустаяСсылка()
			или  Печать = Перечисления.АО_ВидыПечати.ПустаяСсылка()  Тогда
			
			Предупреждение(" не выбрана линиатура  или  способ печати.
				|       Операция не выполнена! ");
			Рипование = Ложь;
			
		КонецЕсли;	
		
		Если Прикреплен Тогда	
			Для каждого ст из ТаблицаФайловПС Цикл
				
				ФайлПоИмени = Новый Файл(ст.ПолноеИмяФайлаПС);
				ФайлСуществует = ФайлПоИмени.Существует();
				Если не ФайлСуществует  Тогда 
					Предупреждение ("  в папкепапке  "+ПапкаЗаказа+"нет  файла  "+ст.ТранслитерационноеИмя);
					Рипование = Ложь;
				КонецЕсли;	
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если  Рипование = Истина Тогда
		тз = Новый таблицазначений;	
		тз.Колонки.Добавить("ИмяФайлаПС");
		тз.Колонки.Добавить("ПолноеИмяФайлаПС");
		тз.Колонки.Добавить("ТранслитерационноеИмя");
		тз.Колонки.Добавить("ПолноеИмяИсходногоФайла");
		тз.Колонки.Добавить("Файл");
		
		НайденныеСтроки = ТаблицаФайловПС.НайтиСтроки(Новый структура("Риповать",Истина));
		
		Для каждого ст из НайденныеСтроки цикл
			строчка = тз.Добавить();
			ЗаполнитьЗначенияСвойств(строчка, ст);
		КонецЦикла;
		
		ЭтотОбъект.ФоновоеЗаданиеЗавершить = Ложь;
		
		НовыйСтатусЗаявки = Перечисления.АО_СтатусыЗаявки.ОмРипуется;
		Рипуется = Истина;
		Если НЕ СтатусПереведен(НовыйСтатусЗаявки) Тогда
			Сообщить("Статус заявки не может быть изменен РиповатьВDFSНажатие!",СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Если тНоваяРиповка И ОС_ИспользоватьСепарации_РеквизитФормы Тогда
			НаборЗаписей = РегистрыСведений.ОС_ФайлыНаРиповке_Новое.СоздатьНаборЗаписей();
			Отбор = НаборЗаписей.Отбор;
			Отбор["Заявка"].Использование = Истина;
			Отбор["Заявка"].Значение = Ссылка;
			Отбор["Заявка"].ВидСравнения  = ВидСравнения.Равно;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].Заявка = Ссылка;
				НаборЗаписей[0].Дата   = ТекущаяДата();
				
				НаборЗаписей.Записать();
			Иначе
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Заявка = Ссылка;
				НоваяСтрока.Дата   = ТекущаяДата();
				
				НаборЗаписей.Записать();
			КонецЕсли;	
		Иначе	
			ПараметрыФоновогоЗадания = Новый Массив;
			ПараметрыФоновогоЗадания.Добавить(тз);
			ПараметрыФоновогоЗадания.Добавить(ЭтотОбъект.Ссылка);
			ПараметрыФоновогоЗадания.Добавить(Прикреплен);
			
			ФоновыеЗадания.Выполнить("АО_ПСМ.ОтследитьОтрипованныеФайлы", ПараметрыФоновогоЗадания, Новый УникальныйИдентификатор, "ЛовляРИПованныхФайлов");
		КонецЕсли;
		
		ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
		
	КонецЕсли;
КонецПроцедуры
 
Процедура УстановитьПараметрыПроцесса()
	Техпроцесс = ЮГ_ПолучитьПараметрыПроцесса();
	Для Каждого Тех Из Техпроцесс Цикл
		Попытка
			Если ЭтотОбъект[Тех.Ключ] <> Тех.Значение Тогда
				ЭтотОбъект[Тех.Ключ] = Тех.Значение;
			КонецЕсли;
		Исключение
		КонецПопытки; 
	КонецЦикла;
	УстановитьКартинкиБазовойПланкиИХвостовогоКрепления();
	ОтложенныеЗаданияСообщениеОСозданииФайлаПланки();
КонецПроцедуры
	
Процедура УстановитьКартинкиБазовойПланкиИХвостовогоКрепления()
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.УстановитьКартинкиБазовойПланкиИХвостовогоКрепления", Истина);
	
	Если ЗначениеЗаполнено(БазоваяПланка) И НЕ БазоваяПланка.Базовая Тогда
		БазоваяПланка = Справочники.Планки.ПустаяСсылка();
		Сообщить("Выбранная планка не является базовой! Значение очищено.");
	КонецЕсли;
	Если ЗначениеЗаполнено(ХвостоваяПланка) И НЕ ХвостоваяПланка.Хвостовая Тогда
		ХвостоваяПланка = Справочники.Планки.ПустаяСсылка();
		Сообщить("Выбранная планка не является хвостовой! Значение очищено.");
	КонецЕсли;
	Если ЗначениеЗаполнено(БазоваяПланка) Тогда
		ЭтаФорма.ЭлементыФормы.КрепежнаяПланкаКартинка.Видимость = Истина;
		Если ЗначениеЗаполнено(БазоваяПланка.Изображение) Тогда
			ЭтаФорма.ЭлементыФормы.КрепежнаяПланкаКартинка.Картинка = БазоваяПланка.Изображение.Получить();
		КонецЕсли;
	Иначе
		ЭтаФорма.ЭлементыФормы.КрепежнаяПланкаКартинка.Видимость = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ХвостоваяПланка) Тогда
		ЭтаФорма.ЭлементыФормы.ХвостоваяПланкаКартинка.Видимость = Истина;
		Если ЗначениеЗаполнено(ХвостоваяПланка.Изображение) Тогда
			ЭтаФорма.ЭлементыФормы.ХвостоваяПланкаКартинка.Картинка = ХвостоваяПланка.Изображение.Получить();
		КонецЕсли;
	Иначе
		ЭтаФорма.ЭлементыФормы.ХвостоваяПланкаКартинка.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура БазоваяПланкаПриИзменении(Элемент)
	УстановитьКартинкиБазовойПланкиИХвостовогоКрепления();
	ОтложенныеЗаданияСообщениеОСозданииФайлаПланки();
КонецПроцедуры

Процедура ХвостоваяПланкаПриИзменении(Элемент)
	УстановитьКартинкиБазовойПланкиИХвостовогоКрепления();
	ОтложенныеЗаданияСообщениеОСозданииФайлаПланки();
КонецПроцедуры

Процедура ОбновитьДанныеИзПроцесса(Уровень)
	Если Уровень = 1 Тогда
		Об_Оборудование = Справочники.Оборудование.ПустаяСсылка();
		Если ЗначениеЗаполнено(Об_Производство) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Родитель", Об_Производство);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Оборудование.Ссылка
			|ИЗ
			|	Справочник.Оборудование КАК Оборудование
			|ГДЕ
			|	Оборудование.Родитель = &Родитель";
			Таблица = Запрос.Выполнить().Выгрузить();
			Если Таблица.Количество() = 1 Тогда
				Об_Оборудование = Таблица.Получить(0).Ссылка;
			КонецЕсли;
		КонецЕсли;
		ОбновитьДанныеИзПроцесса(2);
	ИначеЕсли Уровень = 2 Тогда
		мУстановитьПараметрыОборудования();
		Об_Процесс = "";
		Если ЗначениеЗаполнено(Об_Оборудование) Тогда
			Если Об_Оборудование.Процессы.Количество() = 1 Тогда
				Стр = Об_Оборудование.Процессы.Получить(0);
				Об_Процесс = Стр.НазваниеПроцесса;
			КонецЕсли;
		КонецЕсли;
		ОбновитьДанныеИзПроцесса(3);
	ИначеЕсли Уровень = 3 Тогда
		УстановитьПараметрыПроцесса();
	Иначе
		Сообщить("Уровень должен быть 1, 2, или 3!!!");
	КонецЕсли;
КонецПроцедуры

Процедура ОтриповатьCaTНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтриповатьCaTНажатие", Истина);
	
	//КГГ 2021 10 19+
	Если НЕ ЗначениеЗаполнено(МонтажНаАстролон) И КоличествоФорм = 0 Тогда
		Сообщить("Необходимо заполнить количество форм.");
		Возврат;
	КонецЕсли;
	//КГГ 2021 10 19-
	
	Если НЕ ЕстьРазрешениеОтправитьНаНовыйСтатус(Перечисления.АО_СтатусыЗаявки.ОмРипуется) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не тНоваяРиповка Тогда
    	Сообщить("Это не Новая риповка! Действие отменено.");
    	Возврат;
	КонецЕсли;
	Если ТаблицаФайловПС.Количество() = 0 Тогда
		Сообщить("Нет файлов для риповки!");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		Предупреждение("Для отправки на риповку документ должен быть записан!");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЮГ_ПроверитьДисторсию() Тогда
		Возврат;
	КонецЕсли; 
	
	//CaT_Linux {
	ТекстВопроса = "Подтвердите отправку файлов на риповку";
	Если тCaT_Linux Тогда
		ТекстВопроса = ТекстВопроса + "+CaT";
	КонецЕсли; 
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли; 
	
    Если Не СтатусПереведен(Перечисления.АО_СтатусыЗаявки.ОмРипуется) Тогда
    	Сообщить("Статус заявки не может быть изменен ОтриповатьCaTНажатие!");
    	Возврат;
	КонецЕсли;
	
	Если тCaT_Linux Тогда
		АО_ПСМ.ЮГ_ИнициализацияПодготовкиCaT_Linux(Ссылка, Ложь);
		КнОтправитьНаРИПНажатие(Неопределено,, Истина);
		Если ЭтаФорма.Открыта() Тогда
			//Была ошибка риповки, иначе форма была бы закрыта
			//Аннулируем запущенный регламентный процесс "CaT после риповки":
			АО_ПСМ.ЮГ_ИнициализацияПодготовкиCaT_Linux(Ссылка, Ложь,, Истина);
		Иначе
			//Риповка прошла без ошибок - сообщаем о запуске регламентного процесса "CaT после риповки"
			Сообщить("" + Ссылка + " отправлена на риповку с последующей отправкой на CaT_Linux.");
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	//CaT_Linux }
		
	//CaT_РиповкаПлюсCaT_Linux = Истина;	// Ставим отметку в Заявке, что после риповки - CaT	//Зарезервировано
	
	Рипуется = Истина;
		
	СчетчикCaT = Истина;
	
	КорневойКоталог = "\\FS2\xml\to_RIP&CАT";
	НомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка); 
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайла = НомерЗаказа + "_ForRip&CAT.xml";

	ЗаписьXML.ОткрытьФайл(КорневойКоталог + "\" + ИмяФайла);
	
	//Записать директиву
	ЗаписьXML.ЗаписатьОбъявлениеXML(); //<?xml version="1.0"?>.
	// Записать начало корневого элемента
	ЗаписьXML.ЗаписатьНачалоЭлемента("FileForRip");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order");
	// Добавим текущего пользователя
	ЗаписьXML.ЗаписатьНачалоЭлемента("User1C");
	ЗаписьXML.ЗаписатьТекст(Строка(ПараметрыСеанса.ТекущийПользователь));               
	ЗаписьXML.ЗаписатьКонецЭлемента();
		
	//Добавление поля OrderID, значение берётся из номера заказа
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderID");
	ЗаписьXML.ЗаписатьТекст(НомерЗаказа);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//Добавление поля OrderIDName, значение берётся из номера заказа + номер контрагента по реестру
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderIDName");
	ЗаписьXML.ЗаписатьТекст(НомерЗаказа + "_"+ Строка(Контрагент.ОС_НомерПоРеестру));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderIDFolder");
	ЗаписьXML.ЗаписатьТекст(Строка(ПутьКФайлам));               
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//получим путь
	Если  ТаблицаФайловПС.Количество() = 0 Тогда
		ПутьАутпут = "";
	Иначе
		ПутьАутпут = ТаблицаФайловПС[0].ПолноеИмяИсходногоФайла;
		ВременныйПуть = ПутьАутпут;
		НомерСимвола=0;
		НомерСимволаСчетчик = 0;
		Пока Истина Цикл
			Если Найти(ВременныйПуть,"\") <>0 Тогда
				НомерСимвола =  Найти(ВременныйПуть,"\");
				ВременныйПуть = Прав(ВременныйПуть, СтрДлина(ВременныйПуть)-НомерСимвола);
				НомерСимволаСчетчик	= НомерСимволаСчетчик + НомерСимвола;
			Иначе
				ПутьАутпут = Лев(ПутьАутпут,НомерСимволаСчетчик-1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Folder2RIP");
	ЗаписьXML.ЗаписатьТекст(Строка(ПутьАутпут));               
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//Адрес папки итоговых файлов
		ЗаписьXML.ЗаписатьНачалоЭлемента("FolderOutput");
		ЗаписьXML.ЗаписатьТекст(СтрЗаменить(АО_ПСМ.ВернутьПутьВыходнойПапкиСтехнологией(Ссылка), "\", "/"));//ПутьКФайлам
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	//Запишем имена файлов
	Для каждого стр Из ТаблицаФайловПС Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Filename");
		ЗаписьXML.ЗаписатьТекст(стр.ТранслитерационноеИмя);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Customer");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerID");
	ЗаписьXML.ЗаписатьТекст(Строка(Контрагент.ОС_НомерПоРеестру));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	//ЗаписьXML.ЗаписатьНачалоЭлемента("JobCustomerName");
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerName");
	ЗаписьXML.ЗаписатьТекст(Строка(Контрагент.Наименование));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CustomersJobReference");
	ЗаписьXML.ЗаписатьТекст(Строка("NONE"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//Данные из процесса
	СепарацииПроцесса = ОС_НоваяРиповка.ЮГ_ПолучитьСепарацииПоОС_СепарацииЗаявки(Ссылка);
	Если СепарацииПроцесса.Количество() = 0 Тогда
		СепарацииПроцесса = ОС_НоваяРиповка.ПолучитьСепарацииПоПроцессуЛиниатура(Ограничения);	//Устаревший вариант, постепенно вытеснится ЮГ_ПолучитьСепарацииПоОС_СепарацииЗаявки
	КонецЕсли; 
	СепарацииПроцесса.Колонки.Добавить("Выведено", Ложь);
	ПоследовательностьЦветов = Новый ТаблицаЗначений;
	ПоследовательностьЦветов.Колонки.Добавить("ИмяЦвета", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ПоследовательностьЦветов.Колонки.Добавить("СтрокаТабл", Неопределено);
	СтрокаТЧ = ПоследовательностьЦветов.Добавить();
	СтрокаТЧ.ИмяЦвета = "all";
	СтрокаТЧ = ПоследовательностьЦветов.Добавить();
	СтрокаТЧ.ИмяЦвета = "cyan";
	СтрокаТЧ = ПоследовательностьЦветов.Добавить();
	СтрокаТЧ.ИмяЦвета = "magenta";
	СтрокаТЧ = ПоследовательностьЦветов.Добавить();
	СтрокаТЧ.ИмяЦвета = "yellow";
	СтрокаТЧ = ПоследовательностьЦветов.Добавить();
	СтрокаТЧ.ИмяЦвета = "black";
	Для каждого СтрокаТЧ Из ПоследовательностьЦветов Цикл
		Для каждого Строка из СепарацииПроцесса Цикл
			ИмяЦвета = Строка.ИмяСепарации;
			Если Найти(ИмяЦвета, СтрокаТЧ.ИмяЦвета) > 0 Тогда
				СтрокаТЧ.СтрокаТабл = Строка;
				Строка.Выведено = Истина;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	Массив = СепарацииПроцесса.НайтиСтроки(Новый Структура("Выведено", Ложь));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Screen");

	ЗаписьXML.ЗаписатьНачалоЭлемента("Strategia");
	ЗаписьXML.ЗаписатьТекст(ОС_Стратегия.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Resolution");
	ЗаписьXML.ЗаписатьТекст(Строка(Ограничения.Разрешение));               
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FileType");
	ЗаписьXML.ЗаписатьТекст(Строка(ОС_Процесс.ТипФайла));  
	ЗаписьXML.ЗаписатьКонецЭлемента();

	//Добавление поля Compression; Значение зависит от значения в поле FileType: Если "LEN", то "Flate", если "TIFF", то "LZW"
	ЗаписьXML.ЗаписатьНачалоЭлемента("Compression");
	ЗаписьXML.ЗаписатьТекст(?(ОС_Процесс.ТипФайла = Перечисления.ОС_ТипФайла_XML.LEN,"Flate","LZW"));               
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ScreenSettingsFromFile");
	Если (НЕ Ограничения.УголЛиниатураИзФайла И НЕ Ограничения.ЛиниатураИзФайла И НЕ Ограничения.ТочкаИзФайла) Тогда
		ЗаписьXML.ЗаписатьТекст("none");
	ИначеЕсли (Ограничения.УголЛиниатураИзФайла И Ограничения.ЛиниатураИзФайла И Ограничения.ТочкаИзФайла) Тогда
		ЗаписьXML.ЗаписатьТекст("all");
	ИначеЕсли (Ограничения.УголЛиниатураИзФайла И НЕ Ограничения.ЛиниатураИзФайла И НЕ Ограничения.ТочкаИзФайла) Тогда
		ЗаписьXML.ЗаписатьТекст("angle");
	ИначеЕсли (НЕ Ограничения.УголЛиниатураИзФайла И Ограничения.ЛиниатураИзФайла И НЕ Ограничения.ТочкаИзФайла) Тогда
		ЗаписьXML.ЗаписатьТекст("ruling");
	ИначеЕсли (Ограничения.УголЛиниатураИзФайла И Ограничения.ЛиниатураИзФайла И НЕ Ограничения.ТочкаИзФайла) Тогда
		ЗаписьXML.ЗаписатьТекст("angleAndRuling");
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("ImageResampling");
	ЗаписьXML.ЗаписатьТекст(Строка(Ограничения.Интерполяция));               
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("SeamlessScreening");
	ЗаписьXML.ЗаписатьТекст(?(Ограничения.БесшовнаяФорма, "Yes", "No"));               
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("FlipRIP");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Reverse");
	ЗаписьXML.ЗаписатьТекст(?(Инверсия,"true","false"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Miror");
	ЗаписьXML.ЗаписатьТекст(?(Печать = Перечисления.АО_ВидыПечати.Прямая,"true","false"));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ForCat");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("FitBorder");
	Если (НЕ ПодрезатьПоСепарациям И НЕ ПодрезатьПоКомпозиту) Тогда
		ЗаписьXML.ЗаписатьТекст("None");	
	ИначеЕсли (ПодрезатьПоСепарациям И НЕ ПодрезатьПоКомпозиту) Тогда
		ЗаписьXML.ЗаписатьТекст("separation");
	ИначеЕсли (НЕ ПодрезатьПоСепарациям И ПодрезатьПоКомпозиту) Тогда
		ЗаписьXML.ЗаписатьТекст("composite");
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("SetMargins");
		ЗаписьXML.ЗаписатьТекст(Строка(ПрибавитьТехПоле));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ДисторцияВрем = СокрЛП(ЭтотОбъект.Дисторция);
	ДисторцияВрем = СтрЗаменить(ДисторцияВрем, ",", ".");
	ЗаписьXML.ЗаписатьНачалоЭлемента("VerticalDistortion");
	Если НЕ ЭтотОбъект.ЮГ_ДисторсияИз1С Тогда
		ЗаписьXML.ЗаписатьТекст("100");
	Иначе
		Если ЭтотОбъект.НаправлениеПечати = Перечисления.НаправлениеПечати.Горизонтально Тогда
			ЗаписьXML.ЗаписатьТекст("100");
		ИначеЕсли ЭтотОбъект.НаправлениеПечати = Перечисления.НаправлениеПечати.Вертикально Тогда
			ЗаписьXML.ЗаписатьТекст(ДисторцияВрем);
		Иначе
			//??
		КонецЕсли; 
	КонецЕсли; 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("HorizontalDistortion");
	Если НЕ ЭтотОбъект.ЮГ_ДисторсияИз1С Тогда
		ЗаписьXML.ЗаписатьТекст("100");
	Иначе
		Если ЭтотОбъект.НаправлениеПечати = Перечисления.НаправлениеПечати.Горизонтально Тогда
			ЗаписьXML.ЗаписатьТекст(ДисторцияВрем);
		ИначеЕсли ЭтотОбъект.НаправлениеПечати = Перечисления.НаправлениеПечати.Вертикально Тогда
			ЗаписьXML.ЗаписатьТекст("100");
		Иначе
			//??
		КонецЕсли; 
	КонецЕсли; 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
		
	ПутьКФайламТифТек = АО_ПСМ.ВернутьПутьВыходнойПапкиСтехнологией(Ссылка);
	//ОтложенныеЗаданияСоздатьЛогФайлТехИНФО(ПутьКФайламТифТек);
	
	ПутьКФайламТиф = ПутьКФайламТифТек;
	Записать();
	
	//НовоеИзменениеРеквизита = ОтложенныеЗаданияИзменяемыеРеквизиты.Добавить();
	//НовоеИзменениеРеквизита.Реквизит      = "ПутьКФайламТиф";
	//НовоеИзменениеРеквизита.НовоеЗначение = ПутьКФайламТифТек;
	
	//Исключение
	//	Сообщить("Не удалось записать файл ""info"" по причине: " + ОписаниеОшибки());
	//КонецПопытки;
	
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
	
КонецПроцедуры

Процедура Об_ОборудованиеПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.Об_ОборудованиеПриИзменении", Истина);
	
	ОбновитьДанныеИзПроцесса(2);
КонецПроцедуры

Процедура ПечатьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПечатьНачалоВыбора", Истина);
	
	СтандартнаяОбработка = Ложь;
    Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
        Предупреждение("Заполните Контрагента", 2);
        Возврат;
    КонецЕсли;
    Если НЕ ЗначениеЗаполнено(ТипФотополимера) Тогда
        Предупреждение("Заполните тип фотополимера", 2);
        Возврат;
    КонецЕсли;
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Контрагент",         Контрагент);
    Запрос.УстановитьПараметр("ТипФотополимера",    ТипФотополимера);
    Запрос.УстановитьПараметр("Экспонирование",     Экспонирование);
    Запрос.УстановитьПараметр("Микроструктура",     Микроструктура);
    Если ОС_ИспользоватьСепарации_РеквизитФормы Тогда
        Если
            НЕ ЗначениеЗаполнено(Ограничения)
            ИЛИ 
            ЗначениеЗаполнено(ЛиниатураОптима)
        Тогда
            Предупреждение("Правильно заполните линиатуру по новому", 2);
            Возврат;  
        КонецЕсли;
        Запрос.УстановитьПараметр("Линиатура",      Ограничения);
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера КАК ТипФотополимера,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Печать КАК Печать,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование КАК Экспонирование,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура КАК Микроструктура
        |ПОМЕСТИТЬ ФотополимерыДляРекомбинации
        |ИЗ
        |   Справочник.Контрагенты.ОграниченияКонтрагентаПроцессы КАК КонтрагентыОграниченияКонтрагентаПроцессы
        |ГДЕ
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Ссылка = &Контрагент
        |   И КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры = ЗНАЧЕНИЕ(Справочник.ОС_ПроцессыЛиниатура.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагентаПроцессы.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование = ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура = ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера КАК ТипФотополимера,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Печать КАК Печать,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование КАК Экспонирование,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура КАК Микроструктура
        |ПОМЕСТИТЬ ВсеОстальноеДляРекомбинации
        |ИЗ
        |   Справочник.Контрагенты.ОграниченияКонтрагентаПроцессы КАК КонтрагентыОграниченияКонтрагентаПроцессы
        |ГДЕ
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Ссылка = &Контрагент
        |   И КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
        |   И (КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ОС_ПроцессыЛиниатура.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера КАК ТипФотополимера,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Печать КАК Печать,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование КАК Экспонирование,
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура КАК Микроструктура
        |ПОМЕСТИТЬ ТаблицаДляОтбораПоТипуФотополимера
        |ИЗ
        |   Справочник.Контрагенты.ОграниченияКонтрагентаПроцессы КАК КонтрагентыОграниченияКонтрагентаПроцессы
        |ГДЕ
        |   КонтрагентыОграниченияКонтрагентаПроцессы.Ссылка = &Контрагент
        |   И КонтрагентыОграниченияКонтрагентаПроцессы.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
        |   И (КонтрагентыОграниченияКонтрагентаПроцессы.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ОС_ПроцессыЛиниатура.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагентаПроцессы.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ФотополимерыДляРекомбинации.ТипФотополимера,
        |   ВсеОстальноеДляРекомбинации.ГорячаяПапкаЛиниатуры,
        |   ВсеОстальноеДляРекомбинации.Печать,
        |   ВсеОстальноеДляРекомбинации.Экспонирование,
        |   ВсеОстальноеДляРекомбинации.Микроструктура
        |ИЗ
        |   ФотополимерыДляРекомбинации КАК ФотополимерыДляРекомбинации,
        |   ВсеОстальноеДляРекомбинации КАК ВсеОстальноеДляРекомбинации
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера,
        |   ТаблицаДляОтбораПоТипуФотополимера.ГорячаяПапкаЛиниатуры КАК Линиатура,
        |   ТаблицаДляОтбораПоТипуФотополимера.Печать,
        |   ТаблицаДляОтбораПоТипуФотополимера.Экспонирование,
        |   ТаблицаДляОтбораПоТипуФотополимера.Микроструктура
        |ПОМЕСТИТЬ ТаблицаДляОтбораСпособаВывода
        |ИЗ
        |   ТаблицаДляОтбораПоТипуФотополимера КАК ТаблицаДляОтбораПоТипуФотополимера
        |ГДЕ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораПоТипуФотополимера.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера,
        |   ТаблицаДляОтбораПоТипуФотополимера.ГорячаяПапкаЛиниатуры,
        |   ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.Прямая),
        |   ТаблицаДляОтбораПоТипуФотополимера.Экспонирование,
        |   ТаблицаДляОтбораПоТипуФотополимера.Микроструктура
        |ИЗ
        |   ТаблицаДляОтбораПоТипуФотополимера КАК ТаблицаДляОтбораПоТипуФотополимера
        |ГДЕ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораПоТипуФотополимера.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера,
        |   ТаблицаДляОтбораПоТипуФотополимера.ГорячаяПапкаЛиниатуры,
        |   ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.Обратная),
        |   ТаблицаДляОтбораПоТипуФотополимера.Экспонирование,
        |   ТаблицаДляОтбораПоТипуФотополимера.Микроструктура
        |ИЗ
        |   ТаблицаДляОтбораПоТипуФотополимера КАК ТаблицаДляОтбораПоТипуФотополимера
        |ГДЕ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораПоТипуФотополимера.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |   ТаблицаДляОтбораСпособаВывода.Печать
        |ИЗ
        |   ТаблицаДляОтбораСпособаВывода КАК ТаблицаДляОтбораСпособаВывода
        |ГДЕ
        |   ТаблицаДляОтбораСпособаВывода.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораСпособаВывода.Линиатура = &Линиатура
        |   И ТаблицаДляОтбораСпособаВывода.Экспонирование = &Экспонирование
        |   И ТаблицаДляОтбораСпособаВывода.Микроструктура = &Микроструктура";
    Иначе
        Если
            ЗначениеЗаполнено(Ограничения)
            ИЛИ 
            НЕ ЗначениеЗаполнено(ЛиниатураОптима)
        Тогда
            Предупреждение("Правильно заполните линиатуру по старому", 2);
            Возврат;  
        КонецЕсли;
        Запрос.УстановитьПараметр("Линиатура",      ЛиниатураОптима);
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   КонтрагентыОграниченияКонтрагента.ТипФотополимера КАК ТипФотополимера,
        |   КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
        |   КонтрагентыОграниченияКонтрагента.Печать КАК Печать,
        |   КонтрагентыОграниченияКонтрагента.Экспонирование КАК Экспонирование,
        |   КонтрагентыОграниченияКонтрагента.Микроструктура КАК Микроструктура
        |ПОМЕСТИТЬ ФотополимерыДляРекомбинации
        |ИЗ
        |   Справочник.Контрагенты.ОграниченияКонтрагента КАК КонтрагентыОграниченияКонтрагента
        |ГДЕ
        |   КонтрагентыОграниченияКонтрагента.Ссылка = &Контрагент
        |   И КонтрагентыОграниченияКонтрагента.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры = ЗНАЧЕНИЕ(Справочник.ЛиниатурыОптима.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагента.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагента.Экспонирование = ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
        |   И КонтрагентыОграниченияКонтрагента.Микроструктура = ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КонтрагентыОграниченияКонтрагента.ТипФотополимера КАК ТипФотополимера,
        |   КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
        |   КонтрагентыОграниченияКонтрагента.Печать КАК Печать,
        |   КонтрагентыОграниченияКонтрагента.Экспонирование КАК Экспонирование,
        |   КонтрагентыОграниченияКонтрагента.Микроструктура КАК Микроструктура
        |ПОМЕСТИТЬ ВсеОстальноеДляРекомбинации
        |ИЗ
        |   Справочник.Контрагенты.ОграниченияКонтрагента КАК КонтрагентыОграниченияКонтрагента
        |ГДЕ
        |   КонтрагентыОграниченияКонтрагента.Ссылка = &Контрагент
        |   И КонтрагентыОграниченияКонтрагента.ТипФотополимера = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
        |   И (КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ЛиниатурыОптима.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагента.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагента.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагента.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   КонтрагентыОграниченияКонтрагента.ТипФотополимера КАК ТипФотополимера,
        |   КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры КАК ГорячаяПапкаЛиниатуры,
        |   КонтрагентыОграниченияКонтрагента.Печать КАК Печать,
        |   КонтрагентыОграниченияКонтрагента.Экспонирование КАК Экспонирование,
        |   КонтрагентыОграниченияКонтрагента.Микроструктура КАК Микроструктура
        |ПОМЕСТИТЬ ТаблицаДляОтбораПоТипуФотополимера
        |ИЗ
        |   Справочник.Контрагенты.ОграниченияКонтрагента КАК КонтрагентыОграниченияКонтрагента
        |ГДЕ
        |   КонтрагентыОграниченияКонтрагента.Ссылка = &Контрагент
        |   И КонтрагентыОграниченияКонтрагента.ТипФотополимера <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
        |   И (КонтрагентыОграниченияКонтрагента.ГорячаяПапкаЛиниатуры <> ЗНАЧЕНИЕ(Справочник.ЛиниатурыОптима.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагента.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагента.Экспонирование <> ЗНАЧЕНИЕ(Перечисление.ЗначенияЭкспонирования.ПустаяСсылка)
        |           ИЛИ КонтрагентыОграниченияКонтрагента.Микроструктура <> ЗНАЧЕНИЕ(Перечисление.ЗначенияМикроструктуры.ПустаяСсылка))
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ФотополимерыДляРекомбинации.ТипФотополимера,
        |   ВсеОстальноеДляРекомбинации.ГорячаяПапкаЛиниатуры,
        |   ВсеОстальноеДляРекомбинации.Печать,
        |   ВсеОстальноеДляРекомбинации.Экспонирование,
        |   ВсеОстальноеДляРекомбинации.Микроструктура
        |ИЗ
        |   ФотополимерыДляРекомбинации КАК ФотополимерыДляРекомбинации,
        |   ВсеОстальноеДляРекомбинации КАК ВсеОстальноеДляРекомбинации
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера,
        |   ТаблицаДляОтбораПоТипуФотополимера.ГорячаяПапкаЛиниатуры КАК Линиатура,
        |   ТаблицаДляОтбораПоТипуФотополимера.Печать,
        |   ТаблицаДляОтбораПоТипуФотополимера.Экспонирование,
        |   ТаблицаДляОтбораПоТипуФотополимера.Микроструктура
        |ПОМЕСТИТЬ ТаблицаДляОтбораСпособаВывода
        |ИЗ
        |   ТаблицаДляОтбораПоТипуФотополимера КАК ТаблицаДляОтбораПоТипуФотополимера
        |ГДЕ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораПоТипуФотополимера.Печать <> ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера,
        |   ТаблицаДляОтбораПоТипуФотополимера.ГорячаяПапкаЛиниатуры,
        |   ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.Прямая),
        |   ТаблицаДляОтбораПоТипуФотополимера.Экспонирование,
        |   ТаблицаДляОтбораПоТипуФотополимера.Микроструктура
        |ИЗ
        |   ТаблицаДляОтбораПоТипуФотополимера КАК ТаблицаДляОтбораПоТипуФотополимера
        |ГДЕ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораПоТипуФотополимера.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера,
        |   ТаблицаДляОтбораПоТипуФотополимера.ГорячаяПапкаЛиниатуры,
        |   ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.Обратная),
        |   ТаблицаДляОтбораПоТипуФотополимера.Экспонирование,
        |   ТаблицаДляОтбораПоТипуФотополимера.Микроструктура
        |ИЗ
        |   ТаблицаДляОтбораПоТипуФотополимера КАК ТаблицаДляОтбораПоТипуФотополимера
        |ГДЕ
        |   ТаблицаДляОтбораПоТипуФотополимера.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораПоТипуФотополимера.Печать = ЗНАЧЕНИЕ(Перечисление.АО_ВидыПечати.ПустаяСсылка)
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ РАЗЛИЧНЫЕ
        |   ТаблицаДляОтбораСпособаВывода.Печать
        |ИЗ
        |   ТаблицаДляОтбораСпособаВывода КАК ТаблицаДляОтбораСпособаВывода
        |ГДЕ
        |   ТаблицаДляОтбораСпособаВывода.ТипФотополимера = &ТипФотополимера
        |   И ТаблицаДляОтбораСпособаВывода.Линиатура = &Линиатура
        |   И ТаблицаДляОтбораСпособаВывода.Экспонирование = &Экспонирование
        |   И ТаблицаДляОтбораСпособаВывода.Микроструктура = &Микроструктура";
    КонецЕсли;
    ТаблицаОтбораОграничений = Запрос.Выполнить().Выгрузить();
    ВыбраннаяСтрокаПечати = ТаблицаОтбораОграничений.ВыбратьСтроку("Выберите вид печати!");
    Если ВыбраннаяСтрокаПечати <> Неопределено Тогда
         Элемент.Значение = ВыбраннаяСтрокаПечати.Печать;
		 ЭтотОбъект.мПечатьПриИзменении();
    КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьВОтправитьПлощадьЗапечаткиРезультат(Результат)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЗаписатьВОтправитьПлощадьЗапечаткиРезультат", Истина);
	
	ТекДата = ТекущаяДата();
	Пока Истина Цикл
		Набор = РегистрыСведений.ОтправитьПлощадьЗапечаткиРезультат.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Значение		= ТекДата;
		Набор.Отбор.Период.Использование	= Истина;
		Набор.Отбор.Заявка.Значение		= Ссылка;
		Набор.Отбор.Заявка.Использование	= Истина;
		Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			ТекДата = ТекДата + 1;
			Продолжить;
		КонецЕсли;
		Прервать;
	КонецЦикла; 
	Стр = Набор.Добавить();
    Стр.Период		= ТекДата;
    Стр.Заявка		= Ссылка;
    Стр.Результат	= Результат;
    Набор.Записать();
КонецПроцедуры

Функция ПрочитатьВОтправитьПлощадьЗапечаткиРезультат()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтправитьПлощадьЗапечаткиРезультат.Период,
	|	ОтправитьПлощадьЗапечаткиРезультат.Результат
	|ИЗ
	|	РегистрСведений.ОтправитьПлощадьЗапечаткиРезультат КАК ОтправитьПлощадьЗапечаткиРезультат
	|ГДЕ
	|	ОтправитьПлощадьЗапечаткиРезультат.Заявка = &Заявка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправитьПлощадьЗапечаткиРезультат.Период УБЫВ";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат Формат(РезультатЗапроса.Получить(0).Период, "ДФ=""дд.ММ.гггг""") + " " + РезультатЗапроса.Получить(0).Результат;
	Иначе
		Возврат "Никогда не отправлялось.";
	КонецЕсли;
КонецФункции	

Функция ПроверитьЧтоЭтоАдрес(Знач Стр)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПроверитьЧтоЭтоАдрес", Истина);
	
	Если
		СтрДлина(Стр) = 0
	Тогда
		Сообщить("Адрес не может быть пустой строкой!");
	    Возврат "";
	ИначеЕсли
		СтрДлина(Стр) < 7
	Тогда
		Сообщить("Адрес не может быть слишком короткой строкой: " + Стр);
	    Возврат "";
	ИначеЕсли
		НЕ СтрДлина(Стр) - 1 = СтрДлина(СтрЗаменить(Стр, "@", ""))
	Тогда
		Сообщить("Адрес должен содержать единственный символ @: " + Стр);
	    Возврат "";
	КонецЕсли;
	Возврат Стр;
КонецФункции

Функция ВыделитьИзУголков(Знач Стр)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ВыделитьИзУголков", Истина);
	
	Если
		СтрДлина(Стр) = СтрДлина(СтрЗаменить(Стр, "<", ""))
		И
		СтрДлина(Стр) = СтрДлина(СтрЗаменить(Стр, ">", ""))
	Тогда //Все норм, просто строка без уголков
	    Возврат ПроверитьЧтоЭтоАдрес(Стр);
	ИначеЕсли
		НЕ СтрДлина(Стр) - 1 = СтрДлина(СтрЗаменить(Стр, "<", ""))
		ИЛИ
		НЕ СтрДлина(Стр) - 1 = СтрДлина(СтрЗаменить(Стр, ">", ""))
		ИЛИ
		НЕ Найти(Стр, "<") < Найти(Стр, ">")
	Тогда
		Сообщить("Попытка выделить адрес из строки с уголками, но не правильного формата: " + Стр);
	    Возврат "";
	КонецЕсли;
	Пока
		СтрДлина(Стр) > 0
		И
		Прав(Стр, 1) <> ">"
	Цикл
		Стр = Лев(Стр, СтрДлина(Стр) - 1);
	КонецЦикла;
	Стр = Лев(Стр, СтрДлина(Стр) - 1);
	Пока
		СтрДлина(Стр) > 0
		И
		Лев(Стр, 1) <> "<"
	Цикл
		Стр = Прав(Стр, СтрДлина(Стр) - 1);
	КонецЦикла;
	Стр = Прав(Стр, СтрДлина(Стр) - 1);
	Возврат ПроверитьЧтоЭтоАдрес(Стр);
КонецФункции

Процедура ОтправитьПлощадьЗапечаткиНажатие(Элемент) //Отправляем в любом случае вне зависимости от того установлен ли флажок Контрагент.ОтправлятьПлощадьЗапечатки
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтправитьПлощадьЗапечаткиНажатие", Истина);
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Заполните Контрагента", 2);
		Возврат;
	КонецЕсли;
	
	ОтправлятьПлощадьЗапечаткиКакимПисьмом = Контрагент.ОтправлятьПлощадьЗапечаткиКакимПисьмом;
	ЭтоПрежнееПисьмо = Истина;
	Если ОтправлятьПлощадьЗапечаткиКакимПисьмом = 1 Тогда
		ЭтоПрежнееПисьмо = Ложь;
	КонецЕсли; 
	ОтправлятьПлощадьЗапечаткиПлощадь = Контрагент.ОтправлятьПлощадьЗапечаткиПлощадь;
	ОтправлятьПлощадьЗапечаткиПроцент = Контрагент.ОтправлятьПлощадьЗапечаткиПроцент;
	Если ЭтоПрежнееПисьмо Тогда
		Если НЕ ОтправлятьПлощадьЗапечаткиПлощадь И НЕ ОтправлятьПлощадьЗапечаткиПроцент Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	//Получаем каталог с файлами
	КорневойКаталог = ЭтотОбъект.ПолучитьКорневойКаталог();
	Если НЕ ЗначениеЗаполнено(КорневойКаталог) Тогда
		Предупреждение("Не удается получить Корневой каталог!", 2);
		Возврат;
	КонецЕсли;
	Если Найти(КорневойКаталог, "//") > 0 Тогда
		Слеш = "/";
	Иначе
		Слеш = "\";
	КонецЕсли;
	ПутьКФайлам1 = ЭтотОбъект.ПолучитьПутьКФайлам(); //Это основной путь
	Если НЕ ЗначениеЗаполнено(ПутьКФайлам1) Тогда
		Предупреждение("Не удается получить Путь к файлам 1!", 2);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номер) Тогда
		Предупреждение("Не удается получить Номер заявки!", 2);
		Возврат;
	КонецЕсли;
	ПапкаКаталога = Формат(Цел(Число(Номер) / 1000) * 1000, "ЧГ=0") + "-" + Формат(Цел(Число(Номер) / 1000) * 1000 + 999, "ЧГ=0");
	ПутьКФайлам2 = КорневойКаталог + Слеш + ПапкаКаталога + Слеш + Формат(Число(Номер), "ЧГ=0") + "_" + Контрагент.Наименование;
	ПутьКФайлам2 = СокрЛП(СтрЗаменить(ПутьКФайлам2, Символы.НПП, "")); //Это запасной путь, после переработки механизма путей УБРАТЬ
	
    КаталогНаДиске1 = Новый Файл(ПутьКФайлам1);
	Если НЕ КаталогНаДиске1.Существует() Тогда
		ПутьКФайлам1 = ПутьКФайлам2;
	    КаталогНаДиске1 = Новый Файл(ПутьКФайлам1);
		Если НЕ КаталогНаДиске1.Существует() Тогда
			Предупреждение("Каталог для этой Заявки не существует", 2);
			Возврат;
	    КонецЕсли;
    КонецЕсли;
	//Получаем адреса
	АдресаОтправки = Новый Массив;
	Если
		Контрагент.ОтправлятьПлощадьЗапечаткиЗаявителю
		ИЛИ
		Контрагент.ОтправлятьПлощадьЗапечаткиВКопию
	Тогда //Добавляем адреса из папки input из самого первого eml
		ПутьКФайламИнпут = ПутьКФайлам1 + Слеш + "Input";
	    КаталогНаДискеИнпут = Новый Файл(ПутьКФайламИнпут);
		Если НЕ КаталогНаДискеИнпут.Существует() Тогда
			Предупреждение("Каталог Input для этой Заявки не существует", 2);
			Возврат;
	    КонецЕсли;
		ФайлыПочтовыхСообщений = НайтиФайлы(ПутьКФайламИнпут, "*.eml", Истина); //Ищет и *.EML
		Если ФайлыПочтовыхСообщений.Количество() = 0 Тогда
			Сообщить("Для этой заявки Почтовое сообщение не найдено.");
		Иначе //Выделяем самое старое почтовое сообщение
			СамыйСтарый = ТекущаяДата() + 365 * 24 * 60 * 60;
			Для Каждого ФайлПочтовыхСообщений Из ФайлыПочтовыхСообщений Цикл
				Если СамыйСтарый > ФайлПочтовыхСообщений.ПолучитьВремяИзменения() Тогда
					НужныйФайл = ФайлПочтовыхСообщений;
					СамыйСтарый = ФайлПочтовыхСообщений.ПолучитьВремяИзменения();
				КонецЕсли;
			КонецЦикла;
			Текст = Новый ЧтениеТекста;
        	Текст.Открыть(НужныйФайл.ПолноеИмя);
			АдресОтКого = Неопределено;
			АдресВКопию = Неопределено;
			ЧитаемФром = Ложь;
			ЧитаемБлок = Ложь;
			Стр = Текст.ПрочитатьСтроку();
			Пока
				Стр <> Неопределено
				И
				(
				    (
						Контрагент.ОтправлятьПлощадьЗапечаткиЗаявителю
						И
						АдресОтКого = Неопределено
					)
					ИЛИ
					(
						Контрагент.ОтправлятьПлощадьЗапечаткиВКопию
						И
						АдресВКопию = Неопределено
					)
				)
			Цикл // строки читаются до символа перевода строки
				Если //"From: "
					Контрагент.ОтправлятьПлощадьЗапечаткиЗаявителю
					И
					Лев(Стр, 6) = "From: "
				Тогда
					Если Прав(Стр, 2) = "?=" Тогда
						СтрФром = Стр;
						ЧитаемФром = Истина;
					Иначе
						АдресОтКого = ВыделитьИзУголков(Сред(Стр, 6 + 1));
					КонецЕсли;
				ИначеЕсли
					ЧитаемФром
				Тогда
					Если Лев(Стр, 3) = " =?" Тогда
						СтрФром = СтрФром + Стр;
					Иначе
						ЧитаемФром = Ложь;
						АдресОтКого = ВыделитьИзУголков(Сред(СтрФром, 6 + 1));
					КонецЕсли;
				КонецЕсли;
				Если //"Cc: "
					Контрагент.ОтправлятьПлощадьЗапечаткиВКопию
					И
					Лев(Стр, 4) = "Cc: "
				Тогда
					СтрБлок = ВыделитьИзУголков(Сред(Стр, 4 + 1));
					ЧитаемБлок = Истина;
				ИначеЕсли
					ЧитаемБлок
				Тогда
					Если
						Лев(Стр, 1) = Символы.Таб
					Тогда
						СтрБлок = СтрБлок + "," + ВыделитьИзУголков(Сред(Стр, 1 + 1));
					Иначе
						ЧитаемБлок = Ложь;
						АдресВКопию = СтрБлок;
					КонецЕсли;
				КонецЕсли;
				Стр = Текст.ПрочитатьСтроку();
				Если //На случай если эти теги в конце файла
					Стр = Неопределено
					И
					(
						ЧитаемБлок
						ИЛИ
						ЧитаемФром
					)
				Тогда
					Стр = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Контрагент.ОтправлятьПлощадьЗапечаткиЗаявителю	Тогда
		Если ЗначениеЗаполнено(АдресОтКого) Тогда
			АдресаОтправки.Добавить(АдресОтКого);
		Иначе
			Сообщить("Не удалось выделить адрес От кого для отправки запечатки!");
		КонецЕсли;
	КонецЕсли;
	Если Контрагент.ОтправлятьПлощадьЗапечаткиВКопию Тогда
		Если ЗначениеЗаполнено(АдресВКопию) Тогда
			тмпМассивАдресов = АО_ОбщийМодуль.РазложитьСтрокуВМассив(АдресВКопию, , Ложь);
			Для Каждого тмпАдрес Из тмпМассивАдресов Цикл;
				АдресаОтправки.Добавить(тмпАдрес);
			КонецЦикла;
		Иначе
			Сообщить("Не удалось выделить адреса В копию для отправки запечатки!");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент.ОтправлятьПлощадьЗапечаткиНаАдреса) Тогда //Добавляем адреса еще и от сюда
		тмпМассивАдресов = АО_ОбщийМодуль.РазложитьСтрокуВМассив(Контрагент.ОтправлятьПлощадьЗапечаткиНаАдреса, , Ложь);
		Для Каждого тмпАдрес Из тмпМассивАдресов Цикл;
			АдресаОтправки.Добавить(тмпАдрес);
		КонецЦикла;
	КонецЕсли;
	Если АдресаОтправки.Количество() = 0 Тогда
		Предупреждение("Нет адресов для отправки запечатки.", 2);
		Возврат;
	КонецЕсли;
	
	//Извлекаем Тему и содержание письма
	ЗначениеВозврата = ЭтотОбъект.мПрочитатьФайлCoverage();
	Если ТипЗнч(ЗначениеВозврата) = Тип("Строка") Тогда
		Если ЭтоПрежнееПисьмо Тогда
			Предупреждение(ЗначениеВозврата + "
			|Отправка запечатки отменена.");	//, 2
			Возврат;
		Иначе
			ЗапечаткаЗаполнена = Ложь;
			МассивВрем = ЭтотОбъект.ТаблицаФайловТиф.НайтиСтроки(Новый Структура("ПлощадьЗапечатки", 0));
			Если МассивВрем.Количество() = 0 Тогда
				МассивВрем = ЭтотОбъект.ТаблицаФайловТиф.НайтиСтроки(Новый Структура("ПроцентЗапечатки", 0));
				Если МассивВрем.Количество() = 0 Тогда
					ЗапечаткаЗаполнена = Истина;
				КонецЕсли; 
			КонецЕсли; 
			Если НЕ ЗапечаткаЗаполнена Тогда
				//Сообщить(ЗначениеВозврата);
				Предупреждение(ЗначениеВозврата + "
				|Отправка запечатки отменена.");	//, 2
				Возврат;
			КонецЕсли; 
			ЗначениеВозврата = Новый ТаблицаЗначений;
		КонецЕсли; 
	Иначе
		//Проверяем, заполнены ли значения в ТаблицаФайловТиф, заполняем
		ЕстьИзмененияТЧ = Ложь;
		ДляОтправки = ЗначениеВозврата;
		Для каждого СтрокаТабл Из ДляОтправки Цикл
			ДляОтправкиЦветЗапечатки = СтрокаТабл.ДляОтправкиЦветЗапечатки;
			Если Найти(ВРЕГ(ДляОтправкиЦветЗапечатки), "PANTONE") = 1 Тогда
				ДляОтправкиЦветЗапечатки = СокрЛП(Сред(ДляОтправкиЦветЗапечатки, СтрДлина("PANTONE") + 1));
				ПозПоследнегоПробела = 0;
				Для Поз = 1 По СтрДлина(ДляОтправкиЦветЗапечатки) Цикл
					Если Сред(ДляОтправкиЦветЗапечатки, Поз, 1) = " " Тогда
						ПозПоследнегоПробела = Поз;
					КонецЕсли; 
				КонецЦикла; 
				Если ПозПоследнегоПробела > 0 Тогда
					ДляОтправкиЦветЗапечатки = СокрЛП(Лев(ДляОтправкиЦветЗапечатки, ПозПоследнегоПробела - 1));
				КонецЕсли; 
			КонецЕсли; 
			СтрокаТаблицаФайловТиф = ТаблицаФайловТиф.Найти(ДляОтправкиЦветЗапечатки, "ИмяЦвета");
			Если СтрокаТаблицаФайловТиф = Неопределено Тогда
				Сообщить("Не найден цвет " + ДляОтправкиЦветЗапечатки + " в таблице файлов ТИФ.");
				Продолжить;
			КонецЕсли; 
			Если СтрокаТаблицаФайловТиф.ПлощадьЗапечатки = 0 И СтрокаТабл.ДляОтправкиПлощадьЗапечатки <> 0 Тогда
				СтрокаТаблицаФайловТиф.ПлощадьЗапечатки = СтрокаТабл.ДляОтправкиПлощадьЗапечатки;
				ЕстьИзмененияТЧ = Истина;
			КонецЕсли; 
			Если СтрокаТаблицаФайловТиф.ПроцентЗапечатки = 0 И СтрокаТабл.ДляОтправкиПроцентЗапечатки <> 0 Тогда
				СтрокаТаблицаФайловТиф.ПроцентЗапечатки = СтрокаТабл.ДляОтправкиПроцентЗапечатки;
				ЕстьИзмененияТЧ = Истина;
			КонецЕсли; 
		КонецЦикла; 
		Если ЕстьИзмененияТЧ Тогда
			Записать();
			ЭтаФорма.Модифицированность = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	ДляОтправки = ЗначениеВозврата;
	
	//Отправляем
	Текст =
	"Уважаемый клиент!
	|";
	Если ЭтоПрежнееПисьмо Тогда
		Если Контрагент.ОтправлятьПлощадьЗапечаткиТекстомВПисьме Тогда
			Текст = Текст + "
			|Сообщаем данные по заказу:";
			Сч = 0;
			Для Каждого СтрДляОтправки Из ДляОтправки Цикл
				Сч = Сч + 1;
				Текст = Текст + "
				|" + Строка(Сч) + ".
				|Название цвета            	" + СтрДляОтправки.ДляОтправкиЦветЗапечатки;
				Если ОтправлятьПлощадьЗапечаткиПлощадь Тогда
					Текст = Текст + "
					|Площадь запечатки, кв.мм  	" + СтрДляОтправки.ДляОтправкиПлощадьЗапечатки;
				КонецЕсли; 
				Если ОтправлятьПлощадьЗапечаткиПроцент Тогда
					Текст = Текст + "
					|Процент запечатки, %  	    " + СтрДляОтправки.ДляОтправкиПроцентЗапечатки;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		ВложениеВрем = Неопределено;
		Если Контрагент.ОтправлятьПлощадьЗапечаткиТаблицейВоВложении Тогда
			НомерЗаказаВрем = Формат(Число(Номер), "ЧГ=0");
			ИмяФайлаВрем = "Запечатка заказа №" + НомерЗаказаВрем;
			РасширениеВрем = "xls";
			Текст = Текст + "
			|Данные по заказу во вложенном файле: " + ИмяФайлаВрем + "." + РасширениеВрем;
			
			ТаблДок = Новый ТабличныйДокумент;
			Макет = ПолучитьМакет("ОтправкаЗапечатки");
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбластьЗаголовок|Начало");
			ОбластьЗаголовокТаблицыНачало = Макет.ПолучитьОбласть("ОбластьЗаголовокТаблицы|Начало");
			ОбластьЗаголовокТаблицыПлощадь = Макет.ПолучитьОбласть("ОбластьЗаголовокТаблицы|Площадь");
			ОбластьЗаголовокТаблицыПроцент = Макет.ПолучитьОбласть("ОбластьЗаголовокТаблицы|Процент");
			ОбластьСтрокаНачало = Макет.ПолучитьОбласть("ОбластьСтрока|Начало");
			ОбластьСтрокаПлощадь = Макет.ПолучитьОбласть("ОбластьСтрока|Площадь");
			ОбластьСтрокаПроцент = Макет.ПолучитьОбласть("ОбластьСтрока|Процент");
			
			ОбластьЗаголовок.Параметры.Заголовок = "Площадь запечатки по заявке " + Формат(Число(Номер), "ЧГ=0") + " " + НазваниеЗаказа;
			ТаблДок.Вывести(ОбластьЗаголовок);
			ТаблДок.Вывести(ОбластьЗаголовокТаблицыНачало);
			Если ОтправлятьПлощадьЗапечаткиПлощадь Тогда
				ТаблДок.Присоединить(ОбластьЗаголовокТаблицыПлощадь);
			КонецЕсли; 
			Если ОтправлятьПлощадьЗапечаткиПроцент Тогда
				ТаблДок.Присоединить(ОбластьЗаголовокТаблицыПроцент);
			КонецЕсли; 
			Сч = 0;
			Для Каждого СтрДляОтправки Из ДляОтправки Цикл
				Сч = Сч + 1;
				ОбластьСтрокаНачало.Параметры.Заполнить(СтрДляОтправки);
				ОбластьСтрокаНачало.Параметры.НПП = Сч;
				ТаблДок.Вывести(ОбластьСтрокаНачало);
				Если ОтправлятьПлощадьЗапечаткиПлощадь Тогда
					ОбластьСтрокаПлощадь.Параметры.Заполнить(СтрДляОтправки);
					ТаблДок.Присоединить(ОбластьСтрокаПлощадь);
				КонецЕсли; 
				Если ОтправлятьПлощадьЗапечаткиПроцент Тогда
					ОбластьСтрокаПроцент.Параметры.Заполнить(СтрДляОтправки);
					ТаблДок.Присоединить(ОбластьСтрокаПроцент);
				КонецЕсли; 
			КонецЦикла;
			Обл = ТаблДок.Область(1, 1, 1, ТаблДок.ШиринаТаблицы);
			Обл.Объединить();
			КаталогВрем = КаталогВременныхФайлов();
			ИмяКаталогаЗаказа = КаталогВрем + "\" + "Заказ" + НомерЗаказаВрем;
			Файл = Новый Файл(ИмяКаталогаЗаказа);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталогаЗаказа);
			КонецЕсли; 
			ПолноеИмяФайла = ИмяКаталогаЗаказа + "\" + ИмяФайлаВрем + "." + РасширениеВрем;
			ТаблДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
			ВложениеВрем = ПолноеИмяФайла;
		КонецЕсли; 
	Иначе
		НомерЗаказаВрем = Формат(Число(Номер), "ЧГ=0");
		ИмяФайлаВрем = "Сведения о заказе №" + НомерЗаказаВрем;
		РасширениеВрем = "xls";
		Текст = Текст + "
		|Данные по заказу во вложенном файле: " + ИмяФайлаВрем + "." + РасширениеВрем;
		
		ТаблДок = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("ОтправкаЗапечаткиПолная");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбластьЗаголовок");
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ОбластьЗаголовокТаблицы");
		ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		
		ОбластьЗаголовок.Параметры.Заголовок = "Сведения о запечатке по заявке " + Формат(Число(Номер), "ЧГ=0") + " " + НазваниеЗаказа;
		ОбластьЗаголовок.Параметры.Заполнить(ЭтотОбъект);
		ТаблДок.Вывести(ОбластьЗаголовок);
		ТаблДок.Вывести(ОбластьЗаголовокТаблицы);
		Для каждого СтрокаТЧ Из ЭтотОбъект.ТаблицаФайловТиф Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
			ОбластьСтрока.Параметры.НПП = СтрокаТЧ.НомерСтроки;
			ТаблДок.Вывести(ОбластьСтрока);
			Обл = ТаблДок.Область(ТаблДок.ВысотаТаблицы, 3, ТаблДок.ВысотаТаблицы, 3);
			ЦветВрем = Новый Цвет(СтрокаТЧ.Цвет_R, СтрокаТЧ.Цвет_G, СтрокаТЧ.Цвет_B);
			Обл.ЦветФона = ЦветВрем;
		КонецЦикла; 
		
		КаталогВрем = КаталогВременныхФайлов();
		ИмяКаталогаЗаказа = КаталогВрем + "Заказ" + НомерЗаказаВрем;
		Файл = Новый Файл(ИмяКаталогаЗаказа);
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаЗаказа);
		КонецЕсли; 
		ПолноеИмяФайла = ИмяКаталогаЗаказа + "\" + ИмяФайлаВрем + "." + РасширениеВрем;
		ТаблДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		ВложениеВрем = ПолноеИмяФайла;
		
	КонецЕсли; 
	
	Текст = Текст + "
	|
	|С уважением,
	|optimasmart.ru
	|+7(499) 558-39-50";
	Отправлено = "";
	НеОтправлено = "";
	ОтправленоКоличество = 0;
	НеОтправленоКоличество = 0;
	Для Каждого АдресОтправки Из АдресаОтправки Цикл
		ИсходящееПисьмо = Новый ИнтернетПочтовоеСообщение;
		ИсходящееПисьмо.Отправитель = "auto@optimasmart.ru";
		ИсходящееПисьмо.Получатели.Добавить(АдресОтправки);
		ИсходящееПисьмо.Тема = "optimasmart.ru. Уведомление о площади запечатки по заявке " + Формат(Число(Номер), "ЧГ=0") + " " + НазваниеЗаказа;
		ИсходящееПисьмо.Тексты.Добавить(Текст);
		Если ВложениеВрем <> Неопределено Тогда
			ИсходящееПисьмо.Вложения.Добавить(ВложениеВрем);
		КонецЕсли; 
		Если ОС_ОтправкаПочты.ОтправитьПисьмо(ИсходящееПисьмо) Тогда
			Отправлено = Отправлено + АдресОтправки + ", ";
			ОтправленоКоличество = ОтправленоКоличество + 1;
		Иначе
			НеОтправлено = НеОтправлено + АдресОтправки + ", ";
			НеОтправленоКоличество = НеОтправленоКоличество + 1;
		КонецЕсли;
	КонецЦикла;
	Если ОтправленоКоличество > 0 Тогда
		Отправлено = Строка(ОтправленоКоличество) + " успешно на: " + Лев(Отправлено, СтрДлина(Отправлено) - 2);
		Если НеОтправленоКоличество > 0 Тогда
			Отправлено = Отправлено + ", ";
		КонецЕсли;
	КонецЕсли;
	Если НеОтправленоКоличество > 0 Тогда
		бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОтправитьПлощадьЗапечаткиНажатие НеОтправленоКоличество > 0", Истина);
		Отправлено = Отправлено + Строка(НеОтправленоКоличество) + " ошибка на: " + Лев(НеОтправлено, СтрДлина(НеОтправлено) - 2);
	КонецЕсли;
	Если ОтправленоКоличество + НеОтправленоКоличество > 0 Тогда
		//Делаем запись в регистр сведений ОтправитьПлощадьЗапечаткиРезультат
		ЗаписатьВОтправитьПлощадьЗапечаткиРезультат(Отправлено);
		//Меняем реквизит формы ОтправитьПлощадьЗапечаткиРезультат
		ОтправитьПлощадьЗапечаткиРезультат = ПрочитатьВОтправитьПлощадьЗапечаткиРезультат();
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаАдресДоставкиПоУмолчаниюНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнопкаАдресДоставкиПоУмолчаниюНажатие", Истина);
	
    Запрос = Новый Запрос;
    
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   АдресаДоставки.АдресДоставки,
    |   АдресаДоставки.ПоУмолчанию
    |ИЗ
    |   РегистрСведений.АдресаДоставки КАК АдресаДоставки
    |ГДЕ
    |   АдресаДоставки.Контрагент = &Контрагент";
    
    Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
    
    ТаблРезультат = Запрос.Выполнить().Выгрузить();
    
    Если ТаблРезультат.Количество() = 0 Тогда
		Сообщить("Для контрагента не указано ни одного адреса доставки");
    Иначе
        МассивПоУмолчанию = ТаблРезультат.НайтиСтроки(Новый Структура("ПоУмолчанию", Истина));
        Если МассивПоУмолчанию.Количество() = 0 Тогда
            Сообщить("Для контрагента не указан адрес доставки по умолчанию");
        ИначеЕсли МассивПоУмолчанию.Количество() > 1 Тогда
            Сообщить("Для контрагента указано несколько адресов доставки по умолчанию");
        Иначе
            Если ЭтотОбъект.АдресДоставки <> МассивПоУмолчанию[0].АдресДоставки Тогда
                ЭтотОбъект.АдресДоставки = МассивПоУмолчанию[0].АдресДоставки;
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли; 
    
КонецПроцедуры

Процедура СвязанныеЗаявкиНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СвязанныеЗаявкиНажатие", Истина);
	
	РезультатЗапроса = ПолучитьСвязанныеЗаявки();
	Фрм = ПолучитьФорму("ФормаВыбораСтроки");
	Фрм.ЭлементыФормы.ТаблицаВыбора.Значение = РезультатЗапроса;
	Фрм.ЭлементыФормы.ТаблицаВыбора.Значение.Колонки.Ссылка.Ширина = 50;
	Фрм.ЭлементыФормы.ТаблицаВыбора.СоздатьКолонки();
	Фрм.ЭлементыФормы.ТаблицаВыбора.Колонки.Ссылка.ТолькоПросмотр = Истина;
    ВыбСтрокаОграничений = Фрм.ОткрытьМодально();
    Если
        ВыбСтрокаОграничений <> Неопределено
        И
        ВыбСтрокаОграничений.Количество() > 0
	Тогда
		Для Каждого СтрВыбСтрокаОграничений Из ВыбСтрокаОграничений Цикл
			СтрВыбСтрокаОграничений.Ссылка.ПолучитьФорму().Открыть();
		КонецЦикла;
    КонецЕсли;
КонецПроцедуры

Процедура ЮГ_ДобавитьОписаниеКнопки(СтатусЗаявкиПарам)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_ДобавитьОписаниеКнопки", Истина);
	
	МетаЗначение = СтатусЗаявкиПарам.Метаданные().ЗначенияПеречисления.Получить(Перечисления[СтатусЗаявкиПарам.Метаданные().Имя].Индекс(СтатусЗаявкиПарам));
	ИмяЗначенияПеречисления = МетаЗначение.Имя;
	ИмяПроцедуры = "ОтправитьНа" + ИмяЗначенияПеречисления;
	
	//Проверяем наличие процедуры
	СтрокаПроцедуры = ИмяПроцедуры + "(Истина)";
	ЕстьПроцедура = Ложь;
	Попытка
		Выполнить(СтрокаПроцедуры);
		ЕстьПроцедура = Истина;
	Исключение
	КонецПопытки; 
	Если НЕ ЕстьПроцедура Тогда
		//Процедуры нет - кнопку не добавляем
		//Сообщить("Для перехода на статус """ + СтатусЗаявкиПарам + """ нет процедуры.");
		Возврат;
	КонецЕсли; 
	
	ИмяКнопки = "КнопкаОтправитьНа" + ИмяЗначенияПеречисления;
	СинонимЗначенияПеречисления = МетаЗначение.Синоним;
	
	НоваяСтрока = фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Добавить();
    НоваяСтрока.ИмяКнопки = ИмяКнопки;
	НоваяСтрока.СтатусЗаявки = СтатусЗаявкиПарам;
    НоваяСтрока.Заголовок = СинонимЗначенияПеречисления;
    НоваяСтрока.ИмяПроцедуры = ИмяПроцедуры;
    
КонецПроцедуры

Функция ЕстьРазрешениеОтправитьНаНовыйСтатус(ЦелевойСтатус)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЕстьРазрешениеОтправитьНаНовыйСтатус", Истина);
	
	Если ЦелевойСтатус = ЭтотОбъект.АО_СтатусыЗаявки Тогда
		//Пока считается, что разрешения на перевод в одном статусе действуют прежние
		Возврат Истина;
	КонецЕсли; 
	
	//Проверяем стоп по чек-листу - начало
	ИспользоватьСтопПоЧекЛисту = Ложь;
	ТестДата = Константы.ЮГ_ТекущаяДатаНачалаИспользованияЧекЛистовКЗаявкам.Получить();
	Если ЗначениеЗаполнено(ТестДата) Тогда
		ИспользоватьСтопПоЧекЛисту = (ТестДата <= НачалоДня(ТекущаяДата()));
	КонецЕсли; 
	Если ИспользоватьСтопПоЧекЛисту Тогда
		ТестДата = Константы.ЮГ_ДатаЗаявкиДляНачалаИспользованияЧекЛиста.Получить();
		Если ЗначениеЗаполнено(ТестДата) Тогда
			ИспользоватьСтопПоЧекЛисту = (ТестДата <= НачалоДня(ЭтотОбъект.Дата));
		Иначе
			ИспользоватьСтопПоЧекЛисту = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	СсылкаПравил = Неопределено;
	Если ИспользоватьСтопПоЧекЛисту Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЮГ_ПравилаДействийПоЗаявкам.Ссылка
		|ИЗ
		|	Справочник.ЮГ_ПравилаДействийПоЗаявкам КАК ЮГ_ПравилаДействийПоЗаявкам
		|ГДЕ
		|	ЮГ_ПравилаДействийПоЗаявкам.ВидДействияДляПравил = &ВидДействияДляПравил
		|	И ЮГ_ПравилаДействийПоЗаявкам.СтатусыДействия.СтатусЗаявки = &СтатусЗаявки";
		
		Запрос.УстановитьПараметр("ВидДействияДляПравил", Перечисления.ЮГ_ВидыДействийСЗаявкойДляПравил.СтопПоЧекЛисту);
		Запрос.УстановитьПараметр("СтатусЗаявки", ЦелевойСтатус);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИспользоватьСтопПоЧекЛисту = Истина;
			СсылкаПравил = Выборка.Ссылка;
		КонецЕсли; 
	КонецЕсли; 
	Если ИспользоватьСтопПоЧекЛисту Тогда
		Если НЕ ЮГ_ИспользуетсяЧекЛист() Тогда
			ИспользоватьСтопПоЧекЛисту = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	Если ИспользоватьСтопПоЧекЛисту Тогда
		ЧекЛистСсылка = ЮГ_ПолучитьСсылкуЧекЛиста();
		
		Если ЧекЛистСсылка = Неопределено Тогда
			ТекстСообщения = "Отсутствует чек-лист. Перевод в статус """ + ЦелевойСтатус + """ невозможен!";
			Сообщить(ТекстСообщения);
			Возврат Ложь;
		Иначе
			Если ЭтаФорма.Модифицированность Тогда
				//Только в этот момент Модифицированность может быть критична, т.к. могут быть изменены реквизиты, которые могут аннулировать чек-лист:
				// а при записи Заявки все изменения будут синхронизированы с чек-листом, и будет точно известно - отработан ли он.
				ТекстСообщения = "Для перевода статуса Заявка должна быть записана!";
				Сообщить(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли; 
			Если НЕ ЧекЛистСсылка.Проверен Тогда
				ТекстСообщения = "Чек-лист не проверен. Перевод в статус """ + ЦелевойСтатус + """ невозможен!";
				Сообщить(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли; 
			Если НЕ ЧекЛистСсылка.Утвержден Тогда
				ТекстСообщения = "Чек-лист не утвержден. Перевод в статус """ + ЦелевойСтатус + """ невозможен!";
				Сообщить(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	//Проверяем стоп по чек-листу - конец
	
	Возврат Истина;
	
КонецФункции
 
Процедура ЮГ_ОбработатьНажатиеКнопкиПередатьЗаявку(Кнопка)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_ОбработатьНажатиеКнопкиПередатьЗаявку", Истина);
	//КИГ++
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		СтатусОсновнойДо = ЭтотОбъект.АО_СтатусыЗаявки;
		РезультатЗапроса = ПолучитьСвязанныеЗаявки();
	КонецЕсли;
	//КИГ--
	СтрокаТабл = фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Найти(Кнопка.Имя, "ИмяКнопки");
	Если СтрокаТабл = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЕстьРазрешениеОтправитьНаНовыйСтатус(СтрокаТабл.СтатусЗаявки) Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаПроцедуры = СтрокаТабл.ИмяПроцедуры + "(Истина)";
	ЕстьПроцедура = Ложь;
	Попытка
		Выполнить(СтрокаПроцедуры);
		ЕстьПроцедура = Истина;
	Исключение
	КонецПопытки; 
	Если НЕ ЕстьПроцедура Тогда
		Сообщить("Переход на этот статус в Заявке не предусмотрен! Обратитесь к администратору.");
		Возврат;
	КонецЕсли; 
	
	СтрокаПроцедуры = СтрокаТабл.ИмяПроцедуры + "()";
	Выполнить(СтрокаПроцедуры);
	//КИГ++
	Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		Если РезультатЗапроса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если СтатусОсновнойДо <> ЭтотОбъект.АО_СтатусыЗаявки Тогда
			Для каждого Заявка Из РезультатЗапроса Цикл
				Если Заявка.Ссылка.АО_СтатусыЗаявки <> ЭтотОбъект.АО_СтатусыЗаявки Тогда
					Сообщить("У заказа " + ЭтотОбъект.Номер + " есть связующая заявка "+ Заявка.Ссылка.Номер + ", в заявке "+ Заявка.Ссылка.Номер + " также необходимо сменить на статус на " + ЭтотОбъект.АО_СтатусыЗаявки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//КИГ--
КонецПроцедуры
 
Функция ЮГ_ДобавитьКнопкуПередатьЗаявку(СтатусЗаявкиПарам, ДобавлятьРазделитьДоЕслиЕстьКнопкиРанее = Ложь, ДобавлятьРазделитьПослеЕслиКнопкаДобавлена = Ложь)
	
	Если ДобавлятьРазделитьДоЕслиЕстьКнопкиРанее = Истина Тогда
        ЮГ_ДобавитьРазделительПередатьЗаявку();
    КонецЕсли; 
    
    СтрокаТабл = фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Найти(СтатусЗаявкиПарам, "СтатусЗаявки");
    Если СтрокаТабл <> Неопределено Тогда
		МетаЗначение = СтатусЗаявкиПарам.Метаданные().ЗначенияПеречисления.Получить(Перечисления[СтатусЗаявкиПарам.Метаданные().Имя].Индекс(СтатусЗаявкиПарам));
		ИмяЗначенияПеречисления = МетаЗначение.Имя;
		ИмяКнопки = "КнопкаОтправитьНа" + ИмяЗначенияПеречисления;
        Кнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Найти(ИмяКнопки);
		Если Кнопка = Неопределено Тогда
			//Имя процедуры будет: ЮГ_ОБработатьНажатиеКнопкиПередатьЗаявку
            Кнопка = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Добавить(СтрокаТабл.ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, СтрокаТабл.Заголовок, Новый Действие("ЮГ_ОбработатьНажатиеКнопкиПередатьЗаявку"));
			//Если ЭтаФорма.ТолькоПросмотр Тогда	//Пока отключаем
			//	Кнопка.Доступность = Ложь;
			//КонецЕсли; 
            Если ДобавлятьРазделитьПослеЕслиКнопкаДобавлена = Истина Тогда
                ЮГ_ДобавитьРазделительПередатьЗаявку();
            КонецЕсли; 
        КонецЕсли; 
    КонецЕсли; 
    
    Возврат Кнопка;
    
КонецФункции
 
Процедура ЮГ_ДобавитьРазделительПередатьЗаявку()
	
	ИмяКнопки = "";
    Для Нум = 1 По 100 Цикл
        ИмяКнопки = "ПередатьЗаявкуРазделитель" + Нум;
        Если ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Найти(ИмяКнопки) = Неопределено Тогда
            ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Разделитель);
            Прервать;
        КонецЕсли; 
    КонецЦикла; 
    
КонецПроцедуры
 
Процедура ЮГ_УдалитьКонцевыеРазделителиПередатьЗаявку()
	
    Для НумМинус = -(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Количество() - 1) По 0 Цикл
        ИмяКнопки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки[-НумМинус].Имя;
        Если Найти(ИмяКнопки, "ПередатьЗаявкуРазделитель") = 1 Тогда
            ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПередатьЗаявку.Кнопки.Удалить(-НумМинус);
        Иначе
            Прервать;
        КонецЕсли; 
    КонецЦикла; 
    
КонецПроцедуры
 
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.УслугиКоличествоПриИзменении", Истина);
	
	ТекСтрока = ЭлементыФормы.Услуги.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
КонецПроцедуры

Процедура CaT_ПоляПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.CaT_ПоляПриИзменении", Истина);
	
	Если CaT_Поля Тогда
		Если CaT_ПолеСнизу = 0 И CaT_ПолеСлева = 0 И CaT_ПолеСправа = 0 И CaT_ПолеСверху <> 0 Тогда
			CaT_ПолеСнизу = CaT_ПолеСверху;
			CaT_ПолеСлева = CaT_ПолеСверху;
			CaT_ПолеСправа = CaT_ПолеСверху;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура КнОткрытьПапкуМакетаНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнОткрытьПапкуМакетаНажатие", Истина);
	
	ПутьКФайламВрем = СокрЛП(ЭтотОбъект.ПутьКФайлам);
	Если НЕ ЗначениеЗаполнено(ПутьКФайламВрем) Тогда
		Сообщить("Не указан ""Путь к файлам"". Выбор невозможен!");
		Возврат;
	КонецЕсли; 
	Слеш = ?(Найти(ПутьКФайламВрем,"//"),"/","\");
	Если Прав(ПутьКФайламВрем, 1) <> Слеш Тогда
		ПутьКФайламВрем = ПутьКФайламВрем + Слеш;
	КонецЕсли; 
	ПутьКФайламВрем = ПутьКФайламВрем + "Maket";
	
	Если ЭтаФорма.ТолькоПросмотр Тогда
		ЗапуститьПриложение("explorer " + ПутьКФайламВрем);
		Возврат;
	КонецЕсли; 
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ПутьКФайламВрем;
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	//Добавим в фильтр LEN
	Фильтр = "Файлы Pdf,Ps,Eps,Ai(*.Ps,*.Pdf,*.eps,*.ai)|*.Pdf;*.Ps;*.eps;*.ai"; //Фильтр = "Все Файлы (*.*)|*.*";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Если МассивФайлов.Количество() > 0 Тогда
			ЮГ_ФайлыМакетаВрем = ""; //ЭтотОбъект.ЮГ_ФайлыМакета;
			Для каждого ИмяФайлаВрем Из МассивФайлов Цикл
				Если Найти(ВРЕГ(ИмяФайлаВрем), ВРЕГ(ПутьКФайламВрем)) = 0 Тогда
					Сообщить("Файлы могут быть выбраны только из папки Maket папки заказа!");
					Возврат;
				КонецЕсли; 
				Слеш = ?(Найти(ИмяФайлаВрем,"//"),"/","\");
				Поз = Найти(ИмяФайлаВрем, Слеш);
				Пока Поз > 0 Цикл
					ИмяФайлаВрем = Сред(ИмяФайлаВрем, Поз + 1);
					Поз = Найти(ИмяФайлаВрем, Слеш);
				КонецЦикла; 
				Если ЗначениеЗаполнено(ИмяФайлаВрем) Тогда
					Если Найти(";" + ЮГ_ФайлыМакетаВрем, ";" + ИмяФайлаВрем) > 0 Тогда
						Сообщить("Файл  " + ИмяФайлаВрем + " уже зарегистрирован. Пропущен.");
						Продолжить;
					КонецЕсли; 
					ЮГ_ФайлыМакетаВрем = ЮГ_ФайлыМакетаВрем + ";" + ИмяФайлаВрем;
				КонецЕсли; 
			КонецЦикла; 
			Если ЗначениеЗаполнено(ЮГ_ФайлыМакетаВрем) Тогда
				Пока Лев(ЮГ_ФайлыМакетаВрем, 1) = ";" Цикл
					ЮГ_ФайлыМакетаВрем = Сред(ЮГ_ФайлыМакетаВрем, 2);
				КонецЦикла; 
				ЭтотОбъект.ЮГ_ФайлыМакета = ЮГ_ФайлыМакетаВрем;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаЮГ_ПодвалНажатие(Элемент)
	
	// Проверки
	ТекстОшибок = "";
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НаправлениеПечати) Тогда
		ТекстОшибок = ТекстОшибок + "
		| - не заполнено ""Направление печати""";
	КонецЕсли; 
	Если ТекстОшибок <> "" Тогда
		ТекстОшибок = "Ошибки в документе:" + ТекстОшибок + "
		|Формирование файла XML невозможна!";
		Сообщить(ТекстОшибок);
		Возврат;
	КонецЕсли; 
	
	ПутьКФайламВрем = "\\FS2\xml\to_Blank";
	НовыйКаталог = Новый Файл(ПутьКФайламВрем);
	Если НЕ НовыйКаталог.Существует() Тогда
		Сообщить("Не существует папка " + ПутьКФайламВрем + ". Запись ""подвала"" невозможна!");
		Возврат;
	КонецЕсли; 
	Слеш = ?(Найти(ПутьКФайламВрем,"//"),"/","\");
	Если Прав(ПутьКФайламВрем, 1) <> Слеш Тогда
		ПутьКФайламВрем = ПутьКФайламВрем + Слеш;
	КонецЕсли; 
	
	НомерЗаказа = ОбщегоНазначения.ПолучитьНомерНаПечать(Ссылка); 
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайлаВрем = НомерЗаказа + "_"+ Строка(Контрагент.ОС_НомерПоРеестру) + "_Blank.xml";

	ИмяФайлаXML_Сохр = ПутьКФайламВрем + ИмяФайлаВрем;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаXML_Сохр);
	
	//Записать директиву
	ЗаписьXML.ЗаписатьОбъявлениеXML(); //<?xml version="1.0"?>.
	// Записать начало корневого элемента
	ЗаписьXML.ЗаписатьНачалоЭлемента("FileForRip");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Order");
			// Добавим текущего пользователя
			ЗаписьXML.ЗаписатьНачалоЭлемента("User1C");
			ЗаписьXML.ЗаписатьТекст(Строка(ЭтотОбъект.Обработал_Заказ));
			ЗаписьXML.ЗаписатьКонецЭлемента();
				
			// Добавим Менеджера
			ЗаписьXML.ЗаписатьНачалоЭлемента("Manager1C");
			ЗаписьXML.ЗаписатьТекст(Строка(ЭтотОбъект.Контрагент.ОсновнойМенеджерПокупателя));
			ЗаписьXML.ЗаписатьКонецЭлемента();
				
			//Добавление поля OrderID, значение берётся из номера заказа
			ЗаписьXML.ЗаписатьНачалоЭлемента("OrderID");
			
			ЗаписьXML.ЗаписатьТекст(НомерЗаказа);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			//Добавление поля OrderIDName, значение берётся из номера заказа + номер контрагента по реестру
			ЗаписьXML.ЗаписатьНачалоЭлемента("OrderIDName");
			ЗаписьXML.ЗаписатьТекст(НомерЗаказа + "_"+ Строка(Контрагент.ОС_НомерПоРеестру));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			//Добавление поля OrderIDName, значение берётся из номера заказа + номер контрагента по реестру
			ЗаписьXML.ЗаписатьНачалоЭлемента("OrderName1С");
			ЗаписьXML.ЗаписатьТекст(ЭтотОбъект.НазваниеЗаказа);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("OrderIDFolder");
			ЗаписьXML.ЗаписатьТекст(Строка(ПутьКФайлам));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ПутьКФайламВрем = СокрЛП(ЭтотОбъект.ПутьКФайлам);
			Если НЕ ЗначениеЗаполнено(ПутьКФайламВрем) Тогда
				//Сообщить("Не указан ""Путь к файлам"". Выбор невозможен!");
				//Возврат;
			Иначе
				Слеш = ?(Найти(ПутьКФайламВрем,"//"),"/","\");
				Если Прав(ПутьКФайламВрем, 1) <> Слеш Тогда
					ПутьКФайламВрем = ПутьКФайламВрем + Слеш;
				КонецЕсли; 
			КонецЕсли;
			
			
			ПутьАутпут = ПутьКФайламВрем + "Maket";
			ЗаписьXML.ЗаписатьНачалоЭлемента("Folder2RIP");
			ЗаписьXML.ЗаписатьТекст(ПутьАутпут);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ПутьАутпут = ПутьКФайламВрем + "Jpeg";
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("FolderOutput");
			ЗаписьXML.ЗаписатьТекст(ПутьАутпут);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			//Запишем имена файлов
			СтрокаИменФайловВрем = СокрЛП(ЭтотОбъект.ЮГ_ФайлыМакета);
			МассивВрем = Новый Массив;
			Если ЗначениеЗаполнено(СтрокаИменФайловВрем) Тогда
				МассивВрем = АО_ПСМ.РазборСтроки(СтрокаИменФайловВрем, МассивВрем, ";");
			КонецЕсли; 
			КоличествоФормВрем = МассивВрем.Количество();
			Для каждого Стр Из МассивВрем Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("Filename");
				ЗаписьXML.ЗаписатьТекст(Стр);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("VersionRepro");
			ЗаписьXML.ЗаписатьТекст(Формат(ЭтотОбъект.ЮГ_ВерсияРепро, "ЧГ=0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		ЗаписьXML.ЗаписатьКонецЭлемента();	//"OrderID"
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Customer");
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerID");
			ЗаписьXML.ЗаписатьТекст(Строка(Контрагент.ОС_НомерПоРеестру));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			//ЗаписьXML.ЗаписатьНачалоЭлемента("JobCustomerName");
			ЗаписьXML.ЗаписатьНачалоЭлемента("CustomerName");
			ЗаписьXML.ЗаписатьТекст(Строка(Контрагент.Наименование));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("CustomersJobReference");
			ЗаписьXML.ЗаписатьТекст(Строка("NONE"));
			ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьКонецЭлемента();	//"Customer"
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Mark");
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("Polimer");
			ЗаписьXML.ЗаписатьТекст("" + ЭтотОбъект.ТипФотополимера);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("FrequencyALL");
			ЗаписьXML.ЗаписатьТекст("" + ЭтотОбъект.Линиатура);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Technology");
			ЗаписьXML.ЗаписатьТекст("" + ЭтотОбъект.Экспонирование);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Winding");
			ЗаписьXML.ЗаписатьТекст(?(ЗначениеЗаполнено(ЭтотОбъект.ЮГ_Намотка), "" + ЭтотОбъект.ЮГ_Намотка, "0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("PrintReport");
			ЗаписьXML.ЗаписатьТекст("" + Формат(ЭтотОбъект.РаппортПечати, "ЧГ=0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Distortion");
			ЗаписьXML.ЗаписатьТекст(ЭтотОбъект.Дисторция);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Print");
			ЗаписьXML.ЗаписатьТекст(?(ЗначениеЗаполнено(ЭтотОбъект.Печать), "" + ЭтотОбъект.Печать, Перечисления.АО_ВидыПечати.Прямая));
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("PrintDirection");
			ЗаписьXML.ЗаписатьТекст("" + ЭтотОбъект.НаправлениеПечати);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Number_of_forms");
			ЗаписьXML.ЗаписатьТекст("" + Формат(КоличествоФормВрем, "ЧГ=0"));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();	//"Mark"
		
	ЗаписьXML.ЗаписатьКонецЭлемента();	//"FileForRip"
	ЗаписьXML.Закрыть();
	
	Сообщить("Файл " + ИмяФайлаXML_Сохр + " записан.");
	
	ЭтотОбъект.ЮГ_ВерсияРепро = ЭтотОбъект.ЮГ_ВерсияРепро + 1;
КонецПроцедуры

Процедура ПечатьПриИзменении(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ПечатьПриИзменении", Истина);
	
	мПечатьПриИзменении();
КонецПроцедуры

Процедура ЮГ_НамоткаПриИзменении(Элемент)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_НамоткаПриИзменении", Истина);
	
	Если ЗначениеЗаполнено(ЮГ_Намотка) Тогда
		ЭлементыФормы.ЮГ_НамоткаКартинка.Видимость = Истина;
		Если ЗначениеЗаполнено(ЮГ_Намотка.Изображение) Тогда
			ЭлементыФормы.ЮГ_НамоткаКартинка.Картинка = ЮГ_Намотка.Изображение.Получить();
		КонецЕсли;
	Иначе
		ЭлементыФормы.ЮГ_НамоткаКартинка.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаИсторияCaTНажатие(Элемент)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.КнопкаИсторияCaTНажатие", Истина);
	
	Форма = Документы.ЮГ_ОбработкаЗаявокCaT_Linux.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма, ЭтаФорма);
	Форма.ЗаявкаОтбор = Ссылка;
	Форма.Открыть();
КонецПроцедуры

//Процедура предназначена для эмуляции включения (отключения) ТолькоПросмотр для элементов формы
//Особенности:
// флаг ТолькоПросмотр для формы отключается вне данной процедуры и до ее вызова!!!
Процедура ЮГ_ЭмуляцияТолькоПросмотр(ЧтоУстанавливатьПарам = Истина)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_ЭмуляцияТолькоПросмотр", Истина);
	
	//Возврат;	//Пока заглушена
	
	ЧтоУстанавливать = ЧтоУстанавливатьПарам;
	
	Если ЧтоУстанавливать = Истина Тогда
		Если фСтруктураНедоступныхПолейДляТолькоПросмотр.Количество() > 0 Тогда
			//Какие-то объекты после предыдущего закрытия могли окрыть - удалим их из списка фСтруктураНедоступныхПолейДляТолькоПросмотр
			УбиратьИзСпискаОткрытые = Истина;
		КонецЕсли; 
	Иначе
		Если фСтруктураНедоступныхПолейДляТолькоПросмотр.Количество() = 0 Тогда
			//Не было вызова этой процедуры с параметром "ЧтоУстанавливать = Истина" -
			// ТолькоПросмотр с элементов не снимаем - т.к. снимется слишком много!
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	Для н = 1 по ЭлементыФормы.Количество() Цикл
		ЭлементФормы = ЭлементыФормы[н-1];
		Если ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанельФормы") ИЛИ ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда
			ЮГ_ЭмуляцияТолькоПросмотрОбработатьКнопки(ЭлементФормы.Кнопки, ЧтоУстанавливать, ЭлементФормы.Имя);
			Продолжить;
		КонецЕсли; 
		ПереченьНеТрогать = "СтатусЗаявки";
		Если Найти("," + ПереченьНеТрогать + ",", "," + ЭлементФормы.Имя + ",") Тогда
			Продолжить;
		КонецЕсли; 
		Кнопки = Неопределено;
		Попытка
			Кнопки = ЭлементФормы.Кнопки;
		Исключение
		КонецПопытки; 
		Если Кнопки <> Неопределено Тогда
			ЮГ_ЭмуляцияТолькоПросмотрОбработатьКнопки(Кнопки, ЧтоУстанавливать, ЭлементФормы.Имя);
			//Саму кнопку обработаем ниже
		КонецЕсли; 
		Попытка
			ПрежнийТолькоПросмотр = ЭлементФормы.ТолькоПросмотр;
			Если НЕ ЭлементФормы.ИзменяетДанные Тогда
				Продолжить;
			КонецЕсли; 
			Если ЧтоУстанавливать = Истина Тогда
				Если ПрежнийТолькоПросмотр И НЕ фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ЭлементФормы.Имя) Тогда
					фСтруктураНедоступныхПолейДляТолькоПросмотр.Вставить(ЭлементФормы.Имя);
				ИначеЕсли НЕ ПрежнийТолькоПросмотр И фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ЭлементФормы.Имя) Тогда
					//Какие-то объекты после предыдущего закрытия могли окрыть - удалим их из списка фСтруктураНедоступныхПолейДляТолькоПросмотр
					фСтруктураНедоступныхПолейДляТолькоПросмотр.Удалить(ЭлементФормы.Имя);
				КонецЕсли; 
				ЭлементФормы.ТолькоПросмотр = Истина;
			Иначе
				Если НЕ фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ЭлементФормы.Имя) Тогда
					ЭлементФормы.ТолькоПросмотр = Ложь;
				КонецЕсли; 
			КонецЕсли; 
		Исключение
			Если ТипЗнч(ЭлементФормы) = Тип("Панель") Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЭлементФормы.ИзменяетДанные Тогда
				Продолжить;
			КонецЕсли; 
			Если фСтруктураВсегдаДоступныхКнопок.Свойство(ЭлементФормы.Имя) Тогда
				Продолжить;
			КонецЕсли; 
			ПрежнийТолькоПросмотр = НЕ ЭлементФормы.Доступность;
			Если ЧтоУстанавливать = Истина Тогда
				Если ПрежнийТолькоПросмотр И НЕ фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ЭлементФормы.Имя) Тогда
					фСтруктураНедоступныхПолейДляТолькоПросмотр.Вставить(ЭлементФормы.Имя);
				ИначеЕсли НЕ ПрежнийТолькоПросмотр И фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ЭлементФормы.Имя) Тогда
					//Какие-то объекты после предыдущего закрытия могли окрыть - удалим их из списка фСтруктураНедоступныхПолейДляТолькоПросмотр
					фСтруктураНедоступныхПолейДляТолькоПросмотр.Удалить(ЭлементФормы.Имя);
				КонецЕсли; 
				ЭлементФормы.Доступность = Ложь;
			Иначе
				Если НЕ фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ЭлементФормы.Имя) Тогда
					ЭлементФормы.Доступность = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецПопытки
	КонецЦикла;
	Если ЧтоУстанавливать = Ложь Тогда
		фСтруктураНедоступныхПолейДляТолькоПросмотр.Очистить();
	КонецЕсли; 
	//Ganin {
	//Механизм управления реквизитами форм
	//Вызываем, т.к. там может по условиям открываться или закрываться доступ к чему-либо -
	// предполагаем, что эта настройка имеет приоритет перед всеобщим закрытием (открытием) доступа
	ЮГ_УправлениеРеквизитамиФормКлиент.ОбработатьУправлениеРеквизитамиФормОбычных(ЭтаФорма, Ложь, Истина);
	//Ganin }
КонецПроцедуры

Процедура ЮГ_ЭмуляцияТолькоПросмотрОбработатьКнопки(Кнопки, ЧтоУстанавливать, ИмяРодительскогоЭлемента, ДляВсехЭлементовБезРазбору = Ложь)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_ЭмуляцияТолькоПросмотрОбработатьКнопки", Истина);
	
	Для каждого Кнопка Из Кнопки Цикл
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
			Продолжить;
		ИначеЕсли Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			ЮГ_ЭмуляцияТолькоПросмотрОбработатьКнопки(Кнопка.Кнопки, ЧтоУстанавливать, Кнопка.Имя, ДляВсехЭлементовБезРазбору);
		ИначеЕсли Кнопка.ИзменяетДанные ИЛИ ДляВсехЭлементовБезРазбору Тогда
			Если фСтруктураВсегдаДоступныхКнопок.Свойство(Кнопка.Имя) Тогда
				Продолжить;
			КонецЕсли; 
			ИмяКнопки = ИмяРодительскогоЭлемента + Кнопка.Имя;
			ПрежнийТолькоПросмотр = НЕ Кнопка.Доступность;
			Если ЧтоУстанавливать = Истина Тогда
				Если ПрежнийТолькоПросмотр И НЕ фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ИмяКнопки) Тогда
					фСтруктураНедоступныхПолейДляТолькоПросмотр.Вставить(ИмяКнопки);
				ИначеЕсли НЕ ПрежнийТолькоПросмотр И фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ИмяКнопки) Тогда
					//Какие-то объекты после предыдущего закрытия могли окрыть - удалим их из списка фСтруктураНедоступныхПолейДляТолькоПросмотр
					фСтруктураНедоступныхПолейДляТолькоПросмотр.Удалить(ИмяКнопки);
				КонецЕсли; 
				Кнопка.Доступность = Ложь;
			Иначе
				Если НЕ фСтруктураНедоступныхПолейДляТолькоПросмотр.Свойство(ИмяКнопки) Тогда
					Кнопка.Доступность = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

Процедура ТабличноеПоле1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	//бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ТабличноеПоле1ПриВыводеСтроки", Истина);
	
	ЦветВрем = Новый Цвет(ДанныеСтроки.Цвет_R, ДанныеСтроки.Цвет_G, ДанныеСтроки.Цвет_B);
	ОформлениеСтроки.Ячейки.Цвет.ЦветФона = ЦветВрем;
	Если ДанныеСтроки.Угол = 0 Тогда
		ОформлениеСтроки.Ячейки.Угол.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Угол.Текст = "90.00";
	КонецЕсли; 
КонецПроцедуры

Процедура ОсновныеДействияФормыКнопкаПроверитьЗаказ(Кнопка, ДляПроизводства = Ложь)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ОсновныеДействияФормыКнопкаПроверитьЗаказ", Истина);
	
	Если ДляПроизводства = Неопределено Тогда
		ДляПроизводства = Ложь;
	КонецЕсли; 
	
	Если ЭтотОбъект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		Сообщить("Для работы с чек-листом Заявка должна быть записана!");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЮГ_ИспользуетсяЧекЛист() Тогда
		Сообщить("Чек-лист для данного контрагента не используется.");
		Возврат;
	КонецЕсли; 
	
	ТаблРеквизитыДляЧекЛиста = ЮГ_ПолучитьРеквизитыДляЧекЛистаКонтрагента(ДляПроизводства);
	Если ТаблРеквизитыДляЧекЛиста = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЧекЛистСсылка = ЮГ_ПолучитьСсылкуЧекЛиста();
	
	Если ЧекЛистСсылка = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ЭтотОбъект.Ссылка);
		ОткрытьФорму("Документ.ЮГ_ЧекЛистЗаявки.Форма.ФормаДокументаУпр", ПараметрыФормы, ЭтаФорма, ЭтаФорма);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", ЧекЛистСсылка);
		ОткрытьФорму("Документ.ЮГ_ЧекЛистЗаявки.Форма.ФормаДокументаУпр", ПараметрыФормы, ЭтаФорма, ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьИнформационныеЭлементыПоКонтрагенту()
	Если НЕ Контрагент.Пустая() Тогда
		ЮГ_ЦветнаяРаспечатка            = Контрагент.ЮГ_ЦветнаяРаспечатка;
		ОС_СрезатьТехническуюИнформацию = Контрагент.ОС_СрезатьТехническуюИнформацию;
	КонецЕсли; 
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если
		ИмяСобытия = "ИзменениеКарточкиКонтрагента"
		И
		Источник = Контрагент
	Тогда
		УстановитьИнформационныеЭлементыПоКонтрагенту();
	КонецЕсли;
КонецПроцедуры

Процедура СепарацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СепарацииПриНачалеРедактирования", Истина);
	
	Если НоваяСтрока Тогда
		Если ЭтотОбъект.ОС_Сепарации.Количество() > 1 Тогда
			НоваяСтрокаТЧ = ЭтотОбъект.ОС_Сепарации[ЭтотОбъект.ОС_Сепарации.Количество() - 1];
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, ЭтотОбъект.ОС_Сепарации[0]);
			НоваяСтрокаТЧ.ИмяСепарации = "";
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура СепарацииПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СепарацииПередНачаломДобавления", Истина);
	
	Если ЭтотОбъект.ОС_Сепарации.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура СепарацииПередУдалением(Элемент, Отказ)
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.СепарацииПередУдалением", Истина);
	
	ТекущиеДанные = ЭлементыФормы.Сепарации.ТекущиеДанные;
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

Функция ЮГ_ПроверитьДисторсию()
	
	бб1с_Логирование.ЗаписатьВЛог("БылВызов", "АО_ЗаявкаПокупателя.ФормаДокумента.ЮГ_ПроверитьДисторсию", Истина);
	
	ДисторцияВрем = СокрЛП(ЭтотОбъект.Дисторция);
	Если НЕ ЗначениеЗаполнено(ДисторцияВрем) Тогда
		Если ЭтотОбъект.ЮГ_ДисторсияИз1С Тогда
			Предупреждение("Флажок ""Дисторсия из 1С"" включен, но не указано значение ""Дисторсия""!");
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Если ЭтотОбъект.ЮГ_ДисторсияИз1С Тогда
			Если ЭтотОбъект.НаправлениеПечати.Пустая() Тогда
				Предупреждение("Флажок ""Дисторсия из 1С"" включен и заполнена ""Дисторсия"", но не указано ""Направление печати""!");
				Возврат Ложь;
			КонецЕсли; 
			ДисторцияВрем1 = СтрЗаменить(ДисторцияВрем, ",", ".");
			ДисторцияВремЧислом = Неопределено;
			Попытка
				ДисторцияВремЧислом = Число(ДисторцияВрем1);
			Исключение
			КонецПопытки; 
			Если ДисторцияВремЧислом <> Неопределено Тогда
				ДисторцияВрем = ДисторцияВрем = 1;
			Иначе
				Предупреждение("Флажок ""Дисторсия из 1С"" включен, но значение ""Дисторсия"" - некорректное число: " + ДисторцияВрем);
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Процедура ОсновныеДействияФормыОсновныеДействияФормыОК(Кнопка)
	ОтложенныеЗаданияЗаписатьВФормеЗакрыть();
КонецПроцедуры

Процедура ОтложенныеЗаданияЗаписатьВФормеЗакрыть()
	Если НЕ ЭтотОбъект.Заблокирован() Тогда
		Попытка
			ЭтотОбъект.Заблокировать();
		Исключение
			ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	Если ЭтотОбъект.Заблокирован() Тогда
		Если ОтложенныеЗадания.Количество() = 0 Тогда
			Попытка
				Если ЭтотОбъект.ПометкаУдаления Тогда
					ЗаписатьВФорме();
				Иначе
					ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				Закрыть();
			Исключение
				Сообщить("Не удалось записать документ!");
			КонецПопытки;
		Иначе
			ОтложенныеЗаданияПризнакЗаписи = Истина;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПоле2ПослеУдаления(Элемент)
КонецПроцедуры

Процедура ОсновныеДействияФормыНастройкаЦветныхРаспечаток(Кнопка)
	ПечатьРаспечаток(Ложь);
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ОтложенныеЗаданияПризнакЗаписи Тогда
		ОтложенныеЗаданияПризнакЗаписи = Ложь;
		ЭтотОбъект.ДополнительныеСвойства.Вставить("ОтложенныеЗадания", ОтложенныеЗадания);
		Для Каждого ИзменяемыйРеквизит Из ОтложенныеЗаданияИзменяемыеРеквизиты Цикл
			Выполнить("ИзменяемыйРеквизит.СтароеЗначение = " + ИзменяемыйРеквизит.Реквизит + ";");
			Выполнить(ИзменяемыйРеквизит.Реквизит + " = ИзменяемыйРеквизит.НовоеЗначение;");
		КонецЦикла;		
		Попытка
			Если ЭтотОбъект.ПометкаУдаления Тогда
				ЗаписатьВФорме();
			Иначе
				ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ЭтотОбъект.ДополнительныеСвойства.Удалить("ОтложенныеЗадания");
			Для Каждого ИзменяемыйРеквизит Из ОтложенныеЗаданияИзменяемыеРеквизиты Цикл
				Выполнить(ИзменяемыйРеквизит.Реквизит + " = ИзменяемыйРеквизит.СтароеЗначение;");
			КонецЦикла;
			ОтложенныеЗаданияТекстом = "";
			Для Каждого Задание Из ОтложенныеЗадания Цикл
				ОтложенныеЗаданияТекстом = ОтложенныеЗаданияТекстом + Символы.ПС + Задание.Тип;
			КонецЦикла;
			Предупреждение("Не удалось записать документ" + Символы.ПС + "но по нему есть незавершённые отложенные задания" + ОтложенныеЗаданияТекстом + Символы.ПС + "Закрыть форму можно только крестиком");
			Отказ = Истина;
		КонецПопытки;
	ИначеЕсли ОтложенныеЗадания.Количество() > 0 Тогда
		ОтложенныеЗаданияТекстом = "";
		Для Каждого Задание Из ОтложенныеЗадания Цикл
			ОтложенныеЗаданияТекстом = ОтложенныеЗаданияТекстом + Символы.ПС + Задание.Тип;
		КонецЦикла;
		Отказ = Вопрос("По документу есть незавершённые отложенные задания" + ОтложенныеЗаданияТекстом + Символы.ПС + "Закрытие формы приведёт к их отмене" + Символы.ПС + "???ЗАКРЫТЬ ФОРМУ???", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да;
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииДанных()
	ОтложенныеЗаданияТекстом = "";
	Для Каждого Задание Из ОтложенныеЗадания Цикл
		ОтложенныеЗаданияТекстом = ОтложенныеЗаданияТекстом + Символы.ПС + Задание.Тип;
	КонецЦикла;
	Если
		Открыта() 
		И
		ОтложенныеЗаданияТекстом <> ""
		И
		Вопрос("По документу есть незавершённые отложенные задания" + ОтложенныеЗаданияТекстом + Символы.ПС + "???ОЧИСТИТЬ СПИСОК ОТЛОЖЕННЫХ ЗАДАНИЙ???", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да
	Тогда
		ОтложенныеЗадания.Очистить();
		ОтложенныеЗаданияИзменяемыеРеквизиты.Очистить();
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьПроизводство()
	Если
		ЗначениеЗаполнено(Контрагент)
		И
		ЗначениеЗаполнено(Контрагент.ОС_Производство)
		И
		ЗначениеЗаполнено(ОС_Производство)
		И
		ОС_Производство <> Контрагент.ОС_Производство
	Тогда
		Ответ = Вопрос("Вы уверены что хотите отправить заказ в " + ОС_Производство + "? По умолчанию производство " + Контрагент.ОС_Производство, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			ОС_Производство = Контрагент.ОС_Производство;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Функция ОтложенныеЗаданияСоздатьКаталог(Путь, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Истина;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.СоздатьКаталог;
	НовоеЗадание.СтрокаПараметров   = Путь;
	Сообщить("Создание каталога отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ОтложенныеЗаданияСоздатьКаталогНаКлиенте(Путь, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Ложь;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = "";
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.СоздатьКаталог;
	НовоеЗадание.СтрокаПараметров   = Путь;
	Сообщить("Создание каталога отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ОтложенныеЗаданияУдалитьФайлы(Путь, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Истина;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.УдалитьФайлы;
	НовоеЗадание.СтрокаПараметров   = Путь;
	Сообщить("Удаление каталога/файла отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ОтложенныеЗаданияУдалитьФайлыНаКлиенте(Путь, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Ложь;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = "";
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.УдалитьФайлы;
	НовоеЗадание.СтрокаПараметров   = Путь;
	Сообщить("Удаление каталога/файла отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ОтложенныеЗаданияСкопироватьФайлы(Откуда, Куда, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Истина;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.СкопироватьФайлы;
	НовоеЗадание.СтрокаПараметров   = Откуда + "|" + Куда;
	Сообщить("Копирование файла отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ОтложенныеЗаданияСкопироватьФайлыНаКлиенте(Откуда, Куда, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Ложь;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = "";
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.СкопироватьФайлы;
	НовоеЗадание.СтрокаПараметров   = Откуда + "|" + Куда;
	Сообщить("Копирование файла отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ОтложенныеЗаданияПереместитьФайл(Откуда, Куда, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Истина;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = Строка(Новый УникальныйИдентификатор);
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.ПереместитьФайл;
	НовоеЗадание.СтрокаПараметров   = Откуда + "|" + Куда;
	Сообщить("Перемещение файла отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ОтложенныеЗаданияПереместитьФайлНаКлиенте(Откуда, Куда, ТекущееЗадание = "")
	Сеансы       = ПолучитьСеансыИнформационнойБазы();
	НомерСеанса  = НомерСеансаИнформационнойБазы();
	ТекущийСеанс = Неопределено;
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			ТекущийСеанс = Сеанс;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ИмяКомпьютера = ТекущийСеанс.ИмяКомпьютера + "-" + КаталогВременныхФайлов() + "-" + ТекущийСеанс.Пользователь.Имя;
	Идентификатор = Строка(ТекущийСеанс.НачалоСеанса) + "-" + ТекущийСеанс.НомерСеанса;
	НовоеЗадание = ОтложенныеЗадания.Добавить();
	НовоеЗадание.НомерЗадания       = "------------------------" + Формат(ОтложенныеЗадания.Количество(), "ЧЦ=12; ЧДЦ=0; ЧВН=; ЧГ=");
	НовоеЗадание.ВыполнятьПосле     = ТекущееЗадание;
	НовоеЗадание.ВыполнятьНаСервере = Ложь;
	НовоеЗадание.ИмяКомпьютера      = ИмяКомпьютера;
	НовоеЗадание.НомерСеанса        = Идентификатор;
	НовоеЗадание.Ключ               = "";
	НовоеЗадание.Тип                = Перечисления.ОтложенныеЗаданияТипы.ПереместитьФайл;
	НовоеЗадание.СтрокаПараметров   = Откуда + "|" + Куда;
	Сообщить("Перемещение файла отложено до момента записи заявки");
	Возврат НовоеЗадание.НомерЗадания;
КонецФункции

Функция ПолучитьСвязанныеЗаявки(Документ = Неопределено) Экспорт
	
	РезультатЗапроса = Новый ТаблицаЗначений;
	РезультатЗапроса.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.АО_ЗаявкаПокупателя")); 
	Если Документ = Неопределено Тогда
		СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
		СтрокаРезультатЗапроса.Ссылка = Ссылка; //Добавляем текущий заказ
	Иначе
		Для Каждого Стр Из Документ Цикл
			СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
			СтрокаРезультатЗапроса.Ссылка = Стр;
		КонецЦикла;
	КонецЕсли;
	ЗапросРазбитые = Новый Запрос;
	ЗапросРазбитые.Текст =
	"ВЫБРАТЬ
	|	ОС_РазбитыеЗаказы.Основной,
	|	ОС_РазбитыеЗаказы.Подчиненный
	|ИЗ
	|	РегистрСведений.ОС_РазбитыеЗаказы КАК ОС_РазбитыеЗаказы
	|ГДЕ
	|	(ОС_РазбитыеЗаказы.Основной В (&ЗаявкиПокупателей)
	|			ИЛИ ОС_РазбитыеЗаказы.Подчиненный В (&ЗаявкиПокупателей))";
	КоличествоСвязей = 0;
	ЗапросРазбитые.УстановитьПараметр("ЗаявкиПокупателей", РезультатЗапроса);
	РезультатЗапросРазбитые = ЗапросРазбитые.Выполнить().Выгрузить();
	ВремяНачалаВыполнения = ТекущаяДата(); //Ограничим цикл 5 секундами
	Пока КоличествоСвязей < РезультатЗапросРазбитые.Количество() Цикл
		КоличествоСвязей = РезультатЗапросРазбитые.Количество();
		Для Каждого СтрокаРезультатЗапросРазбитые Из РезультатЗапросРазбитые Цикл //Расширяем область поиска
			Если РезультатЗапроса.Найти(СтрокаРезультатЗапросРазбитые.Основной) = Неопределено Тогда
				СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
				СтрокаРезультатЗапроса.Ссылка = СтрокаРезультатЗапросРазбитые.Основной;
			КонецЕсли;
			Если РезультатЗапроса.Найти(СтрокаРезультатЗапросРазбитые.Подчиненный) = Неопределено Тогда
				СтрокаРезультатЗапроса = РезультатЗапроса.Добавить();
				СтрокаРезультатЗапроса.Ссылка = СтрокаРезультатЗапросРазбитые.Подчиненный;
			КонецЕсли;
		КонецЦикла;
		ЗапросРазбитые.УстановитьПараметр("ЗаявкиПокупателей", РезультатЗапроса); //Ищем связи из расширенной области
		РезультатЗапросРазбитые = ЗапросРазбитые.Выполнить().Выгрузить();
		Если ВремяНачалаВыполнения + 5 < ТекущаяДата() Тогда //Ограничим цикл 5 секундами
			Сообщить("Поиск Заявок не произведен до конца, слишком много связей Основной/Подчиненный!");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Документ = Неопределено Тогда
		РезультатЗапроса.Удалить(0); //Удаляем текущий заказ
	КонецЕсли;
	Возврат РезультатЗапроса;
	
КонецФункции

фЮГ_ТаблицаОписанийКнопокПередатьЗаявку = Новый ТаблицаЗначений;
фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Колонки.Добавить("ИмяКнопки",    Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная)));
фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Колонки.Добавить("СтатусЗаявки", Новый ОписаниеТипов("ПеречислениеСсылка.АО_СтатусыЗаявки"));
фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Колонки.Добавить("Заголовок",    Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная)));
фЮГ_ТаблицаОписанийКнопокПередатьЗаявку.Колонки.Добавить("ИмяПроцедуры", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));

ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмВРаботе);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмГотовКОтгрузке);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмЖдемИнфоОтКлиента);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_Изготовлен);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_Изменение);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_МонтажНаАстралон);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_НаРсчет);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_НаУтверждении);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_Возврат);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмНаВывод);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмНаДп);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_НаОтрисовке);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмНаПроверке);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмНаПроверкеДП);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмОтгружен);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОмОтменен);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_ПредварительныйРасчет);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_Проверен);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_ПроверкаКорректора);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_СчетНаПредоплату);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ОС_Утвержден);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ЮГ_ВозвратНаВыяснение);
ЮГ_ДобавитьОписаниеКнопки(Перечисления.АО_СтатусыЗаявки.ЮГ_ВозвратНаДоработку);

фСтруктураНедоступныхПолейДляТолькоПросмотр = Новый Структура;

СоответствиеИменДляКопирования = Новый Соответствие;

//Механизм отложенного выполнения необратимых действий:
//Печать, отправка почты, файловые операции, риповка, CAT
ОтложенныеЗадания = Новый ТаблицаЗначений;
ОтложенныеЗадания.Колонки.Добавить("НомерЗадания");
ОтложенныеЗадания.Колонки.Добавить("ВыполнятьПосле");
ОтложенныеЗадания.Колонки.Добавить("ВыполнятьНаСервере");
ОтложенныеЗадания.Колонки.Добавить("ИмяКомпьютера");
ОтложенныеЗадания.Колонки.Добавить("НомерСеанса");
ОтложенныеЗадания.Колонки.Добавить("Ключ");
ОтложенныеЗадания.Колонки.Добавить("Тип");
ОтложенныеЗадания.Колонки.Добавить("СтрокаПараметров");

//Реквизиты, которые нужно изменять при создании отложенных заданий
ОтложенныеЗаданияИзменяемыеРеквизиты = Новый ТаблицаЗначений;
ОтложенныеЗаданияИзменяемыеРеквизиты.Колонки.Добавить("Реквизит");
ОтложенныеЗаданияИзменяемыеРеквизиты.Колонки.Добавить("НовоеЗначение");
ОтложенныеЗаданияИзменяемыеРеквизиты.Колонки.Добавить("СтароеЗначение");
